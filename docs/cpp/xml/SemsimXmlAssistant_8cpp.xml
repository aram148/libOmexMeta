<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="SemsimXmlAssistant_8cpp" kind="file" language="C++">
    <compoundname>SemsimXmlAssistant.cpp</compoundname>
    <includes refid="SemsimXmlAssistant_8h" local="yes">SemsimXmlAssistant.h</includes>
    <includes refid="HERE_8h" local="yes">HERE.h</includes>
    <incdepgraph>
      <node id="1990">
        <label>sys/stat.h</label>
      </node>
      <node id="1964">
        <label>World.h</label>
        <link refid="World_8h_source"/>
        <childnode refid="1965" relation="include">
        </childnode>
        <childnode refid="1957" relation="include">
        </childnode>
        <childnode refid="1960" relation="include">
        </childnode>
        <childnode refid="1966" relation="include">
        </childnode>
      </node>
      <node id="1980">
        <label>RaptorIOStream.h</label>
        <link refid="RaptorIOStream_8h_source"/>
        <childnode refid="1960" relation="include">
        </childnode>
        <childnode refid="1965" relation="include">
        </childnode>
        <childnode refid="1964" relation="include">
        </childnode>
        <childnode refid="1981" relation="include">
        </childnode>
        <childnode refid="1968" relation="include">
        </childnode>
      </node>
      <node id="1984">
        <label>semsim/Query.h</label>
        <link refid="Query_8h_source"/>
        <childnode refid="1963" relation="include">
        </childnode>
        <childnode refid="1985" relation="include">
        </childnode>
        <childnode refid="1983" relation="include">
        </childnode>
        <childnode refid="1965" relation="include">
        </childnode>
        <childnode refid="1986" relation="include">
        </childnode>
        <childnode refid="1956" relation="include">
        </childnode>
        <childnode refid="1962" relation="include">
        </childnode>
        <childnode refid="1975" relation="include">
        </childnode>
        <childnode refid="1957" relation="include">
        </childnode>
        <childnode refid="1981" relation="include">
        </childnode>
      </node>
      <node id="1989">
        <label>stdexcept</label>
      </node>
      <node id="1982">
        <label>LibrdfParser.h</label>
        <link refid="LibrdfParser_8h_source"/>
        <childnode refid="1965" relation="include">
        </childnode>
        <childnode refid="1960" relation="include">
        </childnode>
        <childnode refid="1964" relation="include">
        </childnode>
        <childnode refid="1973" relation="include">
        </childnode>
        <childnode refid="1967" relation="include">
        </childnode>
        <childnode refid="1971" relation="include">
        </childnode>
      </node>
      <node id="1958">
        <label>libxml/parser.h</label>
      </node>
      <node id="1962">
        <label>string</label>
      </node>
      <node id="1966">
        <label>regex</label>
      </node>
      <node id="1985">
        <label>semsim/Error.h</label>
        <link refid="Error_8h_source"/>
        <childnode refid="1969" relation="include">
        </childnode>
        <childnode refid="1957" relation="include">
        </childnode>
      </node>
      <node id="1969">
        <label>exception</label>
      </node>
      <node id="1961">
        <label>MetaID.h</label>
        <link refid="MetaID_8h_source"/>
        <childnode refid="1962" relation="include">
        </childnode>
        <childnode refid="1963" relation="include">
        </childnode>
        <childnode refid="1975" relation="include">
        </childnode>
        <childnode refid="1981" relation="include">
        </childnode>
        <childnode refid="1957" relation="include">
        </childnode>
      </node>
      <node id="1988">
        <label>curl/curl.h</label>
      </node>
      <node id="1970">
        <label>LibrdfStorage.h</label>
        <link refid="LibrdfStorage_8h_source"/>
        <childnode refid="1965" relation="include">
        </childnode>
        <childnode refid="1962" relation="include">
        </childnode>
        <childnode refid="1960" relation="include">
        </childnode>
        <childnode refid="1964" relation="include">
        </childnode>
      </node>
      <node id="1954">
        <label>src/semsim/SemsimXmlAssistant.cpp</label>
        <link refid="SemsimXmlAssistant_8cpp"/>
        <childnode refid="1955" relation="include">
        </childnode>
        <childnode refid="1991" relation="include">
        </childnode>
      </node>
      <node id="1983">
        <label>SemsimUtils.h</label>
        <link refid="SemsimUtils_8h_source"/>
        <childnode refid="1984" relation="include">
        </childnode>
        <childnode refid="1987" relation="include">
        </childnode>
        <childnode refid="1961" relation="include">
        </childnode>
        <childnode refid="1965" relation="include">
        </childnode>
        <childnode refid="1962" relation="include">
        </childnode>
        <childnode refid="1956" relation="include">
        </childnode>
        <childnode refid="1990" relation="include">
        </childnode>
        <childnode refid="1989" relation="include">
        </childnode>
        <childnode refid="1975" relation="include">
        </childnode>
      </node>
      <node id="1956">
        <label>vector</label>
      </node>
      <node id="1981">
        <label>utility</label>
      </node>
      <node id="1975">
        <label>sstream</label>
      </node>
      <node id="1955">
        <label>SemsimXmlAssistant.h</label>
        <link refid="SemsimXmlAssistant_8h_source"/>
        <childnode refid="1956" relation="include">
        </childnode>
        <childnode refid="1957" relation="include">
        </childnode>
        <childnode refid="1958" relation="include">
        </childnode>
        <childnode refid="1959" relation="include">
        </childnode>
        <childnode refid="1960" relation="include">
        </childnode>
        <childnode refid="1961" relation="include">
        </childnode>
        <childnode refid="1981" relation="include">
        </childnode>
        <childnode refid="1983" relation="include">
        </childnode>
      </node>
      <node id="1968">
        <label>LibrdfException.h</label>
        <link refid="LibrdfException_8h_source"/>
        <childnode refid="1969" relation="include">
        </childnode>
      </node>
      <node id="1973">
        <label>LibrdfNode.h</label>
        <link refid="LibrdfNode_8h_source"/>
        <childnode refid="1965" relation="include">
        </childnode>
        <childnode refid="1974" relation="include">
        </childnode>
        <childnode refid="1960" relation="include">
        </childnode>
        <childnode refid="1975" relation="include">
        </childnode>
        <childnode refid="1967" relation="include">
        </childnode>
        <childnode refid="1964" relation="include">
        </childnode>
        <childnode refid="1968" relation="include">
        </childnode>
      </node>
      <node id="1957">
        <label>iostream</label>
      </node>
      <node id="1987">
        <label>semsim/CurlGet.h</label>
        <link refid="CurlGet_8h_source"/>
        <childnode refid="1962" relation="include">
        </childnode>
        <childnode refid="1988" relation="include">
        </childnode>
        <childnode refid="1989" relation="include">
        </childnode>
      </node>
      <node id="1974">
        <label>raptor2.h</label>
      </node>
      <node id="1977">
        <label>LibrdfQuery.h</label>
        <link refid="LibrdfQuery_8h_source"/>
        <childnode refid="1965" relation="include">
        </childnode>
        <childnode refid="1960" relation="include">
        </childnode>
        <childnode refid="1964" relation="include">
        </childnode>
      </node>
      <node id="1991">
        <label>HERE.h</label>
        <link refid="HERE_8h_source"/>
      </node>
      <node id="1986">
        <label>unordered_map</label>
      </node>
      <node id="1963">
        <label>RedlandAPIWrapper.h</label>
        <link refid="RedlandAPIWrapper_8h_source"/>
        <childnode refid="1964" relation="include">
        </childnode>
        <childnode refid="1967" relation="include">
        </childnode>
        <childnode refid="1970" relation="include">
        </childnode>
        <childnode refid="1971" relation="include">
        </childnode>
        <childnode refid="1973" relation="include">
        </childnode>
        <childnode refid="1977" relation="include">
        </childnode>
        <childnode refid="1976" relation="include">
        </childnode>
        <childnode refid="1979" relation="include">
        </childnode>
        <childnode refid="1982" relation="include">
        </childnode>
        <childnode refid="1978" relation="include">
        </childnode>
        <childnode refid="1980" relation="include">
        </childnode>
      </node>
      <node id="1976">
        <label>LibrdfQueryResults.h</label>
        <link refid="LibrdfQueryResults_8h_source"/>
        <childnode refid="1965" relation="include">
        </childnode>
        <childnode refid="1960" relation="include">
        </childnode>
        <childnode refid="1964" relation="include">
        </childnode>
      </node>
      <node id="1967">
        <label>LibrdfUri.h</label>
        <link refid="LibrdfUri_8h_source"/>
        <childnode refid="1960" relation="include">
        </childnode>
        <childnode refid="1965" relation="include">
        </childnode>
        <childnode refid="1968" relation="include">
        </childnode>
      </node>
      <node id="1959">
        <label>libxml/tree.h</label>
      </node>
      <node id="1972">
        <label>LibrdfStatement.h</label>
        <link refid="LibrdfStatement_8h_source"/>
        <childnode refid="1965" relation="include">
        </childnode>
        <childnode refid="1960" relation="include">
        </childnode>
        <childnode refid="1957" relation="include">
        </childnode>
        <childnode refid="1973" relation="include">
        </childnode>
      </node>
      <node id="1965">
        <label>librdf.h</label>
      </node>
      <node id="1971">
        <label>LibrdfModel.h</label>
        <link refid="LibrdfModel_8h_source"/>
        <childnode refid="1965" relation="include">
        </childnode>
        <childnode refid="1960" relation="include">
        </childnode>
        <childnode refid="1962" relation="include">
        </childnode>
        <childnode refid="1957" relation="include">
        </childnode>
        <childnode refid="1972" relation="include">
        </childnode>
        <childnode refid="1976" relation="include">
        </childnode>
        <childnode refid="1977" relation="include">
        </childnode>
        <childnode refid="1970" relation="include">
        </childnode>
        <childnode refid="1964" relation="include">
        </childnode>
        <childnode refid="1978" relation="include">
        </childnode>
      </node>
      <node id="1978">
        <label>LibrdfStream.h</label>
        <link refid="LibrdfStream_8h_source"/>
        <childnode refid="1965" relation="include">
        </childnode>
        <childnode refid="1960" relation="include">
        </childnode>
        <childnode refid="1964" relation="include">
        </childnode>
      </node>
      <node id="1960">
        <label>memory</label>
      </node>
      <node id="1979">
        <label>LibrdfSerializer.h</label>
        <link refid="LibrdfSerializer_8h_source"/>
        <childnode refid="1965" relation="include">
        </childnode>
        <childnode refid="1960" relation="include">
        </childnode>
        <childnode refid="1964" relation="include">
        </childnode>
        <childnode refid="1967" relation="include">
        </childnode>
        <childnode refid="1971" relation="include">
        </childnode>
        <childnode refid="1980" relation="include">
        </childnode>
        <childnode refid="1973" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacesemsim">semsim</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>Ciaran<sp/>on<sp/>4/14/2020.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SemsimXmlAssistant.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;HERE.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesemsim" kindref="compound">semsim</ref><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>SemsimXmlAssistant::SemsimXmlAssistant(std::string<sp/>xml,<sp/>std::string<sp/>base,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>metaid_num_digits)<sp/>:</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml_(std::move(xml)),<sp/>metaid_base(std::move(base)),<sp/>metaid_num_digits_(metaid_num_digits)<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>SemsimXmlAssistant::getValidElements()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;({</highlight><highlight class="stringliteral">&quot;Any&quot;</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SemsimXmlAssistant::generateMetaId(std::vector&lt;std::string&gt;<sp/>&amp;seen_metaids,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MetaID<sp/>&amp;metaid_gen,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>metaid_gen.generate(count);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(seen_metaids.begin(),<sp/>seen_metaids.end(),<sp/>id)<sp/>!=<sp/>seen_metaids.end())<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generateMetaId(seen_metaids,<sp/>count,<sp/>metaid_gen,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>recursion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SemsimXmlAssistant::addMetaIdsRecursion(xmlNode<sp/>*a_node,<sp/>std::vector&lt;std::string&gt;<sp/>&amp;seen_metaids)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//todo<sp/>make<sp/>private<sp/>if<sp/>not<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MetaID<sp/>metaId(</highlight><highlight class="stringliteral">&quot;SemsimMetaid&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>4);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmlNode<sp/>*cur_node;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur_node<sp/>=<sp/>a_node;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cur_node<sp/>=<sp/>a_node;<sp/>cur_node;<sp/>cur_node<sp/>=<sp/>cur_node-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>isolate<sp/>element<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cur_node-&gt;type<sp/>==<sp/>XML_ELEMENT_NODE)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;valid_elements<sp/>=<sp/>getValidElements();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>node<sp/>name<sp/>is<sp/>in<sp/>our<sp/>list<sp/>of<sp/>valid<sp/>elements<sp/>or<sp/>if<sp/>valid_elements_<sp/>=<sp/>[&quot;All&quot;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(valid_elements.begin(),<sp/>valid_elements.end(),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>cur_node-&gt;name))<sp/>!=<sp/>valid_elements.end()</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(valid_elements.size()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>valid_elements[0]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Any&quot;</highlight><highlight class="normal">)){</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>to<sp/>see<sp/>whether<sp/>the<sp/>element<sp/>has<sp/>the<sp/>metaid<sp/>attribute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_meta_id<sp/>=<sp/>xmlHasProp(cur_node,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xmlChar<sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;metaid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!has_meta_id)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>not,<sp/>we<sp/>add<sp/>one<sp/>and<sp/>give<sp/>it<sp/>a<sp/>unique<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>id;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SemsimXmlAssistant::generateMetaId(seen_metaids,<sp/>count,<sp/>metaId,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmlNewProp(cur_node,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xmlChar<sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;metaid&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xmlChar<sp/>*)<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.c_str());</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seen_metaids.push_back(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>so,<sp/>we<sp/>take<sp/>note<sp/>by<sp/>adding<sp/>it<sp/>to<sp/>seen_metaids.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmlChar<sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>xmlGetProp(cur_node,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xmlChar<sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;metaid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seen_metaids.emplace_back((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmlFree(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>recursion,<sp/>we<sp/>do<sp/>this<sp/>for<sp/>every<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addMetaIdsRecursion(cur_node-&gt;children,<sp/>seen_metaids);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;std::string,<sp/>std::vector&lt;std::string&gt;&gt;<sp/>SemsimXmlAssistant::addMetaIds()<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LIBXML_TEST_VERSION;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmlDocPtr<sp/>doc;<sp/></highlight><highlight class="comment">/*<sp/>the<sp/>resulting<sp/>document<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc<sp/>=<sp/>xmlParseDoc((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xmlChar<sp/>*)<sp/>xml_.c_str());</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doc<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>NullPointerException(</highlight><highlight class="stringliteral">&quot;NullPointerException:<sp/><sp/>SemsimXmlAssistant::addMetaIds():<sp/>doc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmlNodePtr<sp/>root_element<sp/>=<sp/>xmlDocGetRootElement(doc);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>seen_metaids<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addMetaIdsRecursion(root_element,<sp/>seen_metaids);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmlChar<sp/>*s;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmlDocDumpMemory(doc,<sp/>&amp;s,<sp/>&amp;size);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::bad_alloc();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>x<sp/>=<sp/>std::string((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>s);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmlFree(s);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmlFreeDoc(doc);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmlCleanupParser();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair&lt;std::string,<sp/>std::vector&lt;std::string&gt;&gt;<sp/>sbml_with_metaid(x,<sp/>seen_metaids);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sbml_with_metaid;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>SBMLAssistant::getValidElements()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>valid_elements_<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;model&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;unit&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;compartment&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;species&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;reaction&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;kineticLaw&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;localParameter&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>valid_elements_;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>CellMLAssistant::getValidElements()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>valid_elements_<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;model&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;unit&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;compartment&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;species&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;reaction&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;kineticLaw&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;localParameter&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>valid_elements_;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlAssistantPtr<sp/>SemsimXmlAssistantFactory::generate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;xml,<sp/>SemsimXmlType<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SEMSIM_TYPE_SBML:<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SBMLAssistant<sp/>sbmlAssistant(xml);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;SBMLAssistant&gt;(sbmlAssistant);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SEMSIM_TYPE_CELLML:<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CellMLAssistant<sp/>cellMlAssistant(xml);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;CellMLAssistant&gt;(cellMlAssistant);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SEMSIM_TYPE_OTHER:<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SemsimXmlAssistant<sp/>xmlAssistant(xml);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;SemsimXmlAssistant&gt;(xmlAssistant);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Not<sp/>a<sp/>correct<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/semsim/SemsimXmlAssistant.cpp"/>
  </compounddef>
</doxygen>
