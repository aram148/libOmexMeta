<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="3405px" preserveAspectRatio="none" style="width:4919px;height:3405px;" version="1.1" viewBox="0 0 4919 3405" width="4919px" zoomAndPan="magnify"><defs><filter height="300%" id="fbs1gd1e3tzky" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[91066023993798d5dde570551cd8c913]
cluster semsim--><polygon fill="#FFFFFF" filter="url(#fbs1gd1e3tzky)" points="22,24,81,24,88,47.6094,4740,47.6094,4740,3393,22,3393,22,24" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="22" x2="88" y1="47.6094" y2="47.6094"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="53" x="26" y="40.5332">semsim</text><!--MD5=[6cccae008001d5a007f1eee5c69935d8]
class semsim.Accessor--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="89.5078" id="semsim.Accessor" style="stroke: #A80036; stroke-width: 1.5;" width="418" x="2697" y="205"/><ellipse cx="2876.25" cy="221" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2879.0156,216.875 Q2879.1719,216.6563 2879.3594,216.5469 Q2879.5469,216.4375 2879.7656,216.4375 Q2880.1406,216.4375 2880.375,216.6953 Q2880.6094,216.9531 2880.6094,217.5625 L2880.6094,219.0156 Q2880.6094,219.625 2880.375,219.8906 Q2880.1406,220.1563 2879.7656,220.1563 Q2879.4219,220.1563 2879.2188,219.9531 Q2879.0156,219.7656 2878.9063,219.25 Q2878.8594,218.8906 2878.6719,218.7031 Q2878.3438,218.3281 2877.7344,218.1094 Q2877.125,217.8906 2876.5,217.8906 Q2875.7344,217.8906 2875.1016,218.2188 Q2874.4688,218.5469 2873.9766,219.2969 Q2873.4844,220.0469 2873.4844,221.0781 L2873.4844,222.1719 Q2873.4844,223.4063 2874.375,224.2266 Q2875.2656,225.0469 2876.8594,225.0469 Q2877.7969,225.0469 2878.4531,224.7969 Q2878.8438,224.6406 2879.2656,224.2031 Q2879.5313,223.9375 2879.6797,223.8594 Q2879.8281,223.7813 2880.0313,223.7813 Q2880.3594,223.7813 2880.6172,224.0391 Q2880.875,224.2969 2880.875,224.6406 Q2880.875,224.9844 2880.5313,225.3906 Q2880.0313,225.9688 2879.2344,226.2969 Q2878.1563,226.75 2876.8594,226.75 Q2875.3438,226.75 2874.1406,226.125 Q2873.1563,225.625 2872.4688,224.5547 Q2871.7813,223.4844 2871.7813,222.2031 L2871.7813,221.0469 Q2871.7813,219.7188 2872.3984,218.5703 Q2873.0156,217.4219 2874.1094,216.8047 Q2875.2031,216.1875 2876.4375,216.1875 Q2877.1719,216.1875 2877.8203,216.3516 Q2878.4688,216.5156 2879.0156,216.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="51" x="2896.75" y="225.9102">Accessor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2698" x2="3114" y1="237" y2="237"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2698" x2="3114" y1="245" y2="245"/><ellipse cx="2708" cy="256" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="376" x="2717" y="260.4189">hasCompartmentWithMetaId(const std::string&amp; metaid, libsbml::Model* m) : bool</text><ellipse cx="2708" cy="269.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="392" x="2717" y="274.2549">findCompartment(const std::string&amp; sid, libsbml::Model* m) : libsbml::Compartment*</text><ellipse cx="2708" cy="283.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="390" x="2717" y="288.0908">findUnitDefinition(const std::string&amp; sid, libsbml::Model* m) : libsbml::UnitDefinition*</text><!--MD5=[c8c118dbdee25114759ee7345884fbe6]
class semsim.Annotation--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="75.6719" id="semsim.Annotation" style="stroke: #A80036; stroke-width: 1.5;" width="286" x="3150" y="212"/><ellipse cx="3259.75" cy="228" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3262.5156,223.875 Q3262.6719,223.6563 3262.8594,223.5469 Q3263.0469,223.4375 3263.2656,223.4375 Q3263.6406,223.4375 3263.875,223.6953 Q3264.1094,223.9531 3264.1094,224.5625 L3264.1094,226.0156 Q3264.1094,226.625 3263.875,226.8906 Q3263.6406,227.1563 3263.2656,227.1563 Q3262.9219,227.1563 3262.7188,226.9531 Q3262.5156,226.7656 3262.4063,226.25 Q3262.3594,225.8906 3262.1719,225.7031 Q3261.8438,225.3281 3261.2344,225.1094 Q3260.625,224.8906 3260,224.8906 Q3259.2344,224.8906 3258.6016,225.2188 Q3257.9688,225.5469 3257.4766,226.2969 Q3256.9844,227.0469 3256.9844,228.0781 L3256.9844,229.1719 Q3256.9844,230.4063 3257.875,231.2266 Q3258.7656,232.0469 3260.3594,232.0469 Q3261.2969,232.0469 3261.9531,231.7969 Q3262.3438,231.6406 3262.7656,231.2031 Q3263.0313,230.9375 3263.1797,230.8594 Q3263.3281,230.7813 3263.5313,230.7813 Q3263.8594,230.7813 3264.1172,231.0391 Q3264.375,231.2969 3264.375,231.6406 Q3264.375,231.9844 3264.0313,232.3906 Q3263.5313,232.9688 3262.7344,233.2969 Q3261.6563,233.75 3260.3594,233.75 Q3258.8438,233.75 3257.6406,233.125 Q3256.6563,232.625 3255.9688,231.5547 Q3255.2813,230.4844 3255.2813,229.2031 L3255.2813,228.0469 Q3255.2813,226.7188 3255.8984,225.5703 Q3256.5156,224.4219 3257.6094,223.8047 Q3258.7031,223.1875 3259.9375,223.1875 Q3260.6719,223.1875 3261.3203,223.3516 Q3261.9688,223.5156 3262.5156,223.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="58" x="3280.25" y="232.9102">Annotation</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3151" x2="3435" y1="244" y2="244"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3151" x2="3435" y1="252" y2="252"/><ellipse cx="3161" cy="263" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="243" x="3170" y="267.4189">stripAnnotations(libsbml::SBMLDocument* d) : void</text><ellipse cx="3161" cy="276.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="260" x="3170" y="281.2549">stripAnnotationsFromElement(libsbml::SBase* x) : void</text><!--MD5=[441b65b94063ae95fc7577ef03717872]
class semsim.AnnotationBase--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="158.6875" id="semsim.AnnotationBase" style="stroke: #A80036; stroke-width: 1.5;" width="555" x="1905.5" y="170.5"/><ellipse cx="2135.25" cy="186.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2137.4375,188.2656 L2133.2969,188.2656 L2132.875,189.2969 L2133.2969,189.2969 Q2133.9063,189.2969 2134.1719,189.5313 Q2134.4375,189.7656 2134.4375,190.1563 Q2134.4375,190.5313 2134.1719,190.7656 Q2133.9063,191 2133.2969,191 L2131,191 Q2130.3906,191 2130.1328,190.7656 Q2129.875,190.5313 2129.875,190.1406 Q2129.875,189.7656 2130.1484,189.5234 Q2130.4219,189.2813 2131.0469,189.2969 L2133.7188,182.6406 L2132.6094,182.6406 Q2132,182.6406 2131.7344,182.4063 Q2131.4688,182.1719 2131.4688,181.7813 Q2131.4688,181.4063 2131.7344,181.1719 Q2132,180.9375 2132.6094,180.9375 L2136.2813,180.9375 L2139.6719,189.2969 Q2140.2656,189.2969 2140.4531,189.4375 Q2140.8438,189.7031 2140.8438,190.1563 Q2140.8438,190.5313 2140.5859,190.7656 Q2140.3281,191 2139.7188,191 L2137.4219,191 Q2136.8125,191 2136.5469,190.7656 Q2136.2813,190.5313 2136.2813,190.1406 Q2136.2813,189.7656 2136.5469,189.5313 Q2136.8125,189.2969 2137.4219,189.2969 L2137.8438,189.2969 L2137.4375,188.2656 Z M2136.7188,186.5625 L2135.3594,183.1875 L2133.9844,186.5625 L2136.7188,186.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="87" x="2155.75" y="191.4102">AnnotationBase</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1906.5" x2="2459.5" y1="202.5" y2="202.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1906.5" x2="2459.5" y1="210.5" y2="210.5"/><ellipse cx="1916.5" cy="221.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="1925.5" y="225.9189">~AnnotationBase()</text><ellipse cx="1916.5" cy="235.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="163" x="1925.5" y="239.7549">clone() : AnnotationBase* {query}</text><ellipse cx="1916.5" cy="249.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="139" x="1925.5" y="253.5908">isComposite() : bool {query}</text><ellipse cx="1916.5" cy="263.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="401" x="1925.5" y="267.4268">getRDF(const URI&amp; sbml_base_uri, const std::string&amp; format) : std::string {query}</text><ellipse cx="1916.5" cy="276.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="1925.5" y="281.2627">humanize() : std::string {query}</text><ellipse cx="1916.5" cy="290.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="159" x="1925.5" y="295.0986">getMetaId() : std::string&amp; {query}</text><ellipse cx="1916.5" cy="304.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="442" x="1925.5" y="308.9346">makeComposite(const PhysicalProperty&amp; prop) : std::unique_ptr&lt;AnnotationBase&gt; {query}</text><ellipse cx="1916.5" cy="318.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="529" x="1925.5" y="322.7705">serializeToRDF(const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}</text><!--MD5=[ec586cbc5128e105129e974e1d86062e]
class semsim.CHEBI--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="61.8359" id="semsim.CHEBI" style="stroke: #A80036; stroke-width: 1.5;" width="178" x="3471" y="219"/><ellipse cx="3537.25" cy="235" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3540.0156,230.875 Q3540.1719,230.6563 3540.3594,230.5469 Q3540.5469,230.4375 3540.7656,230.4375 Q3541.1406,230.4375 3541.375,230.6953 Q3541.6094,230.9531 3541.6094,231.5625 L3541.6094,233.0156 Q3541.6094,233.625 3541.375,233.8906 Q3541.1406,234.1563 3540.7656,234.1563 Q3540.4219,234.1563 3540.2188,233.9531 Q3540.0156,233.7656 3539.9063,233.25 Q3539.8594,232.8906 3539.6719,232.7031 Q3539.3438,232.3281 3538.7344,232.1094 Q3538.125,231.8906 3537.5,231.8906 Q3536.7344,231.8906 3536.1016,232.2188 Q3535.4688,232.5469 3534.9766,233.2969 Q3534.4844,234.0469 3534.4844,235.0781 L3534.4844,236.1719 Q3534.4844,237.4063 3535.375,238.2266 Q3536.2656,239.0469 3537.8594,239.0469 Q3538.7969,239.0469 3539.4531,238.7969 Q3539.8438,238.6406 3540.2656,238.2031 Q3540.5313,237.9375 3540.6797,237.8594 Q3540.8281,237.7813 3541.0313,237.7813 Q3541.3594,237.7813 3541.6172,238.0391 Q3541.875,238.2969 3541.875,238.6406 Q3541.875,238.9844 3541.5313,239.3906 Q3541.0313,239.9688 3540.2344,240.2969 Q3539.1563,240.75 3537.8594,240.75 Q3536.3438,240.75 3535.1406,240.125 Q3534.1563,239.625 3533.4688,238.5547 Q3532.7813,237.4844 3532.7813,236.2031 L3532.7813,235.0469 Q3532.7813,233.7188 3533.3984,232.5703 Q3534.0156,231.4219 3535.1094,230.8047 Q3536.2031,230.1875 3537.4375,230.1875 Q3538.1719,230.1875 3538.8203,230.3516 Q3539.4688,230.5156 3540.0156,230.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="37" x="3557.75" y="239.9102">CHEBI</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3472" x2="3648" y1="251" y2="251"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3472" x2="3648" y1="259" y2="259"/><ellipse cx="3482" cy="270" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="152" x="3491" y="274.4189">get(OntologyTerm t) : Resource</text><!--MD5=[8eaef2c99f09896dce0d0aea2512c221]
class semsim.CL--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="61.8359" id="semsim.CL" style="stroke: #A80036; stroke-width: 1.5;" width="178" x="3684" y="219"/><ellipse cx="3760.75" cy="235" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3763.5156,230.875 Q3763.6719,230.6563 3763.8594,230.5469 Q3764.0469,230.4375 3764.2656,230.4375 Q3764.6406,230.4375 3764.875,230.6953 Q3765.1094,230.9531 3765.1094,231.5625 L3765.1094,233.0156 Q3765.1094,233.625 3764.875,233.8906 Q3764.6406,234.1563 3764.2656,234.1563 Q3763.9219,234.1563 3763.7188,233.9531 Q3763.5156,233.7656 3763.4063,233.25 Q3763.3594,232.8906 3763.1719,232.7031 Q3762.8438,232.3281 3762.2344,232.1094 Q3761.625,231.8906 3761,231.8906 Q3760.2344,231.8906 3759.6016,232.2188 Q3758.9688,232.5469 3758.4766,233.2969 Q3757.9844,234.0469 3757.9844,235.0781 L3757.9844,236.1719 Q3757.9844,237.4063 3758.875,238.2266 Q3759.7656,239.0469 3761.3594,239.0469 Q3762.2969,239.0469 3762.9531,238.7969 Q3763.3438,238.6406 3763.7656,238.2031 Q3764.0313,237.9375 3764.1797,237.8594 Q3764.3281,237.7813 3764.5313,237.7813 Q3764.8594,237.7813 3765.1172,238.0391 Q3765.375,238.2969 3765.375,238.6406 Q3765.375,238.9844 3765.0313,239.3906 Q3764.5313,239.9688 3763.7344,240.2969 Q3762.6563,240.75 3761.3594,240.75 Q3759.8438,240.75 3758.6406,240.125 Q3757.6563,239.625 3756.9688,238.5547 Q3756.2813,237.4844 3756.2813,236.2031 L3756.2813,235.0469 Q3756.2813,233.7188 3756.8984,232.5703 Q3757.5156,231.4219 3758.6094,230.8047 Q3759.7031,230.1875 3760.9375,230.1875 Q3761.6719,230.1875 3762.3203,230.3516 Q3762.9688,230.5156 3763.5156,230.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="16" x="3781.25" y="239.9102">CL</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3685" x2="3861" y1="251" y2="251"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3685" x2="3861" y1="259" y2="259"/><ellipse cx="3695" cy="270" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="152" x="3704" y="274.4189">get(OntologyTerm t) : Resource</text><!--MD5=[4665198f023e503db5bd0f7e7dbe67c3]
class semsim.CompositeAnnotation--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="338.5547" id="semsim.CompositeAnnotation" style="stroke: #A80036; stroke-width: 1.5;" width="621" x="1834.5" y="500"/><ellipse cx="2081.25" cy="516" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2084.0156,511.875 Q2084.1719,511.6563 2084.3594,511.5469 Q2084.5469,511.4375 2084.7656,511.4375 Q2085.1406,511.4375 2085.375,511.6953 Q2085.6094,511.9531 2085.6094,512.5625 L2085.6094,514.0156 Q2085.6094,514.625 2085.375,514.8906 Q2085.1406,515.1563 2084.7656,515.1563 Q2084.4219,515.1563 2084.2188,514.9531 Q2084.0156,514.7656 2083.9063,514.25 Q2083.8594,513.8906 2083.6719,513.7031 Q2083.3438,513.3281 2082.7344,513.1094 Q2082.125,512.8906 2081.5,512.8906 Q2080.7344,512.8906 2080.1016,513.2188 Q2079.4688,513.5469 2078.9766,514.2969 Q2078.4844,515.0469 2078.4844,516.0781 L2078.4844,517.1719 Q2078.4844,518.4063 2079.375,519.2266 Q2080.2656,520.0469 2081.8594,520.0469 Q2082.7969,520.0469 2083.4531,519.7969 Q2083.8438,519.6406 2084.2656,519.2031 Q2084.5313,518.9375 2084.6797,518.8594 Q2084.8281,518.7813 2085.0313,518.7813 Q2085.3594,518.7813 2085.6172,519.0391 Q2085.875,519.2969 2085.875,519.6406 Q2085.875,519.9844 2085.5313,520.3906 Q2085.0313,520.9688 2084.2344,521.2969 Q2083.1563,521.75 2081.8594,521.75 Q2080.3438,521.75 2079.1406,521.125 Q2078.1563,520.625 2077.4688,519.5547 Q2076.7813,518.4844 2076.7813,517.2031 L2076.7813,516.0469 Q2076.7813,514.7188 2077.3984,513.5703 Q2078.0156,512.4219 2079.1094,511.8047 Q2080.2031,511.1875 2081.4375,511.1875 Q2082.1719,511.1875 2082.8203,511.3516 Q2083.4688,511.5156 2084.0156,511.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="119" x="2101.75" y="520.9102">CompositeAnnotation</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1835.5" x2="2454.5" y1="532" y2="532"/><polygon fill="none" points="1845.5,538,1849.5,542,1845.5,546,1841.5,542" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="1854.5" y="547.4189">entity_ : Entity</text><polygon fill="none" points="1845.5,551.8359,1849.5,555.8359,1845.5,559.8359,1841.5,555.8359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="1854.5" y="561.2549">property_ : PhysicalProperty</text><polygon fill="none" points="1845.5,565.6719,1849.5,569.6719,1845.5,573.6719,1841.5,569.6719" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="1854.5" y="575.0908">metaid_ : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1835.5" x2="2454.5" y1="581.5078" y2="581.5078"/><ellipse cx="1845.5" cy="592.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="495" x="1854.5" y="596.9268">CompositeAnnotation(const std::string&amp; metaid, const PhysicalProperty&amp; property, const Entity&amp; entity)</text><ellipse cx="1845.5" cy="606.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="449" x="1854.5" y="610.7627">CompositeAnnotation(const std::string&amp; metaid, PhysicalProperty&amp;&amp; property, Entity&amp;&amp; entity)</text><ellipse cx="1845.5" cy="620.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="1854.5" y="624.5986">CompositeAnnotation(const CompositeAnnotation&amp; other)</text><ellipse cx="1845.5" cy="634.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="1854.5" y="638.4346">CompositeAnnotation(CompositeAnnotation&amp;&amp; other)</text><ellipse cx="1845.5" cy="647.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="434" x="1854.5" y="652.2705">CompositeAnnotation(const SingularAnnotation&amp; other, const PhysicalProperty&amp; property)</text><ellipse cx="1845.5" cy="661.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="1854.5" y="666.1064">clone() : AnnotationBase* {query}</text><ellipse cx="1845.5" cy="675.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="339" x="1854.5" y="679.9424">makeComposite(const PhysicalProperty&amp; prop) : AnnotationPtr {query}</text><ellipse cx="1845.5" cy="689.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="1854.5" y="693.7783">getEntity() : Entity&amp; {query}</text><ellipse cx="1845.5" cy="703.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="1854.5" y="707.6143">getEntity() : Entity&amp;</text><ellipse cx="1845.5" cy="717.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="1854.5" y="721.4502">isComposite() : bool {query}</text><ellipse cx="1845.5" cy="730.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="1854.5" y="735.2861">isEntityEmpty() : bool {query}</text><ellipse cx="1845.5" cy="744.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="390" x="1854.5" y="749.1221">getRDF(const URI&amp; sbml_base_uri, const std::string&amp; format) : std::string {query}</text><ellipse cx="1845.5" cy="758.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="1854.5" y="762.958">humanize() : std::string {query}</text><ellipse cx="1845.5" cy="772.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="1854.5" y="776.7939">getMetaId() : std::string&amp; {query}</text><ellipse cx="1845.5" cy="786.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="329" x="1854.5" y="790.6299">addTerm(const Relation&amp; relation, const Resource&amp; resource) : void</text><polygon fill="#FFFF44" points="1845.5,795.0469,1849.5,799.0469,1845.5,803.0469,1841.5,799.0469" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="595" x="1854.5" y="804.4658">serializePhysicalPropertyToRDF(const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}</text><ellipse cx="1845.5" cy="813.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="514" x="1854.5" y="818.3018">serializeToRDF(const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}</text><ellipse cx="1845.5" cy="827.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="1854.5" y="832.1377">setMetaId(const std::string&amp; metaid) : void</text><!--MD5=[afe0c8e6a2f433b41fd44a20399f528f]
class semsim.DescriptorTerm--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="75.6719" id="semsim.DescriptorTerm" style="stroke: #A80036; stroke-width: 1.5;" width="358" x="3897" y="212"/><ellipse cx="4028.75" cy="228" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4031.5156,223.875 Q4031.6719,223.6563 4031.8594,223.5469 Q4032.0469,223.4375 4032.2656,223.4375 Q4032.6406,223.4375 4032.875,223.6953 Q4033.1094,223.9531 4033.1094,224.5625 L4033.1094,226.0156 Q4033.1094,226.625 4032.875,226.8906 Q4032.6406,227.1563 4032.2656,227.1563 Q4031.9219,227.1563 4031.7188,226.9531 Q4031.5156,226.7656 4031.4063,226.25 Q4031.3594,225.8906 4031.1719,225.7031 Q4030.8438,225.3281 4030.2344,225.1094 Q4029.625,224.8906 4029,224.8906 Q4028.2344,224.8906 4027.6016,225.2188 Q4026.9688,225.5469 4026.4766,226.2969 Q4025.9844,227.0469 4025.9844,228.0781 L4025.9844,229.1719 Q4025.9844,230.4063 4026.875,231.2266 Q4027.7656,232.0469 4029.3594,232.0469 Q4030.2969,232.0469 4030.9531,231.7969 Q4031.3438,231.6406 4031.7656,231.2031 Q4032.0313,230.9375 4032.1797,230.8594 Q4032.3281,230.7813 4032.5313,230.7813 Q4032.8594,230.7813 4033.1172,231.0391 Q4033.375,231.2969 4033.375,231.6406 Q4033.375,231.9844 4033.0313,232.3906 Q4032.5313,232.9688 4031.7344,233.2969 Q4030.6563,233.75 4029.3594,233.75 Q4027.8438,233.75 4026.6406,233.125 Q4025.6563,232.625 4024.9688,231.5547 Q4024.2813,230.4844 4024.2813,229.2031 L4024.2813,228.0469 Q4024.2813,226.7188 4024.8984,225.5703 Q4025.5156,224.4219 4026.6094,223.8047 Q4027.7031,223.1875 4028.9375,223.1875 Q4029.6719,223.1875 4030.3203,223.3516 Q4030.9688,223.5156 4031.5156,223.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="86" x="4049.25" y="232.9102">DescriptorTerm</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3898" x2="4254" y1="244" y2="244"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3898" x2="4254" y1="252" y2="252"/><ellipse cx="3908" cy="263" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="3917" y="267.4189">DescriptorTerm(const Relation&amp; relation, const Resource&amp; resource)</text><ellipse cx="3908" cy="276.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="3917" y="281.2549">DescriptorTerm(Relation&amp;&amp; relation, Resource&amp;&amp; resource)</text><!--MD5=[af8b20ab111e024f308e86c84cc7a3ff]
class semsim.Entity--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="310.8828" id="semsim.Entity" style="stroke: #A80036; stroke-width: 1.5;" width="540" x="1357" y="899"/><ellipse cx="1608.25" cy="915" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1611.0156,910.875 Q1611.1719,910.6563 1611.3594,910.5469 Q1611.5469,910.4375 1611.7656,910.4375 Q1612.1406,910.4375 1612.375,910.6953 Q1612.6094,910.9531 1612.6094,911.5625 L1612.6094,913.0156 Q1612.6094,913.625 1612.375,913.8906 Q1612.1406,914.1563 1611.7656,914.1563 Q1611.4219,914.1563 1611.2188,913.9531 Q1611.0156,913.7656 1610.9063,913.25 Q1610.8594,912.8906 1610.6719,912.7031 Q1610.3438,912.3281 1609.7344,912.1094 Q1609.125,911.8906 1608.5,911.8906 Q1607.7344,911.8906 1607.1016,912.2188 Q1606.4688,912.5469 1605.9766,913.2969 Q1605.4844,914.0469 1605.4844,915.0781 L1605.4844,916.1719 Q1605.4844,917.4063 1606.375,918.2266 Q1607.2656,919.0469 1608.8594,919.0469 Q1609.7969,919.0469 1610.4531,918.7969 Q1610.8438,918.6406 1611.2656,918.2031 Q1611.5313,917.9375 1611.6797,917.8594 Q1611.8281,917.7813 1612.0313,917.7813 Q1612.3594,917.7813 1612.6172,918.0391 Q1612.875,918.2969 1612.875,918.6406 Q1612.875,918.9844 1612.5313,919.3906 Q1612.0313,919.9688 1611.2344,920.2969 Q1610.1563,920.75 1608.8594,920.75 Q1607.3438,920.75 1606.1406,920.125 Q1605.1563,919.625 1604.4688,918.5547 Q1603.7813,917.4844 1603.7813,916.2031 L1603.7813,915.0469 Q1603.7813,913.7188 1604.3984,912.5703 Q1605.0156,911.4219 1606.1094,910.8047 Q1607.2031,910.1875 1608.4375,910.1875 Q1609.1719,910.1875 1609.8203,910.3516 Q1610.4688,910.5156 1611.0156,910.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="29" x="1628.75" y="919.9102">Entity</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1358" x2="1896" y1="931" y2="931"/><polygon fill="none" points="1368,937,1372,941,1368,945,1364,941" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="1377" y="946.4189">descriptors_ : Descriptors</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1358" x2="1896" y1="952.8359" y2="952.8359"/><ellipse cx="1368" cy="963.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="1377" y="968.2549">Entity(const std::string&amp; metaid)</text><ellipse cx="1368" cy="977.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="1377" y="982.0908">Entity(const std::string&amp; metaid, const Resource&amp; definition)</text><ellipse cx="1368" cy="991.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="417" x="1377" y="995.9268">Entity(const std::string&amp; metaid, const Resource&amp; definition, const EntityDescriptor&amp; d)</text><ellipse cx="1368" cy="1005.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="1377" y="1009.7627">Entity(const std::string&amp; metaid, Resource&amp;&amp; definition, EntityDescriptor&amp;&amp; d)</text><ellipse cx="1368" cy="1019.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="1377" y="1023.5986">Entity(const SingularAnnotation&amp; annotation)</text><ellipse cx="1368" cy="1033.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="1377" y="1037.4346">Entity(const Entity&amp; other)</text><ellipse cx="1368" cy="1046.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="1377" y="1051.2705">Entity(Entity&amp;&amp; other)</text><ellipse cx="1368" cy="1060.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="1377" y="1065.1064">descriptors_() : ) ,</text><ellipse cx="1368" cy="1074.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="1377" y="1078.9424">getDescriptors() : Descriptors&amp; {query}</text><ellipse cx="1368" cy="1088.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="1377" y="1092.7783">getDescriptors() : Descriptors&amp;</text><ellipse cx="1368" cy="1102.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="1377" y="1106.6143">getDescriptor(std::size_t k) : EntityDescriptor&amp; {query}</text><ellipse cx="1368" cy="1116.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="1377" y="1120.4502">getDescriptor(std::size_t k) : EntityDescriptor&amp;</text><ellipse cx="1368" cy="1129.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="1377" y="1134.2861">getNumDescriptors() : std::size_t {query}</text><ellipse cx="1368" cy="1143.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="1377" y="1148.1221">humanize() : std::string {query}</text><polygon fill="#FFFF44" points="1368,1152.5391,1372,1156.5391,1368,1160.5391,1364,1156.5391" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="1377" y="1161.958">humanizeDescriptors() : std::string {query}</text><ellipse cx="1368" cy="1171.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="1377" y="1175.7939">addDescriptor(const EntityDescriptor&amp; d) : void</text><ellipse cx="1368" cy="1185.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="1377" y="1189.6299">addDescriptor(EntityDescriptor&amp;&amp; d) : void</text><ellipse cx="1368" cy="1199.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="514" x="1377" y="1203.4658">serializeToRDF(const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}</text><!--MD5=[0b7aaed7880df208364e3e9f579573a8]
class semsim.EntityBase--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="380.0625" id="semsim.EntityBase" style="stroke: #A80036; stroke-width: 1.5;" width="758" x="1112" y="60"/><ellipse cx="1457.75" cy="76" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1460.5156,71.875 Q1460.6719,71.6563 1460.8594,71.5469 Q1461.0469,71.4375 1461.2656,71.4375 Q1461.6406,71.4375 1461.875,71.6953 Q1462.1094,71.9531 1462.1094,72.5625 L1462.1094,74.0156 Q1462.1094,74.625 1461.875,74.8906 Q1461.6406,75.1563 1461.2656,75.1563 Q1460.9219,75.1563 1460.7188,74.9531 Q1460.5156,74.7656 1460.4063,74.25 Q1460.3594,73.8906 1460.1719,73.7031 Q1459.8438,73.3281 1459.2344,73.1094 Q1458.625,72.8906 1458,72.8906 Q1457.2344,72.8906 1456.6016,73.2188 Q1455.9688,73.5469 1455.4766,74.2969 Q1454.9844,75.0469 1454.9844,76.0781 L1454.9844,77.1719 Q1454.9844,78.4063 1455.875,79.2266 Q1456.7656,80.0469 1458.3594,80.0469 Q1459.2969,80.0469 1459.9531,79.7969 Q1460.3438,79.6406 1460.7656,79.2031 Q1461.0313,78.9375 1461.1797,78.8594 Q1461.3281,78.7813 1461.5313,78.7813 Q1461.8594,78.7813 1462.1172,79.0391 Q1462.375,79.2969 1462.375,79.6406 Q1462.375,79.9844 1462.0313,80.3906 Q1461.5313,80.9688 1460.7344,81.2969 Q1459.6563,81.75 1458.3594,81.75 Q1456.8438,81.75 1455.6406,81.125 Q1454.6563,80.625 1453.9688,79.5547 Q1453.2813,78.4844 1453.2813,77.2031 L1453.2813,76.0469 Q1453.2813,74.7188 1453.8984,73.5703 Q1454.5156,72.4219 1455.6094,71.8047 Q1456.7031,71.1875 1457.9375,71.1875 Q1458.6719,71.1875 1459.3203,71.3516 Q1459.9688,71.5156 1460.5156,71.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="58" x="1478.25" y="80.9102">EntityBase</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1113" x2="1869" y1="92" y2="92"/><polygon fill="none" points="1123,98,1127,102,1123,106,1119,102" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="1132" y="107.4189">definitions_ : Definitions</text><polygon fill="none" points="1123,111.8359,1127,115.8359,1123,119.8359,1119,115.8359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="1132" y="121.2549">terms_ : Terms</text><ellipse cx="1123" cy="130.6719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="1132" y="135.0908">metaid_ : return</text><polygon fill="none" points="1123,139.5078,1127,143.5078,1123,147.5078,1119,143.5078" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="1132" y="148.9268">metaid_ : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1113" x2="1869" y1="155.3438" y2="155.3438"/><ellipse cx="1123" cy="166.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="1132" y="170.7627">EntityBase(std::string metaid, const Resource&amp; definition)</text><ellipse cx="1123" cy="180.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="732" x="1132" y="184.5986">EntityBase(EntityBase&amp;&amp; other) noexcept: metaid_(std::move(othermetaid_)), definitions_(std::move(otherdefinitions_)), terms_(std::move(otherterms_))</text><ellipse cx="1123" cy="194.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="1132" y="198.4346">EntityBase(std::string metaid, Resource&amp;&amp; definition)</text><ellipse cx="1123" cy="207.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="1132" y="212.2705">getDefinitions() : Definitions&amp; {query}</text><ellipse cx="1123" cy="221.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="1132" y="226.1064">getDefinitions() : Definitions&amp;</text><ellipse cx="1123" cy="235.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="1132" y="239.9424">getDefinition(std::size_t k) : Resource&amp; {query}</text><ellipse cx="1123" cy="249.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="1132" y="253.7783">getURI(const URI&amp; base) : URI {query}</text><ellipse cx="1123" cy="263.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="1132" y="267.6143">isEmpty() : bool {query}</text><ellipse cx="1123" cy="277.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="1132" y="281.4502">matchesDefinition(const Resource&amp; definition) : bool</text><ellipse cx="1123" cy="290.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="1132" y="295.2861">getNumDefinitions() : std::size_t {query}</text><ellipse cx="1123" cy="304.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="1132" y="309.1221">humanize() : std::string {query}</text><polygon fill="#FFFF44" points="1123,313.5391,1127,317.5391,1123,321.5391,1119,317.5391" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="1132" y="322.958">humanizeDefintions() : std::string {query}</text><ellipse cx="1123" cy="332.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="1132" y="336.7939">toString(std::size_t indent) : std::string {query}</text><ellipse cx="1123" cy="346.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="1132" y="350.6299">addDefinition(const Resource&amp; definition) : void</text><ellipse cx="1123" cy="360.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="1132" y="364.4658">addExtraneousTerm(const Term&amp; term) : void</text><ellipse cx="1123" cy="373.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="1132" y="378.3018">addExtraneousTerm(Term&amp;&amp; term) : void</text><polygon fill="#FFFF44" points="1123,382.7188,1127,386.7188,1123,390.7188,1119,386.7188" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="635" x="1132" y="392.1377">serializeDefinition(const Resource&amp; def, const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}</text><polygon fill="#FFFF44" points="1123,396.5547,1127,400.5547,1123,404.5547,1119,400.5547" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="597" x="1132" y="405.9736">serializeTerm(const Term&amp; term, const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}</text><ellipse cx="1123" cy="415.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="514" x="1132" y="419.8096">serializeToRDF(const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}</text><ellipse cx="1123" cy="429.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="1132" y="433.6455">setMetaId(const std::string&amp; metaid) : void</text><!--MD5=[aacc367a5a45ff3d0dda25c047d23959]
class semsim.EntityDescriptor--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="227.8672" id="semsim.EntityDescriptor" style="stroke: #A80036; stroke-width: 1.5;" width="831" x="2490.5" y="555.5"/><ellipse cx="2858.75" cy="571.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2861.5156,567.375 Q2861.6719,567.1563 2861.8594,567.0469 Q2862.0469,566.9375 2862.2656,566.9375 Q2862.6406,566.9375 2862.875,567.1953 Q2863.1094,567.4531 2863.1094,568.0625 L2863.1094,569.5156 Q2863.1094,570.125 2862.875,570.3906 Q2862.6406,570.6563 2862.2656,570.6563 Q2861.9219,570.6563 2861.7188,570.4531 Q2861.5156,570.2656 2861.4063,569.75 Q2861.3594,569.3906 2861.1719,569.2031 Q2860.8438,568.8281 2860.2344,568.6094 Q2859.625,568.3906 2859,568.3906 Q2858.2344,568.3906 2857.6016,568.7188 Q2856.9688,569.0469 2856.4766,569.7969 Q2855.9844,570.5469 2855.9844,571.5781 L2855.9844,572.6719 Q2855.9844,573.9063 2856.875,574.7266 Q2857.7656,575.5469 2859.3594,575.5469 Q2860.2969,575.5469 2860.9531,575.2969 Q2861.3438,575.1406 2861.7656,574.7031 Q2862.0313,574.4375 2862.1797,574.3594 Q2862.3281,574.2813 2862.5313,574.2813 Q2862.8594,574.2813 2863.1172,574.5391 Q2863.375,574.7969 2863.375,575.1406 Q2863.375,575.4844 2863.0313,575.8906 Q2862.5313,576.4688 2861.7344,576.7969 Q2860.6563,577.25 2859.3594,577.25 Q2857.8438,577.25 2856.6406,576.625 Q2855.6563,576.125 2854.9688,575.0547 Q2854.2813,573.9844 2854.2813,572.7031 L2854.2813,571.5469 Q2854.2813,570.2188 2854.8984,569.0703 Q2855.5156,567.9219 2856.6094,567.3047 Q2857.7031,566.6875 2858.9375,566.6875 Q2859.6719,566.6875 2860.3203,566.8516 Q2860.9688,567.0156 2861.5156,567.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="86" x="2879.25" y="576.4102">EntityDescriptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2491.5" x2="3320.5" y1="587.5" y2="587.5"/><polygon fill="none" points="2501.5,593.5,2505.5,597.5,2501.5,601.5,2497.5,597.5" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="2510.5" y="602.9189">terms_ : DescriptorTerms</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2491.5" x2="3320.5" y1="609.3359" y2="609.3359"/><ellipse cx="2501.5" cy="620.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="2510.5" y="624.7549">EntityDescriptor()</text><ellipse cx="2501.5" cy="634.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="2510.5" y="638.5908">EntityDescriptor(const EntityDescriptor&amp; other)</text><ellipse cx="2501.5" cy="648.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="2510.5" y="652.4268">EntityDescriptor(EntityDescriptor&amp;&amp; other)</text><ellipse cx="2501.5" cy="661.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="2510.5" y="666.2627">EntityDescriptor(std::initializer_list&lt;T&gt; l)</text><ellipse cx="2501.5" cy="675.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="2510.5" y="680.0986">isEmpty() : bool {query}</text><ellipse cx="2501.5" cy="689.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="2510.5" y="693.9346">humanize() : std::string {query}</text><polygon fill="#FFFF44" points="2501.5,698.3516,2505.5,702.3516,2501.5,706.3516,2497.5,702.3516" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="2510.5" y="707.7705">humanizeTerms() : std::string {query}</text><ellipse cx="2501.5" cy="717.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="2510.5" y="721.6064">addTerm(const DescriptorTerm&amp; t) : void</text><ellipse cx="2501.5" cy="731.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="2510.5" y="735.4424">addTerm(DescriptorTerm&amp;&amp; t) : void</text><ellipse cx="2501.5" cy="744.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="329" x="2510.5" y="749.2783">addTerm(const Relation&amp; relation, const Resource&amp; resource) : void</text><polygon fill="#FFFF44" points="2501.5,753.6953,2505.5,757.6953,2501.5,761.6953,2497.5,757.6953" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="805" x="2510.5" y="763.1143">serializeDescriptorTermToRDF(const DescriptorTerm&amp; term, const URI&amp; linked_uri, const URI&amp; term_uri, raptor_world* world, raptor_serializer* serializer) : void {query}</text><ellipse cx="2501.5" cy="772.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="639" x="2510.5" y="776.9502">serializeToRDF(const URI&amp; sbml_base_uri, const std::string&amp; metaid, raptor_world* world, raptor_serializer* serializer) : void {query}</text><!--MD5=[56a12410ddf8cec595a9a7a90b01741d]
class semsim.Exception--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="117.1797" id="semsim.Exception" style="stroke: #A80036; stroke-width: 1.5;" width="184" x="893" y="191.5"/><ellipse cx="954.25" cy="207.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M957.0156,203.375 Q957.1719,203.1563 957.3594,203.0469 Q957.5469,202.9375 957.7656,202.9375 Q958.1406,202.9375 958.375,203.1953 Q958.6094,203.4531 958.6094,204.0625 L958.6094,205.5156 Q958.6094,206.125 958.375,206.3906 Q958.1406,206.6563 957.7656,206.6563 Q957.4219,206.6563 957.2188,206.4531 Q957.0156,206.2656 956.9063,205.75 Q956.8594,205.3906 956.6719,205.2031 Q956.3438,204.8281 955.7344,204.6094 Q955.125,204.3906 954.5,204.3906 Q953.7344,204.3906 953.1016,204.7188 Q952.4688,205.0469 951.9766,205.7969 Q951.4844,206.5469 951.4844,207.5781 L951.4844,208.6719 Q951.4844,209.9063 952.375,210.7266 Q953.2656,211.5469 954.8594,211.5469 Q955.7969,211.5469 956.4531,211.2969 Q956.8438,211.1406 957.2656,210.7031 Q957.5313,210.4375 957.6797,210.3594 Q957.8281,210.2813 958.0313,210.2813 Q958.3594,210.2813 958.6172,210.5391 Q958.875,210.7969 958.875,211.1406 Q958.875,211.4844 958.5313,211.8906 Q958.0313,212.4688 957.2344,212.7969 Q956.1563,213.25 954.8594,213.25 Q953.3438,213.25 952.1406,212.625 Q951.1563,212.125 950.4688,211.0547 Q949.7813,209.9844 949.7813,208.7031 L949.7813,207.5469 Q949.7813,206.2188 950.3984,205.0703 Q951.0156,203.9219 952.1094,203.3047 Q953.2031,202.6875 954.4375,202.6875 Q955.1719,202.6875 955.8203,202.8516 Q956.4688,203.0156 957.0156,203.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="53" x="974.75" y="212.4102">Exception</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="894" x2="1076" y1="223.5" y2="223.5"/><polygon fill="none" points="904,229.5,908,233.5,904,237.5,900,233.5" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="913" y="238.9189">msg_ : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="894" x2="1076" y1="245.3359" y2="245.3359"/><ellipse cx="904" cy="256.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="913" y="260.7549">Exception(const char* message)</text><ellipse cx="904" cy="270.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="913" y="274.5908">Exception(std::string message)</text><ellipse cx="904" cy="284.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="913" y="288.4268">~Exception()</text><ellipse cx="904" cy="297.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="913" y="302.2627">what() : char* {query}</text><!--MD5=[a1aaf60b6c0219e36a1df6a96ca8eb74]
class semsim.GO--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="61.8359" id="semsim.GO" style="stroke: #A80036; stroke-width: 1.5;" width="178" x="3357" y="638.5"/><ellipse cx="3432.75" cy="654.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3435.5156,650.375 Q3435.6719,650.1563 3435.8594,650.0469 Q3436.0469,649.9375 3436.2656,649.9375 Q3436.6406,649.9375 3436.875,650.1953 Q3437.1094,650.4531 3437.1094,651.0625 L3437.1094,652.5156 Q3437.1094,653.125 3436.875,653.3906 Q3436.6406,653.6563 3436.2656,653.6563 Q3435.9219,653.6563 3435.7188,653.4531 Q3435.5156,653.2656 3435.4063,652.75 Q3435.3594,652.3906 3435.1719,652.2031 Q3434.8438,651.8281 3434.2344,651.6094 Q3433.625,651.3906 3433,651.3906 Q3432.2344,651.3906 3431.6016,651.7188 Q3430.9688,652.0469 3430.4766,652.7969 Q3429.9844,653.5469 3429.9844,654.5781 L3429.9844,655.6719 Q3429.9844,656.9063 3430.875,657.7266 Q3431.7656,658.5469 3433.3594,658.5469 Q3434.2969,658.5469 3434.9531,658.2969 Q3435.3438,658.1406 3435.7656,657.7031 Q3436.0313,657.4375 3436.1797,657.3594 Q3436.3281,657.2813 3436.5313,657.2813 Q3436.8594,657.2813 3437.1172,657.5391 Q3437.375,657.7969 3437.375,658.1406 Q3437.375,658.4844 3437.0313,658.8906 Q3436.5313,659.4688 3435.7344,659.7969 Q3434.6563,660.25 3433.3594,660.25 Q3431.8438,660.25 3430.6406,659.625 Q3429.6563,659.125 3428.9688,658.0547 Q3428.2813,656.9844 3428.2813,655.7031 L3428.2813,654.5469 Q3428.2813,653.2188 3428.8984,652.0703 Q3429.5156,650.9219 3430.6094,650.3047 Q3431.7031,649.6875 3432.9375,649.6875 Q3433.6719,649.6875 3434.3203,649.8516 Q3434.9688,650.0156 3435.5156,650.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="18" x="3453.25" y="659.4102">GO</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3358" x2="3534" y1="670.5" y2="670.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3358" x2="3534" y1="678.5" y2="678.5"/><ellipse cx="3368" cy="689.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="152" x="3377" y="693.9189">get(OntologyTerm t) : Resource</text><!--MD5=[6346e31d09662a6763b59c5199d0ee18]
class semsim.Mediator--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="131.0156" id="semsim.Mediator" style="stroke: #A80036; stroke-width: 1.5;" width="536" x="3570" y="604"/><ellipse cx="3810.25" cy="620" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3813.0156,615.875 Q3813.1719,615.6563 3813.3594,615.5469 Q3813.5469,615.4375 3813.7656,615.4375 Q3814.1406,615.4375 3814.375,615.6953 Q3814.6094,615.9531 3814.6094,616.5625 L3814.6094,618.0156 Q3814.6094,618.625 3814.375,618.8906 Q3814.1406,619.1563 3813.7656,619.1563 Q3813.4219,619.1563 3813.2188,618.9531 Q3813.0156,618.7656 3812.9063,618.25 Q3812.8594,617.8906 3812.6719,617.7031 Q3812.3438,617.3281 3811.7344,617.1094 Q3811.125,616.8906 3810.5,616.8906 Q3809.7344,616.8906 3809.1016,617.2188 Q3808.4688,617.5469 3807.9766,618.2969 Q3807.4844,619.0469 3807.4844,620.0781 L3807.4844,621.1719 Q3807.4844,622.4063 3808.375,623.2266 Q3809.2656,624.0469 3810.8594,624.0469 Q3811.7969,624.0469 3812.4531,623.7969 Q3812.8438,623.6406 3813.2656,623.2031 Q3813.5313,622.9375 3813.6797,622.8594 Q3813.8281,622.7813 3814.0313,622.7813 Q3814.3594,622.7813 3814.6172,623.0391 Q3814.875,623.2969 3814.875,623.6406 Q3814.875,623.9844 3814.5313,624.3906 Q3814.0313,624.9688 3813.2344,625.2969 Q3812.1563,625.75 3810.8594,625.75 Q3809.3438,625.75 3808.1406,625.125 Q3807.1563,624.625 3806.4688,623.5547 Q3805.7813,622.4844 3805.7813,621.2031 L3805.7813,620.0469 Q3805.7813,618.7188 3806.3984,617.5703 Q3807.0156,616.4219 3808.1094,615.8047 Q3809.2031,615.1875 3810.4375,615.1875 Q3811.1719,615.1875 3811.8203,615.3516 Q3812.4688,615.5156 3813.0156,615.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="47" x="3830.75" y="624.9102">Mediator</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3571" x2="4105" y1="636" y2="636"/><polygon fill="none" points="3581,642,3585,646,3581,650,3577,646" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="3590" y="651.4189">component_ : Component*</text><polygon fill="none" points="3581,655.8359,3585,659.8359,3581,663.8359,3577,659.8359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="3590" y="665.2549">multiplier_ : double</text><polygon fill="none" points="3581,669.6719,3585,673.6719,3581,677.6719,3577,673.6719" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3590" y="679.0908">id_ : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3571" x2="4105" y1="685.5078" y2="685.5078"/><ellipse cx="3581" cy="696.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="347" x="3590" y="700.9268">Mediator(const std::string&amp; id, Component* component, double multiplier)</text><ellipse cx="3581" cy="710.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="510" x="3590" y="714.7627">serializeToRDF(const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : URI {query}</text><ellipse cx="3581" cy="724.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="3590" y="728.5986">containsMetaId(const std::string&amp; metaid) : bool {query}</text><!--MD5=[1be1574ca4bf504a271a4eccd224004b]
class semsim.MetaID--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="75.6719" id="semsim.MetaID" style="stroke: #A80036; stroke-width: 1.5;" width="370" x="4141" y="631.5"/><ellipse cx="4302.75" cy="647.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4305.5156,643.375 Q4305.6719,643.1563 4305.8594,643.0469 Q4306.0469,642.9375 4306.2656,642.9375 Q4306.6406,642.9375 4306.875,643.1953 Q4307.1094,643.4531 4307.1094,644.0625 L4307.1094,645.5156 Q4307.1094,646.125 4306.875,646.3906 Q4306.6406,646.6563 4306.2656,646.6563 Q4305.9219,646.6563 4305.7188,646.4531 Q4305.5156,646.2656 4305.4063,645.75 Q4305.3594,645.3906 4305.1719,645.2031 Q4304.8438,644.8281 4304.2344,644.6094 Q4303.625,644.3906 4303,644.3906 Q4302.2344,644.3906 4301.6016,644.7188 Q4300.9688,645.0469 4300.4766,645.7969 Q4299.9844,646.5469 4299.9844,647.5781 L4299.9844,648.6719 Q4299.9844,649.9063 4300.875,650.7266 Q4301.7656,651.5469 4303.3594,651.5469 Q4304.2969,651.5469 4304.9531,651.2969 Q4305.3438,651.1406 4305.7656,650.7031 Q4306.0313,650.4375 4306.1797,650.3594 Q4306.3281,650.2813 4306.5313,650.2813 Q4306.8594,650.2813 4307.1172,650.5391 Q4307.375,650.7969 4307.375,651.1406 Q4307.375,651.4844 4307.0313,651.8906 Q4306.5313,652.4688 4305.7344,652.7969 Q4304.6563,653.25 4303.3594,653.25 Q4301.8438,653.25 4300.6406,652.625 Q4299.6563,652.125 4298.9688,651.0547 Q4298.2813,649.9844 4298.2813,648.7031 L4298.2813,647.5469 Q4298.2813,646.2188 4298.8984,645.0703 Q4299.5156,643.9219 4300.6094,643.3047 Q4301.7031,642.6875 4302.9375,642.6875 Q4303.6719,642.6875 4304.3203,642.8516 Q4304.9688,643.0156 4305.5156,643.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="38" x="4323.25" y="652.4102">MetaID</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4142" x2="4510" y1="663.5" y2="663.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4142" x2="4510" y1="671.5" y2="671.5"/><ellipse cx="4152" cy="682.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="344" x="4161" y="686.9189">modelContainsMetaId(libsbml::Model* m, const std::string&amp; metaid) : bool</text><ellipse cx="4152" cy="696.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="187" x="4161" y="700.7549">assignMetaIds(libsbml::Model* m) : void</text><!--MD5=[43d39757e2101634a31fd9ccafa6abad]
class semsim.NullPointerException--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="61.8359" id="semsim.NullPointerException" style="stroke: #A80036; stroke-width: 1.5;" width="164" x="1023" y="638.5"/><ellipse cx="1046.1" cy="654.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1048.8656,650.375 Q1049.0219,650.1563 1049.2094,650.0469 Q1049.3969,649.9375 1049.6156,649.9375 Q1049.9906,649.9375 1050.225,650.1953 Q1050.4594,650.4531 1050.4594,651.0625 L1050.4594,652.5156 Q1050.4594,653.125 1050.225,653.3906 Q1049.9906,653.6563 1049.6156,653.6563 Q1049.2719,653.6563 1049.0688,653.4531 Q1048.8656,653.2656 1048.7563,652.75 Q1048.7094,652.3906 1048.5219,652.2031 Q1048.1938,651.8281 1047.5844,651.6094 Q1046.975,651.3906 1046.35,651.3906 Q1045.5844,651.3906 1044.9516,651.7188 Q1044.3188,652.0469 1043.8266,652.7969 Q1043.3344,653.5469 1043.3344,654.5781 L1043.3344,655.6719 Q1043.3344,656.9063 1044.225,657.7266 Q1045.1156,658.5469 1046.7094,658.5469 Q1047.6469,658.5469 1048.3031,658.2969 Q1048.6938,658.1406 1049.1156,657.7031 Q1049.3813,657.4375 1049.5297,657.3594 Q1049.6781,657.2813 1049.8813,657.2813 Q1050.2094,657.2813 1050.4672,657.5391 Q1050.725,657.7969 1050.725,658.1406 Q1050.725,658.4844 1050.3813,658.8906 Q1049.8813,659.4688 1049.0844,659.7969 Q1048.0063,660.25 1046.7094,660.25 Q1045.1938,660.25 1043.9906,659.625 Q1043.0063,659.125 1042.3188,658.0547 Q1041.6313,656.9844 1041.6313,655.7031 L1041.6313,654.5469 Q1041.6313,653.2188 1042.2484,652.0703 Q1042.8656,650.9219 1043.9594,650.3047 Q1045.0531,649.6875 1046.2875,649.6875 Q1047.0219,649.6875 1047.6703,649.8516 Q1048.3188,650.0156 1048.8656,650.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="114" x="1061.9" y="659.4102">NullPointerException</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1024" x2="1186" y1="670.5" y2="670.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1031" y="678.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="1043" y="685.9189">Exception : using Exception::</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1024" x2="1186" y1="692.3359" y2="692.3359"/><!--MD5=[0f6d858529fa471ceaab802240ab9bad]
class semsim.OPB--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="61.8359" id="semsim.OPB" style="stroke: #A80036; stroke-width: 1.5;" width="178" x="4546" y="638.5"/><ellipse cx="4618.25" cy="654.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4621.0156,650.375 Q4621.1719,650.1563 4621.3594,650.0469 Q4621.5469,649.9375 4621.7656,649.9375 Q4622.1406,649.9375 4622.375,650.1953 Q4622.6094,650.4531 4622.6094,651.0625 L4622.6094,652.5156 Q4622.6094,653.125 4622.375,653.3906 Q4622.1406,653.6563 4621.7656,653.6563 Q4621.4219,653.6563 4621.2188,653.4531 Q4621.0156,653.2656 4620.9063,652.75 Q4620.8594,652.3906 4620.6719,652.2031 Q4620.3438,651.8281 4619.7344,651.6094 Q4619.125,651.3906 4618.5,651.3906 Q4617.7344,651.3906 4617.1016,651.7188 Q4616.4688,652.0469 4615.9766,652.7969 Q4615.4844,653.5469 4615.4844,654.5781 L4615.4844,655.6719 Q4615.4844,656.9063 4616.375,657.7266 Q4617.2656,658.5469 4618.8594,658.5469 Q4619.7969,658.5469 4620.4531,658.2969 Q4620.8438,658.1406 4621.2656,657.7031 Q4621.5313,657.4375 4621.6797,657.3594 Q4621.8281,657.2813 4622.0313,657.2813 Q4622.3594,657.2813 4622.6172,657.5391 Q4622.875,657.7969 4622.875,658.1406 Q4622.875,658.4844 4622.5313,658.8906 Q4622.0313,659.4688 4621.2344,659.7969 Q4620.1563,660.25 4618.8594,660.25 Q4617.3438,660.25 4616.1406,659.625 Q4615.1563,659.125 4614.4688,658.0547 Q4613.7813,656.9844 4613.7813,655.7031 L4613.7813,654.5469 Q4613.7813,653.2188 4614.3984,652.0703 Q4615.0156,650.9219 4616.1094,650.3047 Q4617.2031,649.6875 4618.4375,649.6875 Q4619.1719,649.6875 4619.8203,649.8516 Q4620.4688,650.0156 4621.0156,650.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="25" x="4638.75" y="659.4102">OPB</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4547" x2="4723" y1="670.5" y2="670.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4547" x2="4723" y1="678.5" y2="678.5"/><ellipse cx="4557" cy="689.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="152" x="4566" y="693.9189">get(OntologyTerm t) : Resource</text><!--MD5=[9d9fea588bded78c9ff0fd3d46fe24d8]
class semsim.Process--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="283.2109" id="semsim.Process" style="stroke: #A80036; stroke-width: 1.5;" width="540" x="2445" y="913"/><ellipse cx="2687.75" cy="929" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2690.5156,924.875 Q2690.6719,924.6563 2690.8594,924.5469 Q2691.0469,924.4375 2691.2656,924.4375 Q2691.6406,924.4375 2691.875,924.6953 Q2692.1094,924.9531 2692.1094,925.5625 L2692.1094,927.0156 Q2692.1094,927.625 2691.875,927.8906 Q2691.6406,928.1563 2691.2656,928.1563 Q2690.9219,928.1563 2690.7188,927.9531 Q2690.5156,927.7656 2690.4063,927.25 Q2690.3594,926.8906 2690.1719,926.7031 Q2689.8438,926.3281 2689.2344,926.1094 Q2688.625,925.8906 2688,925.8906 Q2687.2344,925.8906 2686.6016,926.2188 Q2685.9688,926.5469 2685.4766,927.2969 Q2684.9844,928.0469 2684.9844,929.0781 L2684.9844,930.1719 Q2684.9844,931.4063 2685.875,932.2266 Q2686.7656,933.0469 2688.3594,933.0469 Q2689.2969,933.0469 2689.9531,932.7969 Q2690.3438,932.6406 2690.7656,932.2031 Q2691.0313,931.9375 2691.1797,931.8594 Q2691.3281,931.7813 2691.5313,931.7813 Q2691.8594,931.7813 2692.1172,932.0391 Q2692.375,932.2969 2692.375,932.6406 Q2692.375,932.9844 2692.0313,933.3906 Q2691.5313,933.9688 2690.7344,934.2969 Q2689.6563,934.75 2688.3594,934.75 Q2686.8438,934.75 2685.6406,934.125 Q2684.6563,933.625 2683.9688,932.5547 Q2683.2813,931.4844 2683.2813,930.2031 L2683.2813,929.0469 Q2683.2813,927.7188 2683.8984,926.5703 Q2684.5156,925.4219 2685.6094,924.8047 Q2686.7031,924.1875 2687.9375,924.1875 Q2688.6719,924.1875 2689.3203,924.3516 Q2689.9688,924.5156 2690.5156,924.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="46" x="2708.25" y="933.9102">Process</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2446" x2="2984" y1="945" y2="945"/><polygon fill="none" points="2456,951,2460,955,2456,959,2452,955" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="2465" y="960.4189">mediators_ : Mediators</text><polygon fill="none" points="2456,964.8359,2460,968.8359,2456,972.8359,2452,968.8359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="2465" y="974.2549">sinks_ : Sinks</text><polygon fill="none" points="2456,978.6719,2460,982.6719,2456,986.6719,2452,982.6719" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="2465" y="988.0908">sources_ : Sources</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2446" x2="2984" y1="994.5078" y2="994.5078"/><ellipse cx="2456" cy="1005.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="48" x="2465" y="1009.9268">Process()</text><ellipse cx="2456" cy="1019.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="2465" y="1023.7627">Process(const SingularAnnotation&amp; annotation)</text><ellipse cx="2456" cy="1033.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="2465" y="1037.5986">Process(SingularAnnotation&amp;&amp; annotation)</text><ellipse cx="2456" cy="1047.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="2465" y="1051.4346">Process(const CompositeAnnotation&amp; annotation)</text><ellipse cx="2456" cy="1060.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="217" x="2465" y="1065.2705">Process(CompositeAnnotation&amp;&amp; annotation)</text><ellipse cx="2456" cy="1074.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="2465" y="1079.1064">Process(const Process&amp; other)</text><ellipse cx="2456" cy="1088.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="2465" y="1092.9424">Process(Process&amp;&amp; other)</text><ellipse cx="2456" cy="1102.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="2465" y="1106.7783">clone() : Component* {query}</text><ellipse cx="2456" cy="1116.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="2465" y="1120.6143">containsMetaId(const std::string&amp; metaid) : bool {query}</text><ellipse cx="2456" cy="1130.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="2465" y="1134.4502">isProcess() : bool {query}</text><ellipse cx="2456" cy="1143.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="2465" y="1148.2861">addMediator(const Mediator&amp; mediator) : void</text><ellipse cx="2456" cy="1157.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="2465" y="1162.1221">addSink(const Sink&amp; sink) : void</text><ellipse cx="2456" cy="1171.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="2465" y="1175.958">addSource(const Source&amp; source) : void</text><ellipse cx="2456" cy="1185.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="514" x="2465" y="1189.7939">serializeToRDF(const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}</text><!--MD5=[243520c22403cdc2cf2e613e04b7acbd]
class semsim.Query--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="75.6719" id="semsim.Query" style="stroke: #A80036; stroke-width: 1.5;" width="275" x="3020.5" y="1016.5"/><ellipse cx="3137.25" cy="1032.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3139.4375,1034.2656 L3135.2969,1034.2656 L3134.875,1035.2969 L3135.2969,1035.2969 Q3135.9063,1035.2969 3136.1719,1035.5313 Q3136.4375,1035.7656 3136.4375,1036.1563 Q3136.4375,1036.5313 3136.1719,1036.7656 Q3135.9063,1037 3135.2969,1037 L3133,1037 Q3132.3906,1037 3132.1328,1036.7656 Q3131.875,1036.5313 3131.875,1036.1406 Q3131.875,1035.7656 3132.1484,1035.5234 Q3132.4219,1035.2813 3133.0469,1035.2969 L3135.7188,1028.6406 L3134.6094,1028.6406 Q3134,1028.6406 3133.7344,1028.4063 Q3133.4688,1028.1719 3133.4688,1027.7813 Q3133.4688,1027.4063 3133.7344,1027.1719 Q3134,1026.9375 3134.6094,1026.9375 L3138.2813,1026.9375 L3141.6719,1035.2969 Q3142.2656,1035.2969 3142.4531,1035.4375 Q3142.8438,1035.7031 3142.8438,1036.1563 Q3142.8438,1036.5313 3142.5859,1036.7656 Q3142.3281,1037 3141.7188,1037 L3139.4219,1037 Q3138.8125,1037 3138.5469,1036.7656 Q3138.2813,1036.5313 3138.2813,1036.1406 Q3138.2813,1035.7656 3138.5469,1035.5313 Q3138.8125,1035.2969 3139.4219,1035.2969 L3139.8438,1035.2969 L3139.4375,1034.2656 Z M3138.7188,1032.5625 L3137.3594,1029.1875 L3135.9844,1032.5625 L3138.7188,1032.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="33" x="3157.75" y="1037.4102">Query</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3021.5" x2="3294.5" y1="1048.5" y2="1048.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3021.5" x2="3294.5" y1="1056.5" y2="1056.5"/><ellipse cx="3031.5" cy="1067.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="44" x="3040.5" y="1071.9189">~Query()</text><ellipse cx="3031.5" cy="1081.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="249" x="3040.5" y="1085.7549">run(SemsimModel&amp; model) : QueryResults {query}</text><!--MD5=[79525d6c3d17adc9b16e2e6c5960c4f5]
class semsim.QueryResults--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="89.5078" id="semsim.QueryResults" style="stroke: #A80036; stroke-width: 1.5;" width="138" x="3331" y="1009.5"/><ellipse cx="3359.95" cy="1025.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3362.7156,1021.375 Q3362.8719,1021.1563 3363.0594,1021.0469 Q3363.2469,1020.9375 3363.4656,1020.9375 Q3363.8406,1020.9375 3364.075,1021.1953 Q3364.3094,1021.4531 3364.3094,1022.0625 L3364.3094,1023.5156 Q3364.3094,1024.125 3364.075,1024.3906 Q3363.8406,1024.6563 3363.4656,1024.6563 Q3363.1219,1024.6563 3362.9188,1024.4531 Q3362.7156,1024.2656 3362.6063,1023.75 Q3362.5594,1023.3906 3362.3719,1023.2031 Q3362.0438,1022.8281 3361.4344,1022.6094 Q3360.825,1022.3906 3360.2,1022.3906 Q3359.4344,1022.3906 3358.8016,1022.7188 Q3358.1688,1023.0469 3357.6766,1023.7969 Q3357.1844,1024.5469 3357.1844,1025.5781 L3357.1844,1026.6719 Q3357.1844,1027.9063 3358.075,1028.7266 Q3358.9656,1029.5469 3360.5594,1029.5469 Q3361.4969,1029.5469 3362.1531,1029.2969 Q3362.5438,1029.1406 3362.9656,1028.7031 Q3363.2313,1028.4375 3363.3797,1028.3594 Q3363.5281,1028.2813 3363.7313,1028.2813 Q3364.0594,1028.2813 3364.3172,1028.5391 Q3364.575,1028.7969 3364.575,1029.1406 Q3364.575,1029.4844 3364.2313,1029.8906 Q3363.7313,1030.4688 3362.9344,1030.7969 Q3361.8563,1031.25 3360.5594,1031.25 Q3359.0438,1031.25 3357.8406,1030.625 Q3356.8563,1030.125 3356.1688,1029.0547 Q3355.4813,1027.9844 3355.4813,1026.7031 L3355.4813,1025.5469 Q3355.4813,1024.2188 3356.0984,1023.0703 Q3356.7156,1021.9219 3357.8094,1021.3047 Q3358.9031,1020.6875 3360.1375,1020.6875 Q3360.8719,1020.6875 3361.5203,1020.8516 Q3362.1688,1021.0156 3362.7156,1021.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="75" x="3377.05" y="1030.4102">QueryResults</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3332" x2="3468" y1="1041.5" y2="1041.5"/><polygon fill="none" points="3342,1047.5,3346,1051.5,3342,1055.5,3338,1051.5" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="3351" y="1056.9189">refs_ : ComponentRefs</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3332" x2="3468" y1="1063.3359" y2="1063.3359"/><ellipse cx="3342" cy="1074.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="3351" y="1078.7549">begin() : iterator</text><ellipse cx="3342" cy="1088.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="3351" y="1092.5908">end() : iterator</text><!--MD5=[74b10a4cd0183cf2b0ad1b4b1d669f6c]
class semsim.RDFReader--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="227.8672" id="semsim.RDFReader" style="stroke: #A80036; stroke-width: 1.5;" width="637" x="3504.5" y="940.5"/><ellipse cx="3785.75" cy="956.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3788.5156,952.375 Q3788.6719,952.1563 3788.8594,952.0469 Q3789.0469,951.9375 3789.2656,951.9375 Q3789.6406,951.9375 3789.875,952.1953 Q3790.1094,952.4531 3790.1094,953.0625 L3790.1094,954.5156 Q3790.1094,955.125 3789.875,955.3906 Q3789.6406,955.6563 3789.2656,955.6563 Q3788.9219,955.6563 3788.7188,955.4531 Q3788.5156,955.2656 3788.4063,954.75 Q3788.3594,954.3906 3788.1719,954.2031 Q3787.8438,953.8281 3787.2344,953.6094 Q3786.625,953.3906 3786,953.3906 Q3785.2344,953.3906 3784.6016,953.7188 Q3783.9688,954.0469 3783.4766,954.7969 Q3782.9844,955.5469 3782.9844,956.5781 L3782.9844,957.6719 Q3782.9844,958.9063 3783.875,959.7266 Q3784.7656,960.5469 3786.3594,960.5469 Q3787.2969,960.5469 3787.9531,960.2969 Q3788.3438,960.1406 3788.7656,959.7031 Q3789.0313,959.4375 3789.1797,959.3594 Q3789.3281,959.2813 3789.5313,959.2813 Q3789.8594,959.2813 3790.1172,959.5391 Q3790.375,959.7969 3790.375,960.1406 Q3790.375,960.4844 3790.0313,960.8906 Q3789.5313,961.4688 3788.7344,961.7969 Q3787.6563,962.25 3786.3594,962.25 Q3784.8438,962.25 3783.6406,961.625 Q3782.6563,961.125 3781.9688,960.0547 Q3781.2813,958.9844 3781.2813,957.7031 L3781.2813,956.5469 Q3781.2813,955.2188 3781.8984,954.0703 Q3782.5156,952.9219 3783.6094,952.3047 Q3784.7031,951.6875 3785.9375,951.6875 Q3786.6719,951.6875 3787.3203,951.8516 Q3787.9688,952.0156 3788.5156,952.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="66" x="3806.25" y="961.4102">RDFReader</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3505.5" x2="4140.5" y1="972.5" y2="972.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3505.5" x2="4140.5" y1="980.5" y2="980.5"/><ellipse cx="3515.5" cy="991.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="183" x="3524.5" y="995.9189">RaptorTermToURI(raptor_term* t) : URI</text><ellipse cx="3515.5" cy="1005.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="176" x="3524.5" y="1009.7549">isMetaId(const std::string&amp; uri) : bool</text><ellipse cx="3515.5" cy="1019.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="142" x="3524.5" y="1023.5908">isMetaId(raptor_term* t) : bool</text><ellipse cx="3515.5" cy="1033.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="222" x="3524.5" y="1037.4268">RaptorTermToRepr(raptor_term* t) : std::string</text><ellipse cx="3515.5" cy="1046.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="213" x="3524.5" y="1051.2627">RaptorURIToString(raptor_uri* u) : std::string</text><ellipse cx="3515.5" cy="1060.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="230" x="3524.5" y="1065.0986">extractMetaId(const std::string&amp; uri) : std::string</text><ellipse cx="3515.5" cy="1074.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="196" x="3524.5" y="1078.9346">extractMetaId(raptor_term* t) : std::string</text><ellipse cx="3515.5" cy="1088.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="536" x="3524.5" y="1092.7705">addTermToAnnotation(AnnotationBase&amp; annotation, const Relation&amp; relation, const Resource&amp; resource) : void</text><ellipse cx="3515.5" cy="1102.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="611" x="3524.5" y="1106.6064">addTermToCompositeAnnotation(CompositeAnnotation&amp; annotation, const Relation&amp; relation, const Resource&amp; resource) : void</text><ellipse cx="3515.5" cy="1116.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="460" x="3524.5" y="1120.4424">addTermToEntity(EntityBase&amp; entity, const Relation&amp; relation, const Resource&amp; resource) : void</text><ellipse cx="3515.5" cy="1129.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="589" x="3524.5" y="1134.2783">addTermToSingularAnnotation(SingularAnnotation&amp; annotation, const Relation&amp; relation, const Resource&amp; resource) : void</text><ellipse cx="3515.5" cy="1143.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="537" x="3524.5" y="1148.1143">applyRDFAnnotationsToModel(SemsimModel&amp; model, const std::string&amp; rdf, const std::string&amp; rdf_format) : void</text><ellipse cx="3515.5" cy="1157.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="300" x="3524.5" y="1161.9502">process_triple(void* user_data, raptor_statement* triple) : void</text><!--MD5=[3d1c86afe3aed374ceda70e31336addb]
class semsim.SBMLImporter--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="366.2266" id="semsim.SBMLImporter" style="stroke: #A80036; stroke-width: 1.5;" width="431" x="297.5" y="67"/><ellipse cx="469.75" cy="83" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M472.5156,78.875 Q472.6719,78.6563 472.8594,78.5469 Q473.0469,78.4375 473.2656,78.4375 Q473.6406,78.4375 473.875,78.6953 Q474.1094,78.9531 474.1094,79.5625 L474.1094,81.0156 Q474.1094,81.625 473.875,81.8906 Q473.6406,82.1563 473.2656,82.1563 Q472.9219,82.1563 472.7188,81.9531 Q472.5156,81.7656 472.4063,81.25 Q472.3594,80.8906 472.1719,80.7031 Q471.8438,80.3281 471.2344,80.1094 Q470.625,79.8906 470,79.8906 Q469.2344,79.8906 468.6016,80.2188 Q467.9688,80.5469 467.4766,81.2969 Q466.9844,82.0469 466.9844,83.0781 L466.9844,84.1719 Q466.9844,85.4063 467.875,86.2266 Q468.7656,87.0469 470.3594,87.0469 Q471.2969,87.0469 471.9531,86.7969 Q472.3438,86.6406 472.7656,86.2031 Q473.0313,85.9375 473.1797,85.8594 Q473.3281,85.7813 473.5313,85.7813 Q473.8594,85.7813 474.1172,86.0391 Q474.375,86.2969 474.375,86.6406 Q474.375,86.9844 474.0313,87.3906 Q473.5313,87.9688 472.7344,88.2969 Q471.6563,88.75 470.3594,88.75 Q468.8438,88.75 467.6406,88.125 Q466.6563,87.625 465.9688,86.5547 Q465.2813,85.4844 465.2813,84.2031 L465.2813,83.0469 Q465.2813,81.7188 465.8984,80.5703 Q466.5156,79.4219 467.6094,78.8047 Q468.7031,78.1875 469.9375,78.1875 Q470.6719,78.1875 471.3203,78.3516 Q471.9688,78.5156 472.5156,78.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="78" x="490.25" y="87.9102">SBMLImporter</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="298.5" x2="727.5" y1="99" y2="99"/><polygon fill="none" points="308.5,105,312.5,109,308.5,113,304.5,109" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="317.5" y="114.4189">importedSBMLModel : SemSimSBMLModel</text><polygon fill="none" points="308.5,118.8359,312.5,122.8359,308.5,126.8359,304.5,122.8359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="317.5" y="128.2549">sbmlModel : libsbml::Model*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="298.5" x2="727.5" y1="134.6719" y2="134.6719"/><ellipse cx="308.5" cy="145.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="317.5" y="150.0908">SBMLImporter(libsbml::SBMLDocument* d)</text><ellipse cx="308.5" cy="159.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="317.5" y="163.9268">SBMLImporter(const std::string&amp; sbml)</text><polygon fill="#FFFF44" points="308.5,168.3438,312.5,172.3438,308.5,176.3438,304.5,172.3438" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="317.5" y="177.7627">extractAnnotation(libsbml::SBase* s) : AnnotationPtr</text><polygon fill="#FFFF44" points="308.5,182.1797,312.5,186.1797,308.5,190.1797,304.5,186.1797" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="317.5" y="191.5986">extractAnnotation(libsbml::Species* s) : AnnotationPtr</text><polygon fill="#FFFF44" points="308.5,196.0156,312.5,200.0156,308.5,204.0156,304.5,200.0156" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="317.5" y="205.4346">extractAnnotation(libsbml::Compartment* c) : AnnotationPtr</text><polygon fill="#FFFF44" points="308.5,209.8516,312.5,213.8516,308.5,217.8516,304.5,213.8516" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="259" x="317.5" y="219.2705">extractAnnotation(libsbml::Reaction* r) : AnnotationPtr</text><polygon fill="#FFFF44" points="308.5,223.6875,312.5,227.6875,308.5,231.6875,304.5,227.6875" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="268" x="317.5" y="233.1064">extractAnnotation(libsbml::Parameter* p) : AnnotationPtr</text><polygon fill="#FFFF44" points="308.5,237.5234,312.5,241.5234,308.5,245.5234,304.5,241.5234" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="243" x="317.5" y="246.9424">getComponentFor(libsbml::SBase* s) : Component*</text><polygon fill="#FFFF44" points="308.5,251.3594,312.5,255.3594,308.5,259.3594,304.5,255.3594" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="345" x="317.5" y="260.7783">extractCompositeAnnotation(libsbml::Species* s) : CompositeAnnotation</text><polygon fill="#FFFF44" points="308.5,265.1953,312.5,269.1953,308.5,273.1953,304.5,269.1953" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="317.5" y="274.6143">extractSpeciesEntity(libsbml::Species* s) : Entity</text><polygon fill="#FFFF44" points="308.5,279.0313,312.5,283.0313,308.5,287.0313,304.5,283.0313" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="317.5" y="288.4502">extractSpeciesEntityDescriptor(libsbml::Species* s) : EntityDescriptor</text><ellipse cx="308.5" cy="297.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="326" x="317.5" y="302.2861">getRelationFromSBMLQual(libsbml::BiolQualifierType_t q) : Relation&amp;</text><polygon fill="#FFFF44" points="308.5,306.7031,312.5,310.7031,308.5,314.7031,304.5,310.7031" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="317.5" y="316.1221">getResourceFor(libsbml::SBase* s) : Resource</text><ellipse cx="308.5" cy="325.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="317.5" y="329.958">getSemSimSBMLModel() : SemSimSBMLModel&amp;</text><ellipse cx="308.5" cy="339.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="317.5" y="343.7939">getSemSimSBMLModel() : SemSimSBMLModel&amp; {query}</text><polygon fill="#FFFF44" points="308.5,348.2109,312.5,352.2109,308.5,356.2109,304.5,352.2109" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="316" x="317.5" y="357.6299">extractSingularAnnotation(libsbml::SBase* s) : SingularAnnotation</text><polygon fill="#FFFF44" points="308.5,362.0469,312.5,366.0469,308.5,370.0469,304.5,366.0469" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="333" x="317.5" y="371.4658">extractSingularAnnotation(libsbml::Parameter* p) : SingularAnnotation</text><polygon fill="#FFFF44" points="308.5,375.8828,312.5,379.8828,308.5,383.8828,304.5,379.8828" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="405" x="317.5" y="385.3018">makeUniqueMetaId(const SemsimModel&amp; model, const std::string&amp; base) : std::string</text><polygon fill="#FFFF44" points="308.5,389.7188,312.5,393.7188,308.5,397.7188,304.5,393.7188" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="317.5" y="399.1377">assignParticipants(Process&amp; process, libsbml::Reaction* r) : void</text><polygon fill="#FFFF44" points="308.5,403.5547,312.5,407.5547,308.5,411.5547,304.5,407.5547" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="334" x="317.5" y="412.9736">populateDefinitionsAndTerms(libsbml::SBase* s, EntityBase&amp; e) : void</text><polygon fill="#FFFF44" points="308.5,417.3906,312.5,421.3906,308.5,425.3906,304.5,421.3906" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="280" x="317.5" y="426.8096">populateSBOTerm(libsbml::SBase* s, EntityBase&amp; e) : void</text><!--MD5=[42bc9cec7e5f111575f8f940088a5166]
class semsim.SemSimSBMLModel--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="324.7188" id="semsim.SemSimSBMLModel" style="stroke: #A80036; stroke-width: 1.5;" width="950" x="38" y="507"/><ellipse cx="476.25" cy="523" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M479.0156,518.875 Q479.1719,518.6563 479.3594,518.5469 Q479.5469,518.4375 479.7656,518.4375 Q480.1406,518.4375 480.375,518.6953 Q480.6094,518.9531 480.6094,519.5625 L480.6094,521.0156 Q480.6094,521.625 480.375,521.8906 Q480.1406,522.1563 479.7656,522.1563 Q479.4219,522.1563 479.2188,521.9531 Q479.0156,521.7656 478.9063,521.25 Q478.8594,520.8906 478.6719,520.7031 Q478.3438,520.3281 477.7344,520.1094 Q477.125,519.8906 476.5,519.8906 Q475.7344,519.8906 475.1016,520.2188 Q474.4688,520.5469 473.9766,521.2969 Q473.4844,522.0469 473.4844,523.0781 L473.4844,524.1719 Q473.4844,525.4063 474.375,526.2266 Q475.2656,527.0469 476.8594,527.0469 Q477.7969,527.0469 478.4531,526.7969 Q478.8438,526.6406 479.2656,526.2031 Q479.5313,525.9375 479.6797,525.8594 Q479.8281,525.7813 480.0313,525.7813 Q480.3594,525.7813 480.6172,526.0391 Q480.875,526.2969 480.875,526.6406 Q480.875,526.9844 480.5313,527.3906 Q480.0313,527.9688 479.2344,528.2969 Q478.1563,528.75 476.8594,528.75 Q475.3438,528.75 474.1406,528.125 Q473.1563,527.625 472.4688,526.5547 Q471.7813,525.4844 471.7813,524.2031 L471.7813,523.0469 Q471.7813,521.7188 472.3984,520.5703 Q473.0156,519.4219 474.1094,518.8047 Q475.2031,518.1875 476.4375,518.1875 Q477.1719,518.1875 477.8203,518.3516 Q478.4688,518.5156 479.0156,518.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="65" x="496.75" y="527.9102">SemSimSBMLModel</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="39" x2="987" y1="539" y2="539"/><polygon fill="none" points="49,545,53,549,49,553,45,549" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="474" x="58" y="554.4189">element_map_ : SEMSIM_TR1_NAMESPACE_QUAL unordered_map&lt;libsbml::SBase*, Component*&gt;</text><polygon fill="none" points="49,558.8359,53,562.8359,49,566.8359,45,562.8359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="462" x="58" y="568.2549">element_id_map_ : SEMSIM_TR1_NAMESPACE_QUAL unordered_map&lt;std::string, Component*&gt;</text><polygon fill="none" points="49,572.6719,53,576.6719,49,580.6719,45,576.6719" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="58" y="582.0908">d_ : libsbml::SBMLDocument*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="39" x2="987" y1="588.5078" y2="588.5078"/><ellipse cx="49" cy="599.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="58" y="603.9268">SemSimSBMLModel(libsbml::SBMLDocument* d)</text><ellipse cx="49" cy="613.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="924" x="58" y="617.7627">SemSimSBMLModel(SemSimSBMLModel&amp;&amp; other) noexcept: SemsimModel(std::move(other)), element_map_(std::move(otherelement_map_)), element_id_map_(std::move(otherelement_id_map_)), d_(otherd_)</text><ellipse cx="49" cy="627.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="58" y="631.5986">getComponent(libsbml::SBase* s) : Component* {query}</text><ellipse cx="49" cy="641.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="58" y="645.4346">getComponent(libsbml::SBase* s) : Component*</text><ellipse cx="49" cy="654.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="58" y="659.2705">getComponentForId(const std::string&amp; id) : Component* {query}</text><ellipse cx="49" cy="668.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="58" y="673.1064">getComponentForId(const std::string&amp; id) : Component*</text><ellipse cx="49" cy="682.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="58" y="686.9424">getProcess(libsbml::SBase* s) : Process*</text><ellipse cx="49" cy="696.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="237" x="58" y="700.7783">hasComponent(const std::string id) : bool {query}</text><ellipse cx="49" cy="710.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="58" y="714.6143">hasComponent(libsbml::SBase* s) : bool {query}</text><ellipse cx="49" cy="724.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="217" x="58" y="728.4502">hasProcess(libsbml::SBase* s) : bool {query}</text><ellipse cx="49" cy="737.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="58" y="742.2861">encodeXML() : std::string {query}</text><ellipse cx="49" cy="751.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="58" y="756.1221">getFormat() : std::string {query}</text><ellipse cx="49" cy="765.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="390" x="58" y="769.958">getRDF(const URI&amp; sbml_base_uri, const std::string&amp; format) : std::string {query}</text><ellipse cx="49" cy="779.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="422" x="58" y="783.7939">getRDF(const std::string&amp; sbml_base_uri, const std::string&amp; format) : std::string {query}</text><ellipse cx="49" cy="793.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="414" x="58" y="797.6299">setComponentAnnotation(libsbml::SBase* s, const AnnotationBase&amp; annotation) : void</text><ellipse cx="49" cy="807.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="402" x="58" y="811.4658">setComponentAnnotation(libsbml::SBase* s, const AnnotationPtr&amp; annotation) : void</text><ellipse cx="49" cy="820.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="379" x="58" y="825.3018">setComponentAnnotation(libsbml::SBase* s, AnnotationPtr&amp;&amp; annotation) : void</text><!--MD5=[53d35fb68fb5266a189f2ae72029306e]
class semsim.SBMLSpecies--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="89.5078" id="semsim.SBMLSpecies" style="stroke: #A80036; stroke-width: 1.5;" width="438" x="4177" y="1009.5"/><ellipse cx="4353.25" cy="1025.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4356.0156,1021.375 Q4356.1719,1021.1563 4356.3594,1021.0469 Q4356.5469,1020.9375 4356.7656,1020.9375 Q4357.1406,1020.9375 4357.375,1021.1953 Q4357.6094,1021.4531 4357.6094,1022.0625 L4357.6094,1023.5156 Q4357.6094,1024.125 4357.375,1024.3906 Q4357.1406,1024.6563 4356.7656,1024.6563 Q4356.4219,1024.6563 4356.2188,1024.4531 Q4356.0156,1024.2656 4355.9063,1023.75 Q4355.8594,1023.3906 4355.6719,1023.2031 Q4355.3438,1022.8281 4354.7344,1022.6094 Q4354.125,1022.3906 4353.5,1022.3906 Q4352.7344,1022.3906 4352.1016,1022.7188 Q4351.4688,1023.0469 4350.9766,1023.7969 Q4350.4844,1024.5469 4350.4844,1025.5781 L4350.4844,1026.6719 Q4350.4844,1027.9063 4351.375,1028.7266 Q4352.2656,1029.5469 4353.8594,1029.5469 Q4354.7969,1029.5469 4355.4531,1029.2969 Q4355.8438,1029.1406 4356.2656,1028.7031 Q4356.5313,1028.4375 4356.6797,1028.3594 Q4356.8281,1028.2813 4357.0313,1028.2813 Q4357.3594,1028.2813 4357.6172,1028.5391 Q4357.875,1028.7969 4357.875,1029.1406 Q4357.875,1029.4844 4357.5313,1029.8906 Q4357.0313,1030.4688 4356.2344,1030.7969 Q4355.1563,1031.25 4353.8594,1031.25 Q4352.3438,1031.25 4351.1406,1030.625 Q4350.1563,1030.125 4349.4688,1029.0547 Q4348.7813,1027.9844 4348.7813,1026.7031 L4348.7813,1025.5469 Q4348.7813,1024.2188 4349.3984,1023.0703 Q4350.0156,1021.9219 4351.1094,1021.3047 Q4352.2031,1020.6875 4353.4375,1020.6875 Q4354.1719,1020.6875 4354.8203,1020.8516 Q4355.4688,1021.0156 4356.0156,1021.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="77" x="4373.75" y="1030.4102">SBMLSpecies</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4178" x2="4614" y1="1041.5" y2="1041.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4178" x2="4614" y1="1049.5" y2="1049.5"/><ellipse cx="4188" cy="1060.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="412" x="4197" y="1064.9189">GetSpeciesPhysicalProperty(libsbml::Species* s, libsbml::Model* m) : PhysicalProperty</text><ellipse cx="4188" cy="1074.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="333" x="4197" y="1078.7549">SubstanceUnitsAreConc(libsbml::Species* s, libsbml::Model* m) : bool</text><ellipse cx="4188" cy="1088.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="224" x="4197" y="1092.5908">UnitDefIsConc(libsbml::UnitDefinition* ud) : bool</text><!--MD5=[caae2fb10532ec97f763113ae8e9dc4b]
class semsim.SBO--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="61.8359" id="semsim.SBO" style="stroke: #A80036; stroke-width: 1.5;" width="178" x="2518" y="2169.5"/><ellipse cx="2590.25" cy="2185.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2593.0156,2181.375 Q2593.1719,2181.1563 2593.3594,2181.0469 Q2593.5469,2180.9375 2593.7656,2180.9375 Q2594.1406,2180.9375 2594.375,2181.1953 Q2594.6094,2181.4531 2594.6094,2182.0625 L2594.6094,2183.5156 Q2594.6094,2184.125 2594.375,2184.3906 Q2594.1406,2184.6563 2593.7656,2184.6563 Q2593.4219,2184.6563 2593.2188,2184.4531 Q2593.0156,2184.2656 2592.9063,2183.75 Q2592.8594,2183.3906 2592.6719,2183.2031 Q2592.3438,2182.8281 2591.7344,2182.6094 Q2591.125,2182.3906 2590.5,2182.3906 Q2589.7344,2182.3906 2589.1016,2182.7188 Q2588.4688,2183.0469 2587.9766,2183.7969 Q2587.4844,2184.5469 2587.4844,2185.5781 L2587.4844,2186.6719 Q2587.4844,2187.9063 2588.375,2188.7266 Q2589.2656,2189.5469 2590.8594,2189.5469 Q2591.7969,2189.5469 2592.4531,2189.2969 Q2592.8438,2189.1406 2593.2656,2188.7031 Q2593.5313,2188.4375 2593.6797,2188.3594 Q2593.8281,2188.2813 2594.0313,2188.2813 Q2594.3594,2188.2813 2594.6172,2188.5391 Q2594.875,2188.7969 2594.875,2189.1406 Q2594.875,2189.4844 2594.5313,2189.8906 Q2594.0313,2190.4688 2593.2344,2190.7969 Q2592.1563,2191.25 2590.8594,2191.25 Q2589.3438,2191.25 2588.1406,2190.625 Q2587.1563,2190.125 2586.4688,2189.0547 Q2585.7813,2187.9844 2585.7813,2186.7031 L2585.7813,2185.5469 Q2585.7813,2184.2188 2586.3984,2183.0703 Q2587.0156,2181.9219 2588.1094,2181.3047 Q2589.2031,2180.6875 2590.4375,2180.6875 Q2591.1719,2180.6875 2591.8203,2180.8516 Q2592.4688,2181.0156 2593.0156,2181.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="25" x="2610.75" y="2190.4102">SBO</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2519" x2="2695" y1="2201.5" y2="2201.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2519" x2="2695" y1="2209.5" y2="2209.5"/><ellipse cx="2529" cy="2220.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="152" x="2538" y="2224.9189">get(OntologyTerm t) : Resource</text><!--MD5=[12cd5320dc799fa3386a590fd8bc489b]
class semsim.SEMSIM_PUBLIC--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="1860.5078" id="semsim.SEMSIM_PUBLIC" style="stroke: #A80036; stroke-width: 1.5;" width="540" x="2731" y="1270"/><ellipse cx="2948.75" cy="1286" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2951.5156,1281.875 Q2951.6719,1281.6563 2951.8594,1281.5469 Q2952.0469,1281.4375 2952.2656,1281.4375 Q2952.6406,1281.4375 2952.875,1281.6953 Q2953.1094,1281.9531 2953.1094,1282.5625 L2953.1094,1284.0156 Q2953.1094,1284.625 2952.875,1284.8906 Q2952.6406,1285.1563 2952.2656,1285.1563 Q2951.9219,1285.1563 2951.7188,1284.9531 Q2951.5156,1284.7656 2951.4063,1284.25 Q2951.3594,1283.8906 2951.1719,1283.7031 Q2950.8438,1283.3281 2950.2344,1283.1094 Q2949.625,1282.8906 2949,1282.8906 Q2948.2344,1282.8906 2947.6016,1283.2188 Q2946.9688,1283.5469 2946.4766,1284.2969 Q2945.9844,1285.0469 2945.9844,1286.0781 L2945.9844,1287.1719 Q2945.9844,1288.4063 2946.875,1289.2266 Q2947.7656,1290.0469 2949.3594,1290.0469 Q2950.2969,1290.0469 2950.9531,1289.7969 Q2951.3438,1289.6406 2951.7656,1289.2031 Q2952.0313,1288.9375 2952.1797,1288.8594 Q2952.3281,1288.7813 2952.5313,1288.7813 Q2952.8594,1288.7813 2953.1172,1289.0391 Q2953.375,1289.2969 2953.375,1289.6406 Q2953.375,1289.9844 2953.0313,1290.3906 Q2952.5313,1290.9688 2951.7344,1291.2969 Q2950.6563,1291.75 2949.3594,1291.75 Q2947.8438,1291.75 2946.6406,1291.125 Q2945.6563,1290.625 2944.9688,1289.5547 Q2944.2813,1288.4844 2944.2813,1287.2031 L2944.2813,1286.0469 Q2944.2813,1284.7188 2944.8984,1283.5703 Q2945.5156,1282.4219 2946.6094,1281.8047 Q2947.7031,1281.1875 2948.9375,1281.1875 Q2949.6719,1281.1875 2950.3203,1281.3516 Q2950.9688,1281.5156 2951.5156,1281.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="96" x="2969.25" y="1290.9102">SEMSIM_PUBLIC</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2732" x2="3270" y1="1302" y2="1302"/><polygon fill="none" points="2742,1308,2746,1312,2742,1316,2738,1312" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="2751" y="1317.4189">resource_ : Resource</text><polygon fill="none" points="2742,1321.8359,2746,1325.8359,2742,1329.8359,2738,1325.8359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="2751" y="1331.2549">where_ : ConditionPtr</text><polygon fill="none" points="2742,1335.6719,2746,1339.6719,2742,1343.6719,2738,1339.6719" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="2751" y="1345.0908">resource_ : Resource</text><polygon fill="none" points="2742,1349.5078,2746,1353.5078,2742,1357.5078,2738,1353.5078" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="2751" y="1358.9268">relation_ : Relation</text><polygon fill="none" points="2742,1363.3438,2746,1367.3438,2742,1371.3438,2738,1367.3438" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="2751" y="1372.7627">resource_ : Resource</text><polygon fill="none" points="2742,1377.1797,2746,1381.1797,2742,1385.1797,2738,1381.1797" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="2751" y="1386.5986">is_value_ : bool</text><polygon fill="none" points="2742,1391.0156,2746,1395.0156,2742,1399.0156,2738,1395.0156" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="2751" y="1400.4346">value_ : double</text><polygon fill="none" points="2742,1404.8516,2746,1408.8516,2742,1412.8516,2738,1408.8516" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="2751" y="1414.2705">results_ : rasqal_query_results*</text><polygon fill="none" points="2742,1418.6875,2746,1422.6875,2742,1426.6875,2738,1422.6875" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="2751" y="1428.1064">element_ : Component*</text><polygon fill="none" points="2742,1432.5234,2746,1436.5234,2742,1440.5234,2738,1436.5234" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="43" x="2751" y="1441.9424">uri_ : URI</text><polygon fill="none" points="2742,1446.3594,2746,1450.3594,2742,1454.3594,2738,1450.3594" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="2751" y="1455.7783">components_ : semsim::Components</text><polygon fill="none" points="2742,1460.1953,2746,1464.1953,2742,1468.1953,2738,1464.1953" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="43" x="2751" y="1469.6143">uri_ : URI</text><polygon fill="none" points="2742,1474.0313,2746,1478.0313,2742,1482.0313,2738,1478.0313" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="2751" y="1483.4502">raptor_iostr_ : raptor_iostream*</text><polygon fill="none" points="2742,1487.8672,2746,1491.8672,2742,1495.8672,2738,1491.8672" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="2751" y="1497.2861">base_uri_ : raptor_uri*</text><polygon fill="none" points="2742,1501.7031,2746,1505.7031,2742,1509.7031,2738,1505.7031" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="2751" y="1511.1221">uri_ : raptor_uri*</text><polygon fill="none" points="2742,1515.5391,2746,1519.5391,2742,1523.5391,2738,1519.5391" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="2751" y="1524.958">raptor_world_ : raptor_world*</text><polygon fill="none" points="2742,1529.375,2746,1533.375,2742,1537.375,2738,1533.375" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="2751" y="1538.7939">dg_ : rasqal_data_graph*</text><polygon fill="none" points="2742,1543.2109,2746,1547.2109,2742,1551.2109,2738,1547.2109" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="2751" y="1552.6299">query_ : rasqal_query*</text><polygon fill="none" points="2742,1557.0469,2746,1561.0469,2742,1565.0469,2738,1561.0469" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="2751" y="1566.4658">rasqal_world_ : rasqal_world*</text><polygon fill="none" points="2742,1570.8828,2746,1574.8828,2742,1578.8828,2738,1574.8828" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="2751" y="1580.3018">rdf_ : std::string</text><polygon fill="none" points="2742,1584.7188,2746,1588.7188,2742,1592.7188,2738,1588.7188" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="2751" y="1594.1377">uri_string_ : unsigned char*</text><ellipse cx="2742" cy="1603.5547" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="148" x="2751" y="1607.9736">encodes : const static Relation</text><ellipse cx="2742" cy="1617.3906" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="143" x="2751" y="1621.8096">hasPart : const static Relation</text><ellipse cx="2742" cy="1631.2266" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="165" x="2751" y="1635.6455">hasProperty : const static Relation</text><ellipse cx="2742" cy="1645.0625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="154" x="2751" y="1649.4814">hasTaxon : const static Relation</text><ellipse cx="2742" cy="1658.8984" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="162" x="2751" y="1663.3174">hasVersion : const static Relation</text><ellipse cx="2742" cy="1672.7344" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="114" x="2751" y="1677.1533">is : const static Relation</text><ellipse cx="2742" cy="1686.5703" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="176" x="2751" y="1690.9893">isDescribedBy : const static Relation</text><ellipse cx="2742" cy="1700.4063" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="169" x="2751" y="1704.8252">isEncodedBy : const static Relation</text><ellipse cx="2742" cy="1714.2422" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="167" x="2751" y="1718.6611">isHomologTo : const static Relation</text><ellipse cx="2742" cy="1728.0781" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="2751" y="1732.4971">isPartOf : const static Relation</text><ellipse cx="2742" cy="1741.9141" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="167" x="2751" y="1746.333">isPropertyOf : const static Relation</text><ellipse cx="2742" cy="1755.75" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="2751" y="1760.1689">isVersionOf : const static Relation</text><ellipse cx="2742" cy="1769.5859" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="148" x="2751" y="1774.0049">occursIn : const static Relation</text><ellipse cx="2742" cy="1783.4219" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="135" x="2751" y="1787.8408">root : const static std::string</text><polygon fill="none" points="2742,1792.2578,2746,1796.2578,2742,1800.2578,2738,1796.2578" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="2751" y="1801.6768">annotation_ : AnnotationPtr</text><polygon fill="none" points="2742,1806.0938,2746,1810.0938,2742,1814.0938,2738,1810.0938" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="2751" y="1815.5127">metaid_ : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2732" x2="3270" y1="1821.9297" y2="1821.9297"/><ellipse cx="2742" cy="1832.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="2751" y="1837.3486">IdentityCondition(Resource resource)</text><ellipse cx="2742" cy="1846.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="2751" y="1851.1846">matchEntity(const EntityBase&amp; entity) : bool {query}</text><ellipse cx="2742" cy="1860.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="2751" y="1865.0205">matches(const Component&amp; component) : bool {query}</text><ellipse cx="2742" cy="1874.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="2751" y="1878.8564">SelectQuery(ConditionPtr&amp;&amp; where)</text><ellipse cx="2742" cy="1888.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="2751" y="1892.6924">~Participant()</text><ellipse cx="2742" cy="1902.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="58" x="2751" y="1906.5283">~Condition()</text><ellipse cx="2742" cy="1915.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="231" x="2751" y="1920.3643">matches(const Component&amp; component) : bool</text><ellipse cx="2742" cy="1929.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="2751" y="1934.2002">PhysicalProperty(const Resource&amp; resource)</text><ellipse cx="2742" cy="1943.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="2751" y="1948.0361">PhysicalProperty(Resource&amp;&amp; resource)</text><ellipse cx="2742" cy="1957.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="2751" y="1961.8721">PhysicalProperty(const std::string&amp; resource)</text><ellipse cx="2742" cy="1971.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="2751" y="1975.708">PhysicalProperty(std::string&amp;&amp; resource)</text><ellipse cx="2742" cy="1985.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="2751" y="1989.5439">getResource() : Resource&amp; {query}</text><ellipse cx="2742" cy="1998.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="2751" y="2003.3799">getResource() : Resource&amp;</text><ellipse cx="2742" cy="2012.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="2751" y="2017.2158">humanize() : std::string {query}</text><ellipse cx="2742" cy="2026.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="2751" y="2031.0518">Term(const Relation&amp; relation, const Resource&amp; resource)</text><ellipse cx="2742" cy="2040.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="2751" y="2044.8877">Term(Relation&amp;&amp; relation, Resource&amp;&amp; resource)</text><ellipse cx="2742" cy="2054.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="2751" y="2058.7236">Term(const Relation&amp; relation, const double value)</text><ellipse cx="2742" cy="2068.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="2751" y="2072.5596">getRelation() : Relation&amp; {query}</text><ellipse cx="2742" cy="2081.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="2751" y="2086.3955">getResource() : Resource&amp; {query}</text><ellipse cx="2742" cy="2095.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="2751" y="2100.2314">isValue() : bool {query}</text><ellipse cx="2742" cy="2109.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="2751" y="2114.0674">getValue() : double {query}</text><ellipse cx="2742" cy="2123.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="2751" y="2127.9033">toString() : std::string {query}</text><ellipse cx="2742" cy="2137.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="2751" y="2141.7393">RasqalQueryResult(rasqal_query_results* results)</text><ellipse cx="2742" cy="2151.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="2751" y="2155.5752">~RasqalQueryResult()</text><ellipse cx="2742" cy="2164.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="2751" y="2169.4111">toRDFString(const std::string&amp; format) : std::string</text><ellipse cx="2742" cy="2178.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="2751" y="2183.2471">toString() : std::string</text><ellipse cx="2742" cy="2192.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="2751" y="2197.083">asList() : std::vector&lt;std::vector&lt;std::string&gt; &gt;</text><polygon fill="#FFFF44" points="2742,2201.5,2746,2205.5,2742,2209.5,2738,2205.5" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="2751" y="2210.9189">toRaptorGraph(raptor_world* world, raptor_serializer* serializer) : void</text><ellipse cx="2742" cy="2220.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="2751" y="2224.7549">Resource(const URI&amp; uri)</text><ellipse cx="2742" cy="2234.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="2751" y="2238.5908">Resource(URI&amp;&amp; uri)</text><ellipse cx="2742" cy="2248.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="2751" y="2252.4268">Resource(Component* element)</text><ellipse cx="2742" cy="2261.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="2751" y="2266.2627">getURI(const URI&amp; base) : URI {query}</text><ellipse cx="2742" cy="2275.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="2751" y="2280.0986">isLocal() : bool {query}</text><ellipse cx="2742" cy="2289.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="2751" y="2293.9346">operator==(const Resource&amp; other) : bool {query}</text><ellipse cx="2742" cy="2303.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="2751" y="2307.7705">humanize() : std::string {query}</text><ellipse cx="2742" cy="2317.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="2751" y="2321.6064">toString() : std::string {query}</text><ellipse cx="2742" cy="2331.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="2751" y="2335.4424">SemsimModel()</text><ellipse cx="2742" cy="2344.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="2751" y="2349.2783">SemsimModel(const SemsimModel&amp; other)</text><ellipse cx="2742" cy="2358.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="452" x="2751" y="2363.1143">SemsimModel(SemsimModel&amp;&amp; other) noexcept: components_(std::move(othercomponents_))</text><ellipse cx="2742" cy="2372.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="2751" y="2376.9502">~SemsimModel()</text><ellipse cx="2742" cy="2386.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="321" x="2751" y="2390.7861">findComponentWithMetaId(const std::string&amp; metaid) : Component&amp;</text><ellipse cx="2742" cy="2400.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="360" x="2751" y="2404.6221">findComponentWithMetaId(const std::string&amp; metaid) : Component&amp; {query}</text><ellipse cx="2742" cy="2414.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="2751" y="2418.458">addComponent(const Component&amp; component) : Component*</text><ellipse cx="2742" cy="2427.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="2751" y="2432.2939">addComponent(Component&amp;&amp; component) : Component*</text><ellipse cx="2742" cy="2441.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="2751" y="2446.1299">getComponents() : Components&amp; {query}</text><ellipse cx="2742" cy="2455.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="2751" y="2459.9658">getComponents() : Components&amp;</text><ellipse cx="2742" cy="2469.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="2751" y="2473.8018">addComponent(const Process&amp; component) : Process*</text><ellipse cx="2742" cy="2483.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="243" x="2751" y="2487.6377">addComponent(Process&amp;&amp; component) : Process*</text><ellipse cx="2742" cy="2497.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="2751" y="2501.4736">containsMetaId(const std::string&amp; metaid) : bool {query}</text><ellipse cx="2742" cy="2510.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="2751" y="2515.3096">hasComponentWithMetaId(const std::string&amp; metaid) : bool {query}</text><ellipse cx="2742" cy="2524.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="2751" y="2529.1455">getNumComponents() : std::size_t {query}</text><ellipse cx="2742" cy="2538.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="162" x="2751" y="2542.9814">encodeXML() : std::string {query}</text><ellipse cx="2742" cy="2552.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="154" x="2751" y="2556.8174">getFormat() : std::string {query}</text><ellipse cx="2742" cy="2566.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="401" x="2751" y="2570.6533">getRDF(const URI&amp; sbml_base_uri, const std::string&amp; format) : std::string {query}</text><ellipse cx="2742" cy="2580.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="2751" y="2584.4893">humanize() : std::string {query}</text><ellipse cx="2742" cy="2593.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="2751" y="2598.3252">Relation(const URI&amp; uri)</text><ellipse cx="2742" cy="2607.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="2751" y="2612.1611">Relation(URI&amp;&amp; uri)</text><ellipse cx="2742" cy="2621.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="2751" y="2625.9971">getURI() : URI&amp; {query}</text><ellipse cx="2742" cy="2635.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="2751" y="2639.833">operator==(const Relation&amp; other) : bool {query}</text><ellipse cx="2742" cy="2649.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="2751" y="2653.6689">humanize() : std::string {query}</text><ellipse cx="2742" cy="2663.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="2751" y="2667.5049">toString() : std::string {query}</text><ellipse cx="2742" cy="2676.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="355" x="2751" y="2681.3408">RasqalQuery(const std::string&amp; rdf, const std::string&amp; format, bool is_file)</text><ellipse cx="2742" cy="2690.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="2751" y="2695.1768">~RasqalQuery()</text><ellipse cx="2742" cy="2704.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="2751" y="2709.0127">run(const std::string&amp; query) : RasqalQueryResult</text><ellipse cx="2742" cy="2718.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="334" x="2751" y="2722.8486">resolve(const std::string&amp; root, unsigned int t, int n_digits) : Resource</text><ellipse cx="2742" cy="2732.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="235" x="2751" y="2736.6846">humanizeQualifier(const Relation&amp; q) : std::string</text><ellipse cx="2742" cy="2746.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="62" x="2751" y="2750.5205">Component()</text><ellipse cx="2742" cy="2759.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="243" x="2751" y="2764.3564">Component(const SingularAnnotation&amp; annotation)</text><ellipse cx="2742" cy="2773.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="2751" y="2778.1924">Component(SingularAnnotation&amp;&amp; annotation)</text><ellipse cx="2742" cy="2787.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="2751" y="2792.0283">Component(const CompositeAnnotation&amp; annotation)</text><ellipse cx="2742" cy="2801.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="2751" y="2805.8643">Component(CompositeAnnotation&amp;&amp; annotation)</text><ellipse cx="2742" cy="2815.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="2751" y="2819.7002">Component(const Component&amp; other)</text><ellipse cx="2742" cy="2829.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="412" x="2751" y="2833.5361">Component(Component&amp;&amp; other) noexcept: annotation_(std::move(otherannotation_))</text><ellipse cx="2742" cy="2842.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="2751" y="2847.3721">~Component()</text><ellipse cx="2742" cy="2856.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="2751" y="2861.208">getAnnotation() : AnnotationBase&amp; {query}</text><ellipse cx="2742" cy="2870.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="2751" y="2875.0439">getAnnotation() : AnnotationBase&amp;</text><ellipse cx="2742" cy="2884.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="2751" y="2888.8799">clone() : Component* {query}</text><ellipse cx="2742" cy="2898.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="2751" y="2902.7158">getCompositeAnnotation() : CompositeAnnotation&amp; {query}</text><ellipse cx="2742" cy="2912.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="243" x="2751" y="2916.5518">getCompositeAnnotation() : CompositeAnnotation&amp;</text><ellipse cx="2742" cy="2925.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="2751" y="2930.3877">getURI(const URI&amp; base) : URI {query}</text><ellipse cx="2742" cy="2939.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="2751" y="2944.2236">containsMetaId(const std::string&amp; metaid) : bool {query}</text><ellipse cx="2742" cy="2953.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="2751" y="2958.0596">hasAnnotation() : bool {query}</text><ellipse cx="2742" cy="2967.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="2751" y="2971.8955">hasCompositeAnnotation() : bool {query}</text><ellipse cx="2742" cy="2981.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="2751" y="2985.7314">hasMetaId() : bool {query}</text><ellipse cx="2742" cy="2995.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="2751" y="2999.5674">hasSingularAnnotation() : bool {query}</text><ellipse cx="2742" cy="3008.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="2751" y="3013.4033">isProcess() : bool {query}</text><ellipse cx="2742" cy="3022.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="390" x="2751" y="3027.2393">getRDF(const URI&amp; sbml_base_uri, const std::string&amp; format) : std::string {query}</text><ellipse cx="2742" cy="3036.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="2751" y="3041.0752">humanize() : std::string {query}</text><ellipse cx="2742" cy="3050.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="2751" y="3054.9111">getMetaId() : std::string&amp; {query}</text><ellipse cx="2742" cy="3064.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="514" x="2751" y="3068.7471">serializeToRDF(const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}</text><ellipse cx="2742" cy="3078.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="2751" y="3082.583">setAnnotation(AnnotationBase* annotation) : void</text><ellipse cx="2742" cy="3092" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="2751" y="3096.4189">setAnnotation(const AnnotationBase&amp; annotation) : void</text><ellipse cx="2742" cy="3105.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="2751" y="3110.2549">setAnnotation(AnnotationPtr&amp;&amp; annotation) : void</text><ellipse cx="2742" cy="3119.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="2751" y="3124.0908">setMetaId(const std::string&amp; metaid) : void</text><!--MD5=[b3fdae49cf0a43249a4bb16f9a6d3cbe]
class semsim.SemSimObject--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="255.5391" id="semsim.SemSimObject" style="stroke: #A80036; stroke-width: 1.5;" width="275" x="3306.5" y="2072.5"/><ellipse cx="3398.25" cy="2088.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3401.0156,2084.375 Q3401.1719,2084.1563 3401.3594,2084.0469 Q3401.5469,2083.9375 3401.7656,2083.9375 Q3402.1406,2083.9375 3402.375,2084.1953 Q3402.6094,2084.4531 3402.6094,2085.0625 L3402.6094,2086.5156 Q3402.6094,2087.125 3402.375,2087.3906 Q3402.1406,2087.6563 3401.7656,2087.6563 Q3401.4219,2087.6563 3401.2188,2087.4531 Q3401.0156,2087.2656 3400.9063,2086.75 Q3400.8594,2086.3906 3400.6719,2086.2031 Q3400.3438,2085.8281 3399.7344,2085.6094 Q3399.125,2085.3906 3398.5,2085.3906 Q3397.7344,2085.3906 3397.1016,2085.7188 Q3396.4688,2086.0469 3395.9766,2086.7969 Q3395.4844,2087.5469 3395.4844,2088.5781 L3395.4844,2089.6719 Q3395.4844,2090.9063 3396.375,2091.7266 Q3397.2656,2092.5469 3398.8594,2092.5469 Q3399.7969,2092.5469 3400.4531,2092.2969 Q3400.8438,2092.1406 3401.2656,2091.7031 Q3401.5313,2091.4375 3401.6797,2091.3594 Q3401.8281,2091.2813 3402.0313,2091.2813 Q3402.3594,2091.2813 3402.6172,2091.5391 Q3402.875,2091.7969 3402.875,2092.1406 Q3402.875,2092.4844 3402.5313,2092.8906 Q3402.0313,2093.4688 3401.2344,2093.7969 Q3400.1563,2094.25 3398.8594,2094.25 Q3397.3438,2094.25 3396.1406,2093.625 Q3395.1563,2093.125 3394.4688,2092.0547 Q3393.7813,2090.9844 3393.7813,2089.7031 L3393.7813,2088.5469 Q3393.7813,2087.2188 3394.3984,2086.0703 Q3395.0156,2084.9219 3396.1094,2084.3047 Q3397.2031,2083.6875 3398.4375,2083.6875 Q3399.1719,2083.6875 3399.8203,2083.8516 Q3400.4688,2084.0156 3401.0156,2084.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="83" x="3418.75" y="2093.4102">SemSimObject</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3307.5" x2="3580.5" y1="2104.5" y2="2104.5"/><polygon fill="none" points="3317.5,2110.5,3321.5,2114.5,3317.5,2118.5,3313.5,2114.5" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="3326.5" y="2119.9189">semsimtype : SemSimTypes</text><polygon fill="none" points="3317.5,2124.3359,3321.5,2128.3359,3317.5,2132.3359,3313.5,2128.3359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="3326.5" y="2133.7549">description : std::string</text><polygon fill="none" points="3317.5,2138.1719,3321.5,2142.1719,3317.5,2146.1719,3313.5,2142.1719" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="3326.5" y="2147.5908">metadataID : std::string</text><polygon fill="none" points="3317.5,2152.0078,3321.5,2156.0078,3317.5,2160.0078,3313.5,2156.0078" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="3326.5" y="2161.4268">name : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3307.5" x2="3580.5" y1="2167.8438" y2="2167.8438"/><ellipse cx="3317.5" cy="2178.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="3326.5" y="2183.2627">SemSimObject(SemSimTypes type)</text><ellipse cx="3317.5" cy="2192.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="3326.5" y="2197.0986">hasDescription() : bool {query}</text><ellipse cx="3317.5" cy="2206.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="3326.5" y="2210.9346">hasMetadataID() : bool {query}</text><ellipse cx="3317.5" cy="2220.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="3326.5" y="2224.7705">hasName() : bool {query}</text><ellipse cx="3317.5" cy="2234.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="3326.5" y="2238.6064">getDescription() : std::string&amp; {query}</text><ellipse cx="3317.5" cy="2248.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="3326.5" y="2252.4424">getMetadataID() : std::string&amp; {query}</text><ellipse cx="3317.5" cy="2261.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="3326.5" y="2266.2783">getName() : std::string&amp; {query}</text><ellipse cx="3317.5" cy="2275.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="3326.5" y="2280.1143">copyDescription(const SemSimObject&amp; other) : void</text><ellipse cx="3317.5" cy="2289.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="3326.5" y="2293.9502">setDescription(const std::string&amp; description) : void</text><ellipse cx="3317.5" cy="2303.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="3326.5" y="2307.7861">setMetadataID(const std::string&amp; metadataID) : void</text><ellipse cx="3317.5" cy="2317.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="3326.5" y="2321.6221">setName(const std::string&amp; name) : void</text><!--MD5=[3e75699f67b617f0011f1062a1c61cfc]
class semsim.SingularAnnotation--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="227.8672" id="semsim.SingularAnnotation" style="stroke: #A80036; stroke-width: 1.5;" width="540" x="1259" y="555.5"/><ellipse cx="1472.75" cy="571.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1475.5156,567.375 Q1475.6719,567.1563 1475.8594,567.0469 Q1476.0469,566.9375 1476.2656,566.9375 Q1476.6406,566.9375 1476.875,567.1953 Q1477.1094,567.4531 1477.1094,568.0625 L1477.1094,569.5156 Q1477.1094,570.125 1476.875,570.3906 Q1476.6406,570.6563 1476.2656,570.6563 Q1475.9219,570.6563 1475.7188,570.4531 Q1475.5156,570.2656 1475.4063,569.75 Q1475.3594,569.3906 1475.1719,569.2031 Q1474.8438,568.8281 1474.2344,568.6094 Q1473.625,568.3906 1473,568.3906 Q1472.2344,568.3906 1471.6016,568.7188 Q1470.9688,569.0469 1470.4766,569.7969 Q1469.9844,570.5469 1469.9844,571.5781 L1469.9844,572.6719 Q1469.9844,573.9063 1470.875,574.7266 Q1471.7656,575.5469 1473.3594,575.5469 Q1474.2969,575.5469 1474.9531,575.2969 Q1475.3438,575.1406 1475.7656,574.7031 Q1476.0313,574.4375 1476.1797,574.3594 Q1476.3281,574.2813 1476.5313,574.2813 Q1476.8594,574.2813 1477.1172,574.5391 Q1477.375,574.7969 1477.375,575.1406 Q1477.375,575.4844 1477.0313,575.8906 Q1476.5313,576.4688 1475.7344,576.7969 Q1474.6563,577.25 1473.3594,577.25 Q1471.8438,577.25 1470.6406,576.625 Q1469.6563,576.125 1468.9688,575.0547 Q1468.2813,573.9844 1468.2813,572.7031 L1468.2813,571.5469 Q1468.2813,570.2188 1468.8984,569.0703 Q1469.5156,567.9219 1470.6094,567.3047 Q1471.7031,566.6875 1472.9375,566.6875 Q1473.6719,566.6875 1474.3203,566.8516 Q1474.9688,567.0156 1475.5156,567.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="104" x="1493.25" y="576.4102">SingularAnnotation</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1260" x2="1798" y1="587.5" y2="587.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1260" x2="1798" y1="595.5" y2="595.5"/><ellipse cx="1270" cy="606.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="354" x="1279" y="610.9189">SingularAnnotation(const std::string&amp; metaid, const Resource&amp; definition)</text><ellipse cx="1270" cy="620.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="1279" y="624.7549">SingularAnnotation(const std::string&amp; metaid)</text><ellipse cx="1270" cy="634.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="331" x="1279" y="638.5908">SingularAnnotation(const std::string&amp; metaid, Resource&amp;&amp; definition)</text><ellipse cx="1270" cy="648.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="1279" y="652.4268">SingularAnnotation(const SingularAnnotation&amp; other)</text><ellipse cx="1270" cy="661.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="1279" y="666.2627">SingularAnnotation(SingularAnnotation&amp;&amp; other)</text><ellipse cx="1270" cy="675.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="1279" y="680.0986">clone() : AnnotationBase* {query}</text><ellipse cx="1270" cy="689.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="339" x="1279" y="693.9346">makeComposite(const PhysicalProperty&amp; prop) : AnnotationPtr {query}</text><ellipse cx="1270" cy="703.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="1279" y="707.7705">getURI(const URI&amp; base) : URI {query}</text><ellipse cx="1270" cy="717.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="1279" y="721.6064">isComposite() : bool {query}</text><ellipse cx="1270" cy="731.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="390" x="1279" y="735.4424">getRDF(const URI&amp; sbml_base_uri, const std::string&amp; format) : std::string {query}</text><ellipse cx="1270" cy="744.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="1279" y="749.2783">humanize() : std::string {query}</text><ellipse cx="1270" cy="758.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="1279" y="763.1143">getMetaId() : std::string&amp; {query}</text><ellipse cx="1270" cy="772.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="514" x="1279" y="776.9502">serializeToRDF(const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}</text><!--MD5=[89e1663c114f064c22876e3e5b3f56ad]
class semsim.Sink--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="131.0156" id="semsim.Sink" style="stroke: #A80036; stroke-width: 1.5;" width="536" x="3617" y="2135"/><ellipse cx="3868.75" cy="2151" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3871.5156,2146.875 Q3871.6719,2146.6563 3871.8594,2146.5469 Q3872.0469,2146.4375 3872.2656,2146.4375 Q3872.6406,2146.4375 3872.875,2146.6953 Q3873.1094,2146.9531 3873.1094,2147.5625 L3873.1094,2149.0156 Q3873.1094,2149.625 3872.875,2149.8906 Q3872.6406,2150.1563 3872.2656,2150.1563 Q3871.9219,2150.1563 3871.7188,2149.9531 Q3871.5156,2149.7656 3871.4063,2149.25 Q3871.3594,2148.8906 3871.1719,2148.7031 Q3870.8438,2148.3281 3870.2344,2148.1094 Q3869.625,2147.8906 3869,2147.8906 Q3868.2344,2147.8906 3867.6016,2148.2188 Q3866.9688,2148.5469 3866.4766,2149.2969 Q3865.9844,2150.0469 3865.9844,2151.0781 L3865.9844,2152.1719 Q3865.9844,2153.4063 3866.875,2154.2266 Q3867.7656,2155.0469 3869.3594,2155.0469 Q3870.2969,2155.0469 3870.9531,2154.7969 Q3871.3438,2154.6406 3871.7656,2154.2031 Q3872.0313,2153.9375 3872.1797,2153.8594 Q3872.3281,2153.7813 3872.5313,2153.7813 Q3872.8594,2153.7813 3873.1172,2154.0391 Q3873.375,2154.2969 3873.375,2154.6406 Q3873.375,2154.9844 3873.0313,2155.3906 Q3872.5313,2155.9688 3871.7344,2156.2969 Q3870.6563,2156.75 3869.3594,2156.75 Q3867.8438,2156.75 3866.6406,2156.125 Q3865.6563,2155.625 3864.9688,2154.5547 Q3864.2813,2153.4844 3864.2813,2152.2031 L3864.2813,2151.0469 Q3864.2813,2149.7188 3864.8984,2148.5703 Q3865.5156,2147.4219 3866.6094,2146.8047 Q3867.7031,2146.1875 3868.9375,2146.1875 Q3869.6719,2146.1875 3870.3203,2146.3516 Q3870.9688,2146.5156 3871.5156,2146.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="24" x="3889.25" y="2155.9102">Sink</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3618" x2="4152" y1="2167" y2="2167"/><polygon fill="none" points="3628,2173,3632,2177,3628,2181,3624,2177" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="3637" y="2182.4189">component_ : Component*</text><polygon fill="none" points="3628,2186.8359,3632,2190.8359,3628,2194.8359,3624,2190.8359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="3637" y="2196.2549">multiplier_ : double</text><polygon fill="none" points="3628,2200.6719,3632,2204.6719,3628,2208.6719,3624,2204.6719" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3637" y="2210.0908">id_ : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3618" x2="4152" y1="2216.5078" y2="2216.5078"/><ellipse cx="3628" cy="2227.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="3637" y="2231.9268">Sink(const std::string&amp; id, Component* component, double multiplier)</text><ellipse cx="3628" cy="2241.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="510" x="3637" y="2245.7627">serializeToRDF(const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : URI {query}</text><ellipse cx="3628" cy="2255.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="3637" y="2259.5986">containsMetaId(const std::string&amp; metaid) : bool {query}</text><!--MD5=[ebcb86e1f5baafdf05579500e5748823]
class semsim.Source--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="131.0156" id="semsim.Source" style="stroke: #A80036; stroke-width: 1.5;" width="536" x="4188" y="2135"/><ellipse cx="4432.25" cy="2151" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4435.0156,2146.875 Q4435.1719,2146.6563 4435.3594,2146.5469 Q4435.5469,2146.4375 4435.7656,2146.4375 Q4436.1406,2146.4375 4436.375,2146.6953 Q4436.6094,2146.9531 4436.6094,2147.5625 L4436.6094,2149.0156 Q4436.6094,2149.625 4436.375,2149.8906 Q4436.1406,2150.1563 4435.7656,2150.1563 Q4435.4219,2150.1563 4435.2188,2149.9531 Q4435.0156,2149.7656 4434.9063,2149.25 Q4434.8594,2148.8906 4434.6719,2148.7031 Q4434.3438,2148.3281 4433.7344,2148.1094 Q4433.125,2147.8906 4432.5,2147.8906 Q4431.7344,2147.8906 4431.1016,2148.2188 Q4430.4688,2148.5469 4429.9766,2149.2969 Q4429.4844,2150.0469 4429.4844,2151.0781 L4429.4844,2152.1719 Q4429.4844,2153.4063 4430.375,2154.2266 Q4431.2656,2155.0469 4432.8594,2155.0469 Q4433.7969,2155.0469 4434.4531,2154.7969 Q4434.8438,2154.6406 4435.2656,2154.2031 Q4435.5313,2153.9375 4435.6797,2153.8594 Q4435.8281,2153.7813 4436.0313,2153.7813 Q4436.3594,2153.7813 4436.6172,2154.0391 Q4436.875,2154.2969 4436.875,2154.6406 Q4436.875,2154.9844 4436.5313,2155.3906 Q4436.0313,2155.9688 4435.2344,2156.2969 Q4434.1563,2156.75 4432.8594,2156.75 Q4431.3438,2156.75 4430.1406,2156.125 Q4429.1563,2155.625 4428.4688,2154.5547 Q4427.7813,2153.4844 4427.7813,2152.2031 L4427.7813,2151.0469 Q4427.7813,2149.7188 4428.3984,2148.5703 Q4429.0156,2147.4219 4430.1094,2146.8047 Q4431.2031,2146.1875 4432.4375,2146.1875 Q4433.1719,2146.1875 4433.8203,2146.3516 Q4434.4688,2146.5156 4435.0156,2146.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="39" x="4452.75" y="2155.9102">Source</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4189" x2="4723" y1="2167" y2="2167"/><polygon fill="none" points="4199,2173,4203,2177,4199,2181,4195,2177" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="4208" y="2182.4189">component_ : Component*</text><polygon fill="none" points="4199,2186.8359,4203,2190.8359,4199,2194.8359,4195,2190.8359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="4208" y="2196.2549">multiplier_ : double</text><polygon fill="none" points="4199,2200.6719,4203,2204.6719,4199,2208.6719,4195,2204.6719" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="4208" y="2210.0908">id_ : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4189" x2="4723" y1="2216.5078" y2="2216.5078"/><ellipse cx="4199" cy="2227.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="341" x="4208" y="2231.9268">Source(const std::string&amp; id, Component* component, double multiplier)</text><ellipse cx="4199" cy="2241.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="510" x="4208" y="2245.7627">serializeToRDF(const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : URI {query}</text><ellipse cx="4199" cy="2255.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="4208" y="2259.5986">containsMetaId(const std::string&amp; metaid) : bool {query}</text><!--MD5=[3c05f7d82d57a07159c08987cc5d853e]
class semsim.URI--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="186.3594" id="semsim.URI" style="stroke: #A80036; stroke-width: 1.5;" width="284" x="2465" y="3191"/><ellipse cx="2592.25" cy="3207" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2595.0156,3202.875 Q2595.1719,3202.6563 2595.3594,3202.5469 Q2595.5469,3202.4375 2595.7656,3202.4375 Q2596.1406,3202.4375 2596.375,3202.6953 Q2596.6094,3202.9531 2596.6094,3203.5625 L2596.6094,3205.0156 Q2596.6094,3205.625 2596.375,3205.8906 Q2596.1406,3206.1563 2595.7656,3206.1563 Q2595.4219,3206.1563 2595.2188,3205.9531 Q2595.0156,3205.7656 2594.9063,3205.25 Q2594.8594,3204.8906 2594.6719,3204.7031 Q2594.3438,3204.3281 2593.7344,3204.1094 Q2593.125,3203.8906 2592.5,3203.8906 Q2591.7344,3203.8906 2591.1016,3204.2188 Q2590.4688,3204.5469 2589.9766,3205.2969 Q2589.4844,3206.0469 2589.4844,3207.0781 L2589.4844,3208.1719 Q2589.4844,3209.4063 2590.375,3210.2266 Q2591.2656,3211.0469 2592.8594,3211.0469 Q2593.7969,3211.0469 2594.4531,3210.7969 Q2594.8438,3210.6406 2595.2656,3210.2031 Q2595.5313,3209.9375 2595.6797,3209.8594 Q2595.8281,3209.7813 2596.0313,3209.7813 Q2596.3594,3209.7813 2596.6172,3210.0391 Q2596.875,3210.2969 2596.875,3210.6406 Q2596.875,3210.9844 2596.5313,3211.3906 Q2596.0313,3211.9688 2595.2344,3212.2969 Q2594.1563,3212.75 2592.8594,3212.75 Q2591.3438,3212.75 2590.1406,3212.125 Q2589.1563,3211.625 2588.4688,3210.5547 Q2587.7813,3209.4844 2587.7813,3208.2031 L2587.7813,3207.0469 Q2587.7813,3205.7188 2588.3984,3204.5703 Q2589.0156,3203.4219 2590.1094,3202.8047 Q2591.2031,3202.1875 2592.4375,3202.1875 Q2593.1719,3202.1875 2593.8203,3202.3516 Q2594.4688,3202.5156 2595.0156,3202.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="21" x="2612.75" y="3211.9102">URI</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2466" x2="2748" y1="3223" y2="3223"/><polygon fill="none" points="2476,3229,2480,3233,2476,3237,2472,3233" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="2485" y="3238.4189">encoded_uri_ : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2466" x2="2748" y1="3244.8359" y2="3244.8359"/><ellipse cx="2476" cy="3255.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="24" x="2485" y="3260.2549">URI()</text><ellipse cx="2476" cy="3269.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="2485" y="3274.0908">URI(const std::string&amp; uri)</text><ellipse cx="2476" cy="3283.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="2485" y="3287.9268">URI(const char* uri)</text><ellipse cx="2476" cy="3297.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="2485" y="3301.7627">URI(std::string&amp;&amp; uri)</text><ellipse cx="2476" cy="3311.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="2485" y="3315.5986">appendToFrag(const std::string&amp; suffix) : URI {query}</text><ellipse cx="2476" cy="3325.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="2485" y="3329.4346">withFrag(const std::string&amp; suffix) : URI {query}</text><ellipse cx="2476" cy="3338.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="2485" y="3343.2705">operator==(const URI&amp; other) : bool {query}</text><ellipse cx="2476" cy="3352.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="2485" y="3357.1064">encode() : std::string {query}</text><ellipse cx="2476" cy="3366.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="2485" y="3370.9424">toString() : std::string {query}</text><!--MD5=[d521990f0f5f5e9bceff28f17ed1b86f]
class semsim.semsim--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="158.6875" id="semsim.semsim" style="stroke: #A80036; stroke-width: 1.5;" width="267" x="2784.5" y="3204.5"/><ellipse cx="2890.75" cy="3220.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2893.5156,3216.375 Q2893.6719,3216.1563 2893.8594,3216.0469 Q2894.0469,3215.9375 2894.2656,3215.9375 Q2894.6406,3215.9375 2894.875,3216.1953 Q2895.1094,3216.4531 2895.1094,3217.0625 L2895.1094,3218.5156 Q2895.1094,3219.125 2894.875,3219.3906 Q2894.6406,3219.6563 2894.2656,3219.6563 Q2893.9219,3219.6563 2893.7188,3219.4531 Q2893.5156,3219.2656 2893.4063,3218.75 Q2893.3594,3218.3906 2893.1719,3218.2031 Q2892.8438,3217.8281 2892.2344,3217.6094 Q2891.625,3217.3906 2891,3217.3906 Q2890.2344,3217.3906 2889.6016,3217.7188 Q2888.9688,3218.0469 2888.4766,3218.7969 Q2887.9844,3219.5469 2887.9844,3220.5781 L2887.9844,3221.6719 Q2887.9844,3222.9063 2888.875,3223.7266 Q2889.7656,3224.5469 2891.3594,3224.5469 Q2892.2969,3224.5469 2892.9531,3224.2969 Q2893.3438,3224.1406 2893.7656,3223.7031 Q2894.0313,3223.4375 2894.1797,3223.3594 Q2894.3281,3223.2813 2894.5313,3223.2813 Q2894.8594,3223.2813 2895.1172,3223.5391 Q2895.375,3223.7969 2895.375,3224.1406 Q2895.375,3224.4844 2895.0313,3224.8906 Q2894.5313,3225.4688 2893.7344,3225.7969 Q2892.6563,3226.25 2891.3594,3226.25 Q2889.8438,3226.25 2888.6406,3225.625 Q2887.6563,3225.125 2886.9688,3224.0547 Q2886.2813,3222.9844 2886.2813,3221.7031 L2886.2813,3220.5469 Q2886.2813,3219.2188 2886.8984,3218.0703 Q2887.5156,3216.9219 2888.6094,3216.3047 Q2889.7031,3215.6875 2890.9375,3215.6875 Q2891.6719,3215.6875 2892.3203,3215.8516 Q2892.9688,3216.0156 2893.5156,3216.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="46" x="2911.25" y="3225.4102">semsim</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2785.5" x2="3050.5" y1="3236.5" y2="3236.5"/><ellipse cx="2795.5" cy="3247.5" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="215" x="2804.5" y="3251.9189">hasMediatorParticipant : const static Relation</text><ellipse cx="2795.5" cy="3261.3359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="165" x="2804.5" y="3265.7549">hasMultiplier : const static Relation</text><ellipse cx="2795.5" cy="3275.1719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="241" x="2804.5" y="3279.5908">hasPhysicalEntityReference : const static Relation</text><ellipse cx="2795.5" cy="3289.0078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="170" x="2804.5" y="3293.4268">hasSBOTerm : const static Relation</text><ellipse cx="2795.5" cy="3302.8438" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="194" x="2804.5" y="3307.2627">hasSinkParticipant : const static Relation</text><ellipse cx="2795.5" cy="3316.6797" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="209" x="2804.5" y="3321.0986">hasSourceParticipant : const static Relation</text><ellipse cx="2795.5" cy="3330.5156" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="152" x="2804.5" y="3334.9346">hasValue : const static Relation</text><ellipse cx="2795.5" cy="3344.3516" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="135" x="2804.5" y="3348.7705">root : const static std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2785.5" x2="3050.5" y1="3355.1875" y2="3355.1875"/><!--MD5=[71fa3de94e04873e11e60aaa2e645c68]
class ModelStrings--><rect fill="#FEFECE" filter="url(#fbs1gd1e3tzky)" height="75.6719" id="ModelStrings" style="stroke: #A80036; stroke-width: 1.5;" width="152" x="4756" y="212"/><ellipse cx="4792.6" cy="228" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4795.3656,223.875 Q4795.5219,223.6563 4795.7094,223.5469 Q4795.8969,223.4375 4796.1156,223.4375 Q4796.4906,223.4375 4796.725,223.6953 Q4796.9594,223.9531 4796.9594,224.5625 L4796.9594,226.0156 Q4796.9594,226.625 4796.725,226.8906 Q4796.4906,227.1563 4796.1156,227.1563 Q4795.7719,227.1563 4795.5688,226.9531 Q4795.3656,226.7656 4795.2563,226.25 Q4795.2094,225.8906 4795.0219,225.7031 Q4794.6938,225.3281 4794.0844,225.1094 Q4793.475,224.8906 4792.85,224.8906 Q4792.0844,224.8906 4791.4516,225.2188 Q4790.8188,225.5469 4790.3266,226.2969 Q4789.8344,227.0469 4789.8344,228.0781 L4789.8344,229.1719 Q4789.8344,230.4063 4790.725,231.2266 Q4791.6156,232.0469 4793.2094,232.0469 Q4794.1469,232.0469 4794.8031,231.7969 Q4795.1938,231.6406 4795.6156,231.2031 Q4795.8813,230.9375 4796.0297,230.8594 Q4796.1781,230.7813 4796.3813,230.7813 Q4796.7094,230.7813 4796.9672,231.0391 Q4797.225,231.2969 4797.225,231.6406 Q4797.225,231.9844 4796.8813,232.3906 Q4796.3813,232.9688 4795.5844,233.2969 Q4794.5063,233.75 4793.2094,233.75 Q4791.6938,233.75 4790.4906,233.125 Q4789.5063,232.625 4788.8188,231.5547 Q4788.1313,230.4844 4788.1313,229.2031 L4788.1313,228.0469 Q4788.1313,226.7188 4788.7484,225.5703 Q4789.3656,224.4219 4790.4594,223.8047 Q4791.5531,223.1875 4792.7875,223.1875 Q4793.5219,223.1875 4794.1703,223.3516 Q4794.8188,223.5156 4795.3656,223.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="72" x="4811.4" y="232.9102">ModelStrings</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4757" x2="4907" y1="244" y2="244"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4757" x2="4907" y1="252" y2="252"/><ellipse cx="4767" cy="263" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="4776" y="267.4189">ModelStrings()</text><ellipse cx="4767" cy="276.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="126" x="4776" y="281.2549">Teusink2000() : std::string</text><!--MD5=[33c7963c6b3df0a6dbda76abb29e299b]
reverse link semsim.AnnotationBase to semsim.CompositeAnnotation--><path d="M2174.04,349.45 C2169.95,394.36 2164.99,448.83 2160.34,499.96 " fill="none" id="semsim.AnnotationBase&lt;-semsim.CompositeAnnotation" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2167.07,348.81,2175.85,329.53,2181.01,350.08,2167.07,348.81" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[7ca22df515d4632c0440a15075e92ea4]
reverse link semsim.AnnotationBase to semsim.SingularAnnotation--><path d="M2042.74,340.56 C1993.5,372.01 1937.8,407.57 1887,440 C1828.11,477.59 1763.78,518.66 1706.09,555.48 " fill="none" id="semsim.AnnotationBase&lt;-semsim.SingularAnnotation" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2039.25,334.49,2059.87,329.63,2046.78,346.29,2039.25,334.49" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[8b674757e2149934ac3a67bd578419dd]
reverse link semsim.EntityBase to semsim.Entity--><path d="M1262.85,457.45 C1254.47,471.18 1247.07,485.38 1241,500 C1212.1,569.57 1202.8,774.07 1241,839 C1268.6,885.92 1310.58,923.31 1356.85,952.85 " fill="none" id="semsim.EntityBase&lt;-semsim.Entity" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1257.21,453.29,1273.98,440.33,1268.95,460.91,1257.21,453.29" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[e4193689b010cb69348c4821165beee7]
reverse link semsim.EntityBase to semsim.SingularAnnotation--><path d="M1510.07,460.56 C1513.05,493.3 1516.03,526.01 1518.71,555.47 " fill="none" id="semsim.EntityBase&lt;-semsim.SingularAnnotation" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1503.06,460.76,1508.22,440.21,1517.01,459.49,1503.06,460.76" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[193abdf99051e44da3fa8136229841fa]
reverse link semsim.Exception to semsim.NullPointerException--><path d="M997.011,328.13 C1019.52,421.38 1064.38,573.84 1089.29,638.26 " fill="none" id="semsim.Exception&lt;-semsim.NullPointerException" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="990.186,329.68,992.434,308.61,1003.816,326.49,990.186,329.68" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[dbc954699b62d01be052d448022df535]
reverse link semsim.NullPointerException to semsim.Exception--><path d="M1101.16,625.09 C1085.53,549.4 1040.99,393.27 1011.22,308.61 " fill="none" id="semsim.NullPointerException&lt;-semsim.Exception" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1103.74,638.26,1106.5115,631.6028,1101.4323,626.484,1098.6608,633.1412,1103.74,638.26" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0323d9ecb3bdd6905f61e8f258a77832]
reverse link semsim.CompositeAnnotation to semsim.Entity--><path d="M1906.32,846.98 C1882.93,864.27 1859.32,881.73 1836.25,898.78 " fill="none" id="semsim.CompositeAnnotation&lt;-semsim.Entity" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1917.04,839.05,1909.8376,839.4041,1907.3943,846.1886,1914.5967,845.8346,1917.04,839.05" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[16bafc40889c6009858bd97cf991e101]
reverse link semsim.SBMLImporter to semsim.SemSimSBMLModel--><path d="M513,446.45 C513,466.64 513,487 513,506.77 " fill="none" id="semsim.SBMLImporter&lt;-semsim.SemSimSBMLModel" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="513,433.21,509,439.21,513,445.21,517,439.21,513,433.21" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c828f971a2b51e0ca317da64395bb2b1]
link semsim.Accessor to semsim.Annotation--><!--MD5=[495e2520b3fc652522c2ac662caad1dd]
link semsim.Annotation to semsim.CHEBI--><!--MD5=[3628fd64811dd0a9ce00f3938920b9b7]
link semsim.CHEBI to semsim.CL--><!--MD5=[fa6f2a95fc78727bf4643629d8e5099b]
link semsim.CL to semsim.DescriptorTerm--><!--MD5=[7b5912bfb68e72d88ec9608cbc7c7a4a]
link semsim.Accessor to semsim.EntityDescriptor--><!--MD5=[968dc0731604a0c59a601a0b11015f5f]
link semsim.EntityDescriptor to semsim.GO--><!--MD5=[f74ebce9e81fddf3332c1d2d6461fa92]
link semsim.GO to semsim.Mediator--><!--MD5=[21620480e0167c2b56d511d0406562ec]
link semsim.Mediator to semsim.MetaID--><!--MD5=[4f16050e326cc9c320802c50c475b89a]
link semsim.MetaID to semsim.OPB--><!--MD5=[29b9b6439d54fe118e7a862f7affe229]
link semsim.EntityDescriptor to semsim.Process--><!--MD5=[aeb492f73101da2c9edb7dae71c4558f]
link semsim.Process to semsim.Query--><!--MD5=[ea93843c90dc5a1bf3db948e6f6e8858]
link semsim.Query to semsim.QueryResults--><!--MD5=[73f332972a15e340bf8b653afcf4f41a]
link semsim.QueryResults to semsim.RDFReader--><!--MD5=[8c148ea1bd32368108a4ead5c857c60d]
link semsim.RDFReader to semsim.SBMLSpecies--><!--MD5=[a7ac45f2f882ac0958e54fa6a9087554]
link semsim.Process to semsim.SBO--><!--MD5=[056bd2297aae0968793b4ccd1bdfd67d]
link semsim.SBO to semsim.SEMSIM_PUBLIC--><!--MD5=[b95ac0573e9490ccbb720b9cc08a0acd]
link semsim.SEMSIM_PUBLIC to semsim.SemSimObject--><!--MD5=[9e356e4bddb87f98984c57b541096f78]
link semsim.SemSimObject to semsim.Sink--><!--MD5=[7df6dec4a8e84f2057b5975785b27d30]
link semsim.Sink to semsim.Source--><!--MD5=[5c7f34c6d7bc6a7a8c700415b17cf0e2]
link semsim.SBO to semsim.URI--><!--MD5=[a3e9b3b16664bacc0c24050e1b37f001]
link semsim.URI to semsim.semsim--><!--MD5=[e37a70a6e58e47f4c404b96f22927ba3]
@startuml






namespace semsim {
	class Accessor {
		+{static} hasCompartmentWithMetaId(const std::string& metaid, libsbml::Model* m) : bool
		+{static} findCompartment(const std::string& sid, libsbml::Model* m) : libsbml::Compartment*
		+{static} findUnitDefinition(const std::string& sid, libsbml::Model* m) : libsbml::UnitDefinition*
	}
}


namespace semsim {
	class Annotation {
		+{static} stripAnnotations(libsbml::SBMLDocument* d) : void
		+{static} stripAnnotationsFromElement(libsbml::SBase* x) : void
	}
}


namespace semsim {
	abstract class AnnotationBase {
		+~AnnotationBase()
		+{abstract} clone() : AnnotationBase* {query}
		+{abstract} isComposite() : bool {query}
		+{abstract} getRDF(const URI& sbml_base_uri, const std::string& format) : std::string {query}
		+{abstract} humanize() : std::string {query}
		+{abstract} getMetaId() : std::string& {query}
		+{abstract} makeComposite(const PhysicalProperty& prop) : std::unique_ptr<AnnotationBase> {query}
		+{abstract} serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
	}
}


namespace semsim {
	class CHEBI {
		+{static} get(OntologyTerm t) : Resource
	}
}


namespace semsim {
	class CL {
		+{static} get(OntologyTerm t) : Resource
	}
}


namespace semsim {
	class CompositeAnnotation {
		+CompositeAnnotation(const std::string& metaid, const PhysicalProperty& property, const Entity& entity)
		+CompositeAnnotation(const std::string& metaid, PhysicalProperty&& property, Entity&& entity)
		+CompositeAnnotation(const CompositeAnnotation& other)
		+CompositeAnnotation(CompositeAnnotation&& other)
		+CompositeAnnotation(const SingularAnnotation& other, const PhysicalProperty& property)
		+clone() : AnnotationBase* {query}
		+makeComposite(const PhysicalProperty& prop) : AnnotationPtr {query}
		#entity_ : Entity
		+getEntity() : Entity& {query}
		+getEntity() : Entity&
		#property_ : PhysicalProperty
		+isComposite() : bool {query}
		+isEntityEmpty() : bool {query}
		+getRDF(const URI& sbml_base_uri, const std::string& format) : std::string {query}
		+humanize() : std::string {query}
		#metaid_ : std::string
		+getMetaId() : std::string& {query}
		+addTerm(const Relation& relation, const Resource& resource) : void
		#serializePhysicalPropertyToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
		+serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
		+setMetaId(const std::string& metaid) : void
	}
}


namespace semsim {
	class DescriptorTerm {
		+DescriptorTerm(const Relation& relation, const Resource& resource)
		+DescriptorTerm(Relation&& relation, Resource&& resource)
	}
}


namespace semsim {
	class Entity {
		+Entity(const std::string& metaid)
		+Entity(const std::string& metaid, const Resource& definition)
		+Entity(const std::string& metaid, const Resource& definition, const EntityDescriptor& d)
		+Entity(const std::string& metaid, Resource&& definition, EntityDescriptor&& d)
		+Entity(const SingularAnnotation& annotation)
		+Entity(const Entity& other)
		+Entity(Entity&& other)
		+descriptors_() : ) ,
		#descriptors_ : Descriptors
		+getDescriptors() : Descriptors& {query}
		+getDescriptors() : Descriptors&
		+getDescriptor(std::size_t k) : EntityDescriptor& {query}
		+getDescriptor(std::size_t k) : EntityDescriptor&
		+getNumDescriptors() : std::size_t {query}
		+humanize() : std::string {query}
		#humanizeDescriptors() : std::string {query}
		+addDescriptor(const EntityDescriptor& d) : void
		+addDescriptor(EntityDescriptor&& d) : void
		+serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
	}
}


namespace semsim {
	class EntityBase {
		+EntityBase(std::string metaid, const Resource& definition)
		+EntityBase(EntityBase&& other) noexcept: metaid_(std::move(othermetaid_)), definitions_(std::move(otherdefinitions_)), terms_(std::move(otherterms_))
		+EntityBase(std::string metaid, Resource&& definition)
		#definitions_ : Definitions
		+getDefinitions() : Definitions& {query}
		+getDefinitions() : Definitions&
		+getDefinition(std::size_t k) : Resource& {query}
		#terms_ : Terms
		+getURI(const URI& base) : URI {query}
		+isEmpty() : bool {query}
		+matchesDefinition(const Resource& definition) : bool
		+metaid_ : return
		+getNumDefinitions() : std::size_t {query}
		+humanize() : std::string {query}
		#humanizeDefintions() : std::string {query}
		#metaid_ : std::string
		+toString(std::size_t indent) : std::string {query}
		+addDefinition(const Resource& definition) : void
		+addExtraneousTerm(const Term& term) : void
		+addExtraneousTerm(Term&& term) : void
		#serializeDefinition(const Resource& def, const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
		#serializeTerm(const Term& term, const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
		+serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
		+setMetaId(const std::string& metaid) : void
	}
}


namespace semsim {
	class EntityDescriptor {
		+EntityDescriptor()
		+EntityDescriptor(const EntityDescriptor& other)
		+EntityDescriptor(EntityDescriptor&& other)
		+EntityDescriptor(std::initializer_list<T> l)
		#terms_ : DescriptorTerms
		+isEmpty() : bool {query}
		+humanize() : std::string {query}
		#humanizeTerms() : std::string {query}
		+addTerm(const DescriptorTerm& t) : void
		+addTerm(DescriptorTerm&& t) : void
		+addTerm(const Relation& relation, const Resource& resource) : void
		#serializeDescriptorTermToRDF(const DescriptorTerm& term, const URI& linked_uri, const URI& term_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
		+serializeToRDF(const URI& sbml_base_uri, const std::string& metaid, raptor_world* world, raptor_serializer* serializer) : void {query}
	}
}


namespace semsim {
	class Exception {
		+Exception(const char* message)
		+Exception(std::string message)
		+~Exception()
		+what() : char* {query}
		#msg_ : std::string
	}
}


namespace semsim {
	class GO {
		+{static} get(OntologyTerm t) : Resource
	}
}


namespace semsim {
	class Mediator {
		+Mediator(const std::string& id, Component* component, double multiplier)
		#component_ : Component*
		+serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : URI {query}
		+containsMetaId(const std::string& metaid) : bool {query}
		#multiplier_ : double
		#id_ : std::string
	}
}


namespace semsim {
	class MetaID {
		+{static} modelContainsMetaId(libsbml::Model* m, const std::string& metaid) : bool
		+{static} assignMetaIds(libsbml::Model* m) : void
	}
}


class ModelStrings {
	+ModelStrings()
	+{static} Teusink2000() : std::string
}


namespace semsim {
	class NullPointerException {
		-Exception : using Exception::
	}
}


namespace semsim {
	class OPB {
		+{static} get(OntologyTerm t) : Resource
	}
}


namespace semsim {
	class Process {
		+Process()
		+Process(const SingularAnnotation& annotation)
		+Process(SingularAnnotation&& annotation)
		+Process(const CompositeAnnotation& annotation)
		+Process(CompositeAnnotation&& annotation)
		+Process(const Process& other)
		+Process(Process&& other)
		+clone() : Component* {query}
		#mediators_ : Mediators
		#sinks_ : Sinks
		#sources_ : Sources
		+containsMetaId(const std::string& metaid) : bool {query}
		+isProcess() : bool {query}
		+addMediator(const Mediator& mediator) : void
		+addSink(const Sink& sink) : void
		+addSource(const Source& source) : void
		+serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
	}
}


namespace semsim {
	abstract class Query {
		+~Query()
		+{abstract} run(SemsimModel& model) : QueryResults {query}
	}
}


namespace semsim {
	class QueryResults {
		#refs_ : ComponentRefs
		+begin() : iterator
		+end() : iterator
	}
}


namespace semsim {
	class RDFReader {
		+{static} RaptorTermToURI(raptor_term* t) : URI
		+{static} isMetaId(const std::string& uri) : bool
		+{static} isMetaId(raptor_term* t) : bool
		+{static} RaptorTermToRepr(raptor_term* t) : std::string
		+{static} RaptorURIToString(raptor_uri* u) : std::string
		+{static} extractMetaId(const std::string& uri) : std::string
		+{static} extractMetaId(raptor_term* t) : std::string
		+{static} addTermToAnnotation(AnnotationBase& annotation, const Relation& relation, const Resource& resource) : void
		+{static} addTermToCompositeAnnotation(CompositeAnnotation& annotation, const Relation& relation, const Resource& resource) : void
		+{static} addTermToEntity(EntityBase& entity, const Relation& relation, const Resource& resource) : void
		+{static} addTermToSingularAnnotation(SingularAnnotation& annotation, const Relation& relation, const Resource& resource) : void
		+{static} applyRDFAnnotationsToModel(SemsimModel& model, const std::string& rdf, const std::string& rdf_format) : void
		+{static} process_triple(void* user_data, raptor_statement* triple) : void
	}
}


namespace semsim {
	class SBMLImporter {
		+SBMLImporter(libsbml::SBMLDocument* d)
		+SBMLImporter(const std::string& sbml)
		#extractAnnotation(libsbml::SBase* s) : AnnotationPtr
		#extractAnnotation(libsbml::Species* s) : AnnotationPtr
		#extractAnnotation(libsbml::Compartment* c) : AnnotationPtr
		#extractAnnotation(libsbml::Reaction* r) : AnnotationPtr
		#extractAnnotation(libsbml::Parameter* p) : AnnotationPtr
		#getComponentFor(libsbml::SBase* s) : Component*
		#extractCompositeAnnotation(libsbml::Species* s) : CompositeAnnotation
		#extractSpeciesEntity(libsbml::Species* s) : Entity
		#extractSpeciesEntityDescriptor(libsbml::Species* s) : EntityDescriptor
		+{static} getRelationFromSBMLQual(libsbml::BiolQualifierType_t q) : Relation&
		#getResourceFor(libsbml::SBase* s) : Resource
		#importedSBMLModel : SemSimSBMLModel
		+getSBMLModel() : SemSimSBMLModel&
		+getSemSimSBMLModel() : SemSimSBMLModel& {query}
		#{static} extractSingularAnnotation(libsbml::SBase* s) : SingularAnnotation
		#{static} extractSingularAnnotation(libsbml::Parameter* p) : SingularAnnotation
		#sbmlModel : libsbml::Model*
		#{static} makeUniqueMetaId(const SemsimModel& model, const std::string& base) : std::string
		#assignParticipants(Process& process, libsbml::Reaction* r) : void
		#{static} populateDefinitionsAndTerms(libsbml::SBase* s, EntityBase& e) : void
		#{static} populateSBOTerm(libsbml::SBase* s, EntityBase& e) : void
	}
}


namespace semsim {
	class SemSimSBMLModel {
		+SemSimSBMLModel(libsbml::SBMLDocument* d)
		+SemSimSBMLModel(SemSimSBMLModel&& other) noexcept: SemsimModel(std::move(other)), element_map_(std::move(otherelement_map_)), element_id_map_(std::move(otherelement_id_map_)), d_(otherd_)
		+getComponent(libsbml::SBase* s) : Component* {query}
		+getComponent(libsbml::SBase* s) : Component*
		+getComponentForId(const std::string& id) : Component* {query}
		+getComponentForId(const std::string& id) : Component*
		+getProcess(libsbml::SBase* s) : Process*
		#element_map_ : SEMSIM_TR1_NAMESPACE_QUAL unordered_map<libsbml::SBase*, Component*>
		#element_id_map_ : SEMSIM_TR1_NAMESPACE_QUAL unordered_map<std::string, Component*>
		+hasComponent(const std::string id) : bool {query}
		+hasComponent(libsbml::SBase* s) : bool {query}
		+hasProcess(libsbml::SBase* s) : bool {query}
		#d_ : libsbml::SBMLDocument*
		+encodeXML() : std::string {query}
		+getFormat() : std::string {query}
		+getRDF(const URI& sbml_base_uri, const std::string& format) : std::string {query}
		+getRDF(const std::string& sbml_base_uri, const std::string& format) : std::string {query}
		+setComponentAnnotation(libsbml::SBase* s, const AnnotationBase& annotation) : void
		+setComponentAnnotation(libsbml::SBase* s, const AnnotationPtr& annotation) : void
		+setComponentAnnotation(libsbml::SBase* s, AnnotationPtr&& annotation) : void
	}
}


namespace semsim {
	class SBMLSpecies {
		+{static} GetSpeciesPhysicalProperty(libsbml::Species* s, libsbml::Model* m) : PhysicalProperty
		+{static} SubstanceUnitsAreConc(libsbml::Species* s, libsbml::Model* m) : bool
		+{static} UnitDefIsConc(libsbml::UnitDefinition* ud) : bool
	}
}


namespace semsim {
	class SBO {
		+{static} get(OntologyTerm t) : Resource
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+IdentityCondition(Resource resource)
		#resource_ : Resource
		+matchEntity(const EntityBase& entity) : bool {query}
		+matches(const Component& component) : bool {query}
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+SelectQuery(ConditionPtr&& where)
		#where_ : ConditionPtr
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+~Participant()
	}
}


namespace semsim {
	abstract class SEMSIM_PUBLIC {
		+~Condition()
		+{abstract} matches(const Component& component) : bool
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+PhysicalProperty(const Resource& resource)
		+PhysicalProperty(Resource&& resource)
		+PhysicalProperty(const std::string& resource)
		+PhysicalProperty(std::string&& resource)
		#resource_ : Resource
		+getResource() : Resource& {query}
		+getResource() : Resource&
		+humanize() : std::string {query}
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+Term(const Relation& relation, const Resource& resource)
		+Term(Relation&& relation, Resource&& resource)
		+Term(const Relation& relation, const double value)
		#relation_ : Relation
		+getRelation() : Relation& {query}
		#resource_ : Resource
		+getResource() : Resource& {query}
		+isValue() : bool {query}
		#is_value_ : bool
		+getValue() : double {query}
		#value_ : double
		+toString() : std::string {query}
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+RasqalQueryResult(rasqal_query_results* results)
		+~RasqalQueryResult()
		#results_ : rasqal_query_results*
		+toRDFString(const std::string& format) : std::string
		+toString() : std::string
		+asList() : std::vector<std::vector<std::string> >
		#toRaptorGraph(raptor_world* world, raptor_serializer* serializer) : void
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+Resource(const URI& uri)
		+Resource(URI&& uri)
		+Resource(Component* element)
		#element_ : Component*
		+getURI(const URI& base) : URI {query}
		#uri_ : URI
		+isLocal() : bool {query}
		+operator==(const Resource& other) : bool {query}
		+humanize() : std::string {query}
		+toString() : std::string {query}
	}
}


namespace semsim {
	abstract class SEMSIM_PUBLIC {
		+SemsimModel()
		+SemsimModel(const SemsimModel& other)
		+SemsimModel(SemsimModel&& other) noexcept: components_(std::move(othercomponents_))
		+~SemsimModel()
		+findComponentWithMetaId(const std::string& metaid) : Component&
		+findComponentWithMetaId(const std::string& metaid) : Component& {query}
		+addComponent(const Component& component) : Component*
		+addComponent(Component&& component) : Component*
		+getComponents() : Components& {query}
		+getComponents() : Components&
		+addComponent(const Process& component) : Process*
		+addComponent(Process&& component) : Process*
		+containsMetaId(const std::string& metaid) : bool {query}
		+hasComponentWithMetaId(const std::string& metaid) : bool {query}
		#components_ : semsim::Components
		+getNumComponents() : std::size_t {query}
		+{abstract} encodeXML() : std::string {query}
		+{abstract} getFormat() : std::string {query}
		+{abstract} getRDF(const URI& sbml_base_uri, const std::string& format) : std::string {query}
		+humanize() : std::string {query}
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+Relation(const URI& uri)
		+Relation(URI&& uri)
		#uri_ : URI
		+getURI() : URI& {query}
		+operator==(const Relation& other) : bool {query}
		+humanize() : std::string {query}
		+toString() : std::string {query}
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+RasqalQuery(const std::string& rdf, const std::string& format, bool is_file)
		+~RasqalQuery()
		+run(const std::string& query) : RasqalQueryResult
		#raptor_iostr_ : raptor_iostream*
		#base_uri_ : raptor_uri*
		#uri_ : raptor_uri*
		#raptor_world_ : raptor_world*
		#dg_ : rasqal_data_graph*
		#query_ : rasqal_query*
		#rasqal_world_ : rasqal_world*
		#rdf_ : std::string
		#uri_string_ : unsigned char*
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+{static} resolve(const std::string& root, unsigned int t, int n_digits) : Resource
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+{static} encodes : const static Relation
		+{static} hasPart : const static Relation
		+{static} hasProperty : const static Relation
		+{static} hasTaxon : const static Relation
		+{static} hasVersion : const static Relation
		+{static} is : const static Relation
		+{static} isDescribedBy : const static Relation
		+{static} isEncodedBy : const static Relation
		+{static} isHomologTo : const static Relation
		+{static} isPartOf : const static Relation
		+{static} isPropertyOf : const static Relation
		+{static} isVersionOf : const static Relation
		+{static} occursIn : const static Relation
		+{static} root : const static std::string
		+{static} humanizeQualifier(const Relation& q) : std::string
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+Component()
		+Component(const SingularAnnotation& annotation)
		+Component(SingularAnnotation&& annotation)
		+Component(const CompositeAnnotation& annotation)
		+Component(CompositeAnnotation&& annotation)
		+Component(const Component& other)
		+Component(Component&& other) noexcept: annotation_(std::move(otherannotation_))
		+~Component()
		+getAnnotation() : AnnotationBase& {query}
		+getAnnotation() : AnnotationBase&
		#annotation_ : AnnotationPtr
		+clone() : Component* {query}
		+getCompositeAnnotation() : CompositeAnnotation& {query}
		+getCompositeAnnotation() : CompositeAnnotation&
		+getURI(const URI& base) : URI {query}
		+containsMetaId(const std::string& metaid) : bool {query}
		+hasAnnotation() : bool {query}
		+hasCompositeAnnotation() : bool {query}
		+hasMetaId() : bool {query}
		+hasSingularAnnotation() : bool {query}
		+isProcess() : bool {query}
		+getRDF(const URI& sbml_base_uri, const std::string& format) : std::string {query}
		+humanize() : std::string {query}
		#metaid_ : std::string
		+getMetaId() : std::string& {query}
		+serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
		+setAnnotation(AnnotationBase* annotation) : void
		+setAnnotation(const AnnotationBase& annotation) : void
		+setAnnotation(AnnotationPtr&& annotation) : void
		+setMetaId(const std::string& metaid) : void
	}
}


namespace semsim {
	class SemSimObject {
		+SemSimObject(SemSimTypes type)
		#semsimtype : SemSimTypes
		+hasDescription() : bool {query}
		+hasMetadataID() : bool {query}
		+hasName() : bool {query}
		#description : std::string
		#metadataID : std::string
		#name : std::string
		+getDescription() : std::string& {query}
		+getMetadataID() : std::string& {query}
		+getName() : std::string& {query}
		+copyDescription(const SemSimObject& other) : void
		+setDescription(const std::string& description) : void
		+setMetadataID(const std::string& metadataID) : void
		+setName(const std::string& name) : void
	}
}


namespace semsim {
	class SingularAnnotation {
		+SingularAnnotation(const std::string& metaid, const Resource& definition)
		+SingularAnnotation(const std::string& metaid)
		+SingularAnnotation(const std::string& metaid, Resource&& definition)
		+SingularAnnotation(const SingularAnnotation& other)
		+SingularAnnotation(SingularAnnotation&& other)
		+clone() : AnnotationBase* {query}
		+makeComposite(const PhysicalProperty& prop) : AnnotationPtr {query}
		+getURI(const URI& base) : URI {query}
		+isComposite() : bool {query}
		+getRDF(const URI& sbml_base_uri, const std::string& format) : std::string {query}
		+humanize() : std::string {query}
		+getMetaId() : std::string& {query}
		+serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
	}
}


namespace semsim {
	class Sink {
		+Sink(const std::string& id, Component* component, double multiplier)
		#component_ : Component*
		+serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : URI {query}
		+containsMetaId(const std::string& metaid) : bool {query}
		#multiplier_ : double
		#id_ : std::string
	}
}


namespace semsim {
	class Source {
		+Source(const std::string& id, Component* component, double multiplier)
		#component_ : Component*
		+serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : URI {query}
		+containsMetaId(const std::string& metaid) : bool {query}
		#multiplier_ : double
		#id_ : std::string
	}
}


namespace semsim {
	class URI {
		+URI()
		+URI(const std::string& uri)
		+URI(const char* uri)
		+URI(std::string&& uri)
		+appendToFrag(const std::string& suffix) : URI {query}
		+withFrag(const std::string& suffix) : URI {query}
		+operator==(const URI& other) : bool {query}
		+encode() : std::string {query}
		#encoded_uri_ : std::string
		+toString() : std::string {query}
	}
}


namespace semsim {
	class semsim {
		+{static} hasMediatorParticipant : const static Relation
		+{static} hasMultiplier : const static Relation
		+{static} hasPhysicalEntityReference : const static Relation
		+{static} hasSBOTerm : const static Relation
		+{static} hasSinkParticipant : const static Relation
		+{static} hasSourceParticipant : const static Relation
		+{static} hasValue : const static Relation
		+{static} root : const static std::string
	}
}






namespace semsim {
	AnnotationBase <|- - CompositeAnnotation
}


namespace semsim {
	AnnotationBase <|- - SingularAnnotation
}


namespace semsim {
	EntityBase <|- - Entity
}


namespace semsim {
	EntityBase <|- - SingularAnnotation
}


namespace semsim {
	Exception <|- - NullPointerException
}






namespace semsim {
	CompositeAnnotation *- - Entity
}


namespace semsim {
	NullPointerException *- - Exception
}


namespace semsim {
	SBMLImporter *- - SemSimSBMLModel
}





@enduml

PlantUML version 1.2020.05(Thu Mar 19 21:17:32 GMT 2020)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) Client VM
Java Version: 1.8.0_241-b07
Operating System: Windows 10
Default Encoding: Cp1252
Language: en
Country: US
--></g></svg>