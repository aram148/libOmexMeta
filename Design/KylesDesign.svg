<<<<<<< HEAD
<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="2420px" preserveAspectRatio="none" style="width:5471px;height:2420px;" version="1.1" viewBox="0 0 5471 2420" width="5471px" zoomAndPan="magnify"><defs><filter height="300%" id="fd8akq6wbmov0" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[0ca42df3cbf143fe688dfeac1e0d3284]
class Accessor--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="89.5078" id="Accessor" style="stroke: #A80036; stroke-width: 1.5;" width="418" x="115.5" y="167"/><ellipse cx="294.75" cy="183" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M297.5156,178.875 Q297.6719,178.6563 297.8594,178.5469 Q298.0469,178.4375 298.2656,178.4375 Q298.6406,178.4375 298.875,178.6953 Q299.1094,178.9531 299.1094,179.5625 L299.1094,181.0156 Q299.1094,181.625 298.875,181.8906 Q298.6406,182.1563 298.2656,182.1563 Q297.9219,182.1563 297.7188,181.9531 Q297.5156,181.7656 297.4063,181.25 Q297.3594,180.8906 297.1719,180.7031 Q296.8438,180.3281 296.2344,180.1094 Q295.625,179.8906 295,179.8906 Q294.2344,179.8906 293.6016,180.2188 Q292.9688,180.5469 292.4766,181.2969 Q291.9844,182.0469 291.9844,183.0781 L291.9844,184.1719 Q291.9844,185.4063 292.875,186.2266 Q293.7656,187.0469 295.3594,187.0469 Q296.2969,187.0469 296.9531,186.7969 Q297.3438,186.6406 297.7656,186.2031 Q298.0313,185.9375 298.1797,185.8594 Q298.3281,185.7813 298.5313,185.7813 Q298.8594,185.7813 299.1172,186.0391 Q299.375,186.2969 299.375,186.6406 Q299.375,186.9844 299.0313,187.3906 Q298.5313,187.9688 297.7344,188.2969 Q296.6563,188.75 295.3594,188.75 Q293.8438,188.75 292.6406,188.125 Q291.6563,187.625 290.9688,186.5547 Q290.2813,185.4844 290.2813,184.2031 L290.2813,183.0469 Q290.2813,181.7188 290.8984,180.5703 Q291.5156,179.4219 292.6094,178.8047 Q293.7031,178.1875 294.9375,178.1875 Q295.6719,178.1875 296.3203,178.3516 Q296.9688,178.5156 297.5156,178.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="51" x="315.25" y="187.9102">Accessor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="116.5" x2="532.5" y1="199" y2="199"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="116.5" x2="532.5" y1="207" y2="207"/><ellipse cx="126.5" cy="218" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="376" x="135.5" y="222.4189">hasCompartmentWithMetaId(const std::string&amp; metaid, libsbml::Model* m) : bool</text><ellipse cx="126.5" cy="231.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="392" x="135.5" y="236.2549">findCompartment(const std::string&amp; sid, libsbml::Model* m) : libsbml::Compartment*</text><ellipse cx="126.5" cy="245.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="390" x="135.5" y="250.0908">findUnitDefinition(const std::string&amp; sid, libsbml::Model* m) : libsbml::UnitDefinition*</text><!--MD5=[faebc81c07309c527f2fda51bf6b78ab]
class Annotation--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="75.6719" id="Annotation" style="stroke: #A80036; stroke-width: 1.5;" width="286" x="568.5" y="174"/><ellipse cx="678.25" cy="190" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M681.0156,185.875 Q681.1719,185.6563 681.3594,185.5469 Q681.5469,185.4375 681.7656,185.4375 Q682.1406,185.4375 682.375,185.6953 Q682.6094,185.9531 682.6094,186.5625 L682.6094,188.0156 Q682.6094,188.625 682.375,188.8906 Q682.1406,189.1563 681.7656,189.1563 Q681.4219,189.1563 681.2188,188.9531 Q681.0156,188.7656 680.9063,188.25 Q680.8594,187.8906 680.6719,187.7031 Q680.3438,187.3281 679.7344,187.1094 Q679.125,186.8906 678.5,186.8906 Q677.7344,186.8906 677.1016,187.2188 Q676.4688,187.5469 675.9766,188.2969 Q675.4844,189.0469 675.4844,190.0781 L675.4844,191.1719 Q675.4844,192.4063 676.375,193.2266 Q677.2656,194.0469 678.8594,194.0469 Q679.7969,194.0469 680.4531,193.7969 Q680.8438,193.6406 681.2656,193.2031 Q681.5313,192.9375 681.6797,192.8594 Q681.8281,192.7813 682.0313,192.7813 Q682.3594,192.7813 682.6172,193.0391 Q682.875,193.2969 682.875,193.6406 Q682.875,193.9844 682.5313,194.3906 Q682.0313,194.9688 681.2344,195.2969 Q680.1563,195.75 678.8594,195.75 Q677.3438,195.75 676.1406,195.125 Q675.1563,194.625 674.4688,193.5547 Q673.7813,192.4844 673.7813,191.2031 L673.7813,190.0469 Q673.7813,188.7188 674.3984,187.5703 Q675.0156,186.4219 676.1094,185.8047 Q677.2031,185.1875 678.4375,185.1875 Q679.1719,185.1875 679.8203,185.3516 Q680.4688,185.5156 681.0156,185.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="58" x="698.75" y="194.9102">Annotation</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="569.5" x2="853.5" y1="206" y2="206"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="569.5" x2="853.5" y1="214" y2="214"/><ellipse cx="579.5" cy="225" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="243" x="588.5" y="229.4189">stripAnnotations(libsbml::SBMLDocument* d) : void</text><ellipse cx="579.5" cy="238.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="260" x="588.5" y="243.2549">stripAnnotationsFromElement(libsbml::SBase* x) : void</text><!--MD5=[e5e07f7a7fab01c51f4c95c19b782b9f]
class AnnotationBase--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="158.6875" id="AnnotationBase" style="stroke: #A80036; stroke-width: 1.5;" width="555" x="2101" y="132.5"/><ellipse cx="2330.75" cy="148.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2332.9375,150.2656 L2328.7969,150.2656 L2328.375,151.2969 L2328.7969,151.2969 Q2329.4063,151.2969 2329.6719,151.5313 Q2329.9375,151.7656 2329.9375,152.1563 Q2329.9375,152.5313 2329.6719,152.7656 Q2329.4063,153 2328.7969,153 L2326.5,153 Q2325.8906,153 2325.6328,152.7656 Q2325.375,152.5313 2325.375,152.1406 Q2325.375,151.7656 2325.6484,151.5234 Q2325.9219,151.2813 2326.5469,151.2969 L2329.2188,144.6406 L2328.1094,144.6406 Q2327.5,144.6406 2327.2344,144.4063 Q2326.9688,144.1719 2326.9688,143.7813 Q2326.9688,143.4063 2327.2344,143.1719 Q2327.5,142.9375 2328.1094,142.9375 L2331.7813,142.9375 L2335.1719,151.2969 Q2335.7656,151.2969 2335.9531,151.4375 Q2336.3438,151.7031 2336.3438,152.1563 Q2336.3438,152.5313 2336.0859,152.7656 Q2335.8281,153 2335.2188,153 L2332.9219,153 Q2332.3125,153 2332.0469,152.7656 Q2331.7813,152.5313 2331.7813,152.1406 Q2331.7813,151.7656 2332.0469,151.5313 Q2332.3125,151.2969 2332.9219,151.2969 L2333.3438,151.2969 L2332.9375,150.2656 Z M2332.2188,148.5625 L2330.8594,145.1875 L2329.4844,148.5625 L2332.2188,148.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="87" x="2351.25" y="153.4102">AnnotationBase</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2102" x2="2655" y1="164.5" y2="164.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2102" x2="2655" y1="172.5" y2="172.5"/><ellipse cx="2112" cy="183.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="2121" y="187.9189">~AnnotationBase()</text><ellipse cx="2112" cy="197.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="163" x="2121" y="201.7549">clone() : AnnotationBase* {query}</text><ellipse cx="2112" cy="211.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="139" x="2121" y="215.5908">isComposite() : bool {query}</text><ellipse cx="2112" cy="225.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="401" x="2121" y="229.4268">getRDF(const URI&amp; sbml_base_uri, const std::string&amp; format) : std::string {query}</text><ellipse cx="2112" cy="238.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="2121" y="243.2627">humanize() : std::string {query}</text><ellipse cx="2112" cy="252.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="159" x="2121" y="257.0986">getMetaId() : std::string&amp; {query}</text><ellipse cx="2112" cy="266.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="442" x="2121" y="270.9346">makeComposite(const PhysicalProperty&amp; prop) : std::unique_ptr&lt;AnnotationBase&gt; {query}</text><ellipse cx="2112" cy="280.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="529" x="2121" y="284.7705">serializeToRDF(const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}</text><!--MD5=[ae0223919bf1c3ee5ad2a6b785502df5]
class CHEBI--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="61.8359" id="CHEBI" style="stroke: #A80036; stroke-width: 1.5;" width="178" x="4230.5" y="628"/><ellipse cx="4296.75" cy="644" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4299.5156,639.875 Q4299.6719,639.6563 4299.8594,639.5469 Q4300.0469,639.4375 4300.2656,639.4375 Q4300.6406,639.4375 4300.875,639.6953 Q4301.1094,639.9531 4301.1094,640.5625 L4301.1094,642.0156 Q4301.1094,642.625 4300.875,642.8906 Q4300.6406,643.1563 4300.2656,643.1563 Q4299.9219,643.1563 4299.7188,642.9531 Q4299.5156,642.7656 4299.4063,642.25 Q4299.3594,641.8906 4299.1719,641.7031 Q4298.8438,641.3281 4298.2344,641.1094 Q4297.625,640.8906 4297,640.8906 Q4296.2344,640.8906 4295.6016,641.2188 Q4294.9688,641.5469 4294.4766,642.2969 Q4293.9844,643.0469 4293.9844,644.0781 L4293.9844,645.1719 Q4293.9844,646.4063 4294.875,647.2266 Q4295.7656,648.0469 4297.3594,648.0469 Q4298.2969,648.0469 4298.9531,647.7969 Q4299.3438,647.6406 4299.7656,647.2031 Q4300.0313,646.9375 4300.1797,646.8594 Q4300.3281,646.7813 4300.5313,646.7813 Q4300.8594,646.7813 4301.1172,647.0391 Q4301.375,647.2969 4301.375,647.6406 Q4301.375,647.9844 4301.0313,648.3906 Q4300.5313,648.9688 4299.7344,649.2969 Q4298.6563,649.75 4297.3594,649.75 Q4295.8438,649.75 4294.6406,649.125 Q4293.6563,648.625 4292.9688,647.5547 Q4292.2813,646.4844 4292.2813,645.2031 L4292.2813,644.0469 Q4292.2813,642.7188 4292.8984,641.5703 Q4293.5156,640.4219 4294.6094,639.8047 Q4295.7031,639.1875 4296.9375,639.1875 Q4297.6719,639.1875 4298.3203,639.3516 Q4298.9688,639.5156 4299.5156,639.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="37" x="4317.25" y="648.9102">CHEBI</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4231.5" x2="4407.5" y1="660" y2="660"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4231.5" x2="4407.5" y1="668" y2="668"/><ellipse cx="4241.5" cy="679" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="152" x="4250.5" y="683.4189">get(OntologyTerm t) : Resource</text><!--MD5=[3948de7321e8f5268222a1adac03d41c]
class CL--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="61.8359" id="CL" style="stroke: #A80036; stroke-width: 1.5;" width="178" x="4443.5" y="628"/><ellipse cx="4520.25" cy="644" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4523.0156,639.875 Q4523.1719,639.6563 4523.3594,639.5469 Q4523.5469,639.4375 4523.7656,639.4375 Q4524.1406,639.4375 4524.375,639.6953 Q4524.6094,639.9531 4524.6094,640.5625 L4524.6094,642.0156 Q4524.6094,642.625 4524.375,642.8906 Q4524.1406,643.1563 4523.7656,643.1563 Q4523.4219,643.1563 4523.2188,642.9531 Q4523.0156,642.7656 4522.9063,642.25 Q4522.8594,641.8906 4522.6719,641.7031 Q4522.3438,641.3281 4521.7344,641.1094 Q4521.125,640.8906 4520.5,640.8906 Q4519.7344,640.8906 4519.1016,641.2188 Q4518.4688,641.5469 4517.9766,642.2969 Q4517.4844,643.0469 4517.4844,644.0781 L4517.4844,645.1719 Q4517.4844,646.4063 4518.375,647.2266 Q4519.2656,648.0469 4520.8594,648.0469 Q4521.7969,648.0469 4522.4531,647.7969 Q4522.8438,647.6406 4523.2656,647.2031 Q4523.5313,646.9375 4523.6797,646.8594 Q4523.8281,646.7813 4524.0313,646.7813 Q4524.3594,646.7813 4524.6172,647.0391 Q4524.875,647.2969 4524.875,647.6406 Q4524.875,647.9844 4524.5313,648.3906 Q4524.0313,648.9688 4523.2344,649.2969 Q4522.1563,649.75 4520.8594,649.75 Q4519.3438,649.75 4518.1406,649.125 Q4517.1563,648.625 4516.4688,647.5547 Q4515.7813,646.4844 4515.7813,645.2031 L4515.7813,644.0469 Q4515.7813,642.7188 4516.3984,641.5703 Q4517.0156,640.4219 4518.1094,639.8047 Q4519.2031,639.1875 4520.4375,639.1875 Q4521.1719,639.1875 4521.8203,639.3516 Q4522.4688,639.5156 4523.0156,639.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="16" x="4540.75" y="648.9102">CL</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4444.5" x2="4620.5" y1="660" y2="660"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4444.5" x2="4620.5" y1="668" y2="668"/><ellipse cx="4454.5" cy="679" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="152" x="4463.5" y="683.4189">get(OntologyTerm t) : Resource</text><!--MD5=[4e13963c9dc916a21a8436ef39422b32]
class Component--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="463.0781" id="Component" style="stroke: #A80036; stroke-width: 1.5;" width="540" x="3427.5" y="1603"/><ellipse cx="3660.75" cy="1619" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3663.5156,1614.875 Q3663.6719,1614.6563 3663.8594,1614.5469 Q3664.0469,1614.4375 3664.2656,1614.4375 Q3664.6406,1614.4375 3664.875,1614.6953 Q3665.1094,1614.9531 3665.1094,1615.5625 L3665.1094,1617.0156 Q3665.1094,1617.625 3664.875,1617.8906 Q3664.6406,1618.1563 3664.2656,1618.1563 Q3663.9219,1618.1563 3663.7188,1617.9531 Q3663.5156,1617.7656 3663.4063,1617.25 Q3663.3594,1616.8906 3663.1719,1616.7031 Q3662.8438,1616.3281 3662.2344,1616.1094 Q3661.625,1615.8906 3661,1615.8906 Q3660.2344,1615.8906 3659.6016,1616.2188 Q3658.9688,1616.5469 3658.4766,1617.2969 Q3657.9844,1618.0469 3657.9844,1619.0781 L3657.9844,1620.1719 Q3657.9844,1621.4063 3658.875,1622.2266 Q3659.7656,1623.0469 3661.3594,1623.0469 Q3662.2969,1623.0469 3662.9531,1622.7969 Q3663.3438,1622.6406 3663.7656,1622.2031 Q3664.0313,1621.9375 3664.1797,1621.8594 Q3664.3281,1621.7813 3664.5313,1621.7813 Q3664.8594,1621.7813 3665.1172,1622.0391 Q3665.375,1622.2969 3665.375,1622.6406 Q3665.375,1622.9844 3665.0313,1623.3906 Q3664.5313,1623.9688 3663.7344,1624.2969 Q3662.6563,1624.75 3661.3594,1624.75 Q3659.8438,1624.75 3658.6406,1624.125 Q3657.6563,1623.625 3656.9688,1622.5547 Q3656.2813,1621.4844 3656.2813,1620.2031 L3656.2813,1619.0469 Q3656.2813,1617.7188 3656.8984,1616.5703 Q3657.5156,1615.4219 3658.6094,1614.8047 Q3659.7031,1614.1875 3660.9375,1614.1875 Q3661.6719,1614.1875 3662.3203,1614.3516 Q3662.9688,1614.5156 3663.5156,1614.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="65" x="3681.25" y="1623.9102">Component</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3428.5" x2="3966.5" y1="1635" y2="1635"/><polygon fill="none" points="3438.5,1641,3442.5,1645,3438.5,1649,3434.5,1645" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="3447.5" y="1650.4189">annotation_ : AnnotationPtr</text><polygon fill="none" points="3438.5,1654.8359,3442.5,1658.8359,3438.5,1662.8359,3434.5,1658.8359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="3447.5" y="1664.2549">metaid_ : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3428.5" x2="3966.5" y1="1670.6719" y2="1670.6719"/><ellipse cx="3438.5" cy="1681.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="62" x="3447.5" y="1686.0908">Component()</text><ellipse cx="3438.5" cy="1695.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="243" x="3447.5" y="1699.9268">Component(const SingularAnnotation&amp; annotation)</text><ellipse cx="3438.5" cy="1709.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="3447.5" y="1713.7627">Component(SingularAnnotation&amp;&amp; annotation)</text><ellipse cx="3438.5" cy="1723.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="3447.5" y="1727.5986">Component(const CompositeAnnotation&amp; annotation)</text><ellipse cx="3438.5" cy="1737.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="3447.5" y="1741.4346">Component(CompositeAnnotation&amp;&amp; annotation)</text><ellipse cx="3438.5" cy="1750.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="3447.5" y="1755.2705">Component(const Component&amp; other)</text><ellipse cx="3438.5" cy="1764.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="412" x="3447.5" y="1769.1064">Component(Component&amp;&amp; other) noexcept: annotation_(std::move(otherannotation_))</text><ellipse cx="3438.5" cy="1778.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="3447.5" y="1782.9424">~Component()</text><ellipse cx="3438.5" cy="1792.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="3447.5" y="1796.7783">getAnnotation() : AnnotationBase&amp; {query}</text><ellipse cx="3438.5" cy="1806.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="3447.5" y="1810.6143">getAnnotation() : AnnotationBase&amp;</text><ellipse cx="3438.5" cy="1820.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="3447.5" y="1824.4502">clone() : Component* {query}</text><ellipse cx="3438.5" cy="1833.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="3447.5" y="1838.2861">getCompositeAnnotation() : CompositeAnnotation&amp; {query}</text><ellipse cx="3438.5" cy="1847.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="243" x="3447.5" y="1852.1221">getCompositeAnnotation() : CompositeAnnotation&amp;</text><ellipse cx="3438.5" cy="1861.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="3447.5" y="1865.958">getURI(const URI&amp; base) : URI {query}</text><ellipse cx="3438.5" cy="1875.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="3447.5" y="1879.7939">containsMetaId(const std::string&amp; metaid) : bool {query}</text><ellipse cx="3438.5" cy="1889.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="3447.5" y="1893.6299">hasAnnotation() : bool {query}</text><ellipse cx="3438.5" cy="1903.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="3447.5" y="1907.4658">hasCompositeAnnotation() : bool {query}</text><ellipse cx="3438.5" cy="1916.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="3447.5" y="1921.3018">hasMetaId() : bool {query}</text><ellipse cx="3438.5" cy="1930.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="3447.5" y="1935.1377">hasSingularAnnotation() : bool {query}</text><ellipse cx="3438.5" cy="1944.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="3447.5" y="1948.9736">isProcess() : bool {query}</text><ellipse cx="3438.5" cy="1958.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="390" x="3447.5" y="1962.8096">getRDF(const URI&amp; sbml_base_uri, const std::string&amp; format) : std::string {query}</text><ellipse cx="3438.5" cy="1972.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="3447.5" y="1976.6455">humanize() : std::string {query}</text><ellipse cx="3438.5" cy="1986.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="3447.5" y="1990.4814">getMetaId() : std::string&amp; {query}</text><ellipse cx="3438.5" cy="1999.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="514" x="3447.5" y="2004.3174">serializeToRDF(const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}</text><ellipse cx="3438.5" cy="2013.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="3447.5" y="2018.1533">setAnnotation(AnnotationBase* annotation) : void</text><ellipse cx="3438.5" cy="2027.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="3447.5" y="2031.9893">setAnnotation(const AnnotationBase&amp; annotation) : void</text><ellipse cx="3438.5" cy="2041.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="3447.5" y="2045.8252">setAnnotation(AnnotationPtr&amp;&amp; annotation) : void</text><ellipse cx="3438.5" cy="2055.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="3447.5" y="2059.6611">setMetaId(const std::string&amp; metaid) : void</text><!--MD5=[bd5a7c6ba0e5b7af461c7d0f99591f68]
class CompositeAnnotation--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="338.5547" id="CompositeAnnotation" style="stroke: #A80036; stroke-width: 1.5;" width="621" x="1946" y="489.5"/><ellipse cx="2192.75" cy="505.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2195.5156,501.375 Q2195.6719,501.1563 2195.8594,501.0469 Q2196.0469,500.9375 2196.2656,500.9375 Q2196.6406,500.9375 2196.875,501.1953 Q2197.1094,501.4531 2197.1094,502.0625 L2197.1094,503.5156 Q2197.1094,504.125 2196.875,504.3906 Q2196.6406,504.6563 2196.2656,504.6563 Q2195.9219,504.6563 2195.7188,504.4531 Q2195.5156,504.2656 2195.4063,503.75 Q2195.3594,503.3906 2195.1719,503.2031 Q2194.8438,502.8281 2194.2344,502.6094 Q2193.625,502.3906 2193,502.3906 Q2192.2344,502.3906 2191.6016,502.7188 Q2190.9688,503.0469 2190.4766,503.7969 Q2189.9844,504.5469 2189.9844,505.5781 L2189.9844,506.6719 Q2189.9844,507.9063 2190.875,508.7266 Q2191.7656,509.5469 2193.3594,509.5469 Q2194.2969,509.5469 2194.9531,509.2969 Q2195.3438,509.1406 2195.7656,508.7031 Q2196.0313,508.4375 2196.1797,508.3594 Q2196.3281,508.2813 2196.5313,508.2813 Q2196.8594,508.2813 2197.1172,508.5391 Q2197.375,508.7969 2197.375,509.1406 Q2197.375,509.4844 2197.0313,509.8906 Q2196.5313,510.4688 2195.7344,510.7969 Q2194.6563,511.25 2193.3594,511.25 Q2191.8438,511.25 2190.6406,510.625 Q2189.6563,510.125 2188.9688,509.0547 Q2188.2813,507.9844 2188.2813,506.7031 L2188.2813,505.5469 Q2188.2813,504.2188 2188.8984,503.0703 Q2189.5156,501.9219 2190.6094,501.3047 Q2191.7031,500.6875 2192.9375,500.6875 Q2193.6719,500.6875 2194.3203,500.8516 Q2194.9688,501.0156 2195.5156,501.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="119" x="2213.25" y="510.4102">CompositeAnnotation</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1947" x2="2566" y1="521.5" y2="521.5"/><polygon fill="none" points="1957,527.5,1961,531.5,1957,535.5,1953,531.5" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="1966" y="536.9189">entity_ : Entity</text><polygon fill="none" points="1957,541.3359,1961,545.3359,1957,549.3359,1953,545.3359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="1966" y="550.7549">property_ : PhysicalProperty</text><polygon fill="none" points="1957,555.1719,1961,559.1719,1957,563.1719,1953,559.1719" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="1966" y="564.5908">metaid_ : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1947" x2="2566" y1="571.0078" y2="571.0078"/><ellipse cx="1957" cy="582.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="495" x="1966" y="586.4268">CompositeAnnotation(const std::string&amp; metaid, const PhysicalProperty&amp; property, const Entity&amp; entity)</text><ellipse cx="1957" cy="595.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="449" x="1966" y="600.2627">CompositeAnnotation(const std::string&amp; metaid, PhysicalProperty&amp;&amp; property, Entity&amp;&amp; entity)</text><ellipse cx="1957" cy="609.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="1966" y="614.0986">CompositeAnnotation(const CompositeAnnotation&amp; other)</text><ellipse cx="1957" cy="623.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="1966" y="627.9346">CompositeAnnotation(CompositeAnnotation&amp;&amp; other)</text><ellipse cx="1957" cy="637.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="434" x="1966" y="641.7705">CompositeAnnotation(const SingularAnnotation&amp; other, const PhysicalProperty&amp; property)</text><ellipse cx="1957" cy="651.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="1966" y="655.6064">clone() : AnnotationBase* {query}</text><ellipse cx="1957" cy="665.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="339" x="1966" y="669.4424">makeComposite(const PhysicalProperty&amp; prop) : AnnotationPtr {query}</text><ellipse cx="1957" cy="678.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="1966" y="683.2783">getEntity() : Entity&amp; {query}</text><ellipse cx="1957" cy="692.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="1966" y="697.1143">getEntity() : Entity&amp;</text><ellipse cx="1957" cy="706.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="1966" y="710.9502">isComposite() : bool {query}</text><ellipse cx="1957" cy="720.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="1966" y="724.7861">isEntityEmpty() : bool {query}</text><ellipse cx="1957" cy="734.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="390" x="1966" y="738.6221">getRDF(const URI&amp; sbml_base_uri, const std::string&amp; format) : std::string {query}</text><ellipse cx="1957" cy="748.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="1966" y="752.458">humanize() : std::string {query}</text><ellipse cx="1957" cy="761.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="1966" y="766.2939">getMetaId() : std::string&amp; {query}</text><ellipse cx="1957" cy="775.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="329" x="1966" y="780.1299">addTerm(const Relation&amp; relation, const Resource&amp; resource) : void</text><polygon fill="#FFFF44" points="1957,784.5469,1961,788.5469,1957,792.5469,1953,788.5469" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="595" x="1966" y="793.9658">serializePhysicalPropertyToRDF(const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}</text><ellipse cx="1957" cy="803.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="514" x="1966" y="807.8018">serializeToRDF(const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}</text><ellipse cx="1957" cy="817.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="1966" y="821.6377">setMetaId(const std::string&amp; metaid) : void</text><!--MD5=[a030fa97ffb865708cae79f6847e8968]
class Condition--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="75.6719" id="Condition" style="stroke: #A80036; stroke-width: 1.5;" width="257" x="890" y="174"/><ellipse cx="987.75" cy="190" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M989.9375,191.7656 L985.7969,191.7656 L985.375,192.7969 L985.7969,192.7969 Q986.4063,192.7969 986.6719,193.0313 Q986.9375,193.2656 986.9375,193.6563 Q986.9375,194.0313 986.6719,194.2656 Q986.4063,194.5 985.7969,194.5 L983.5,194.5 Q982.8906,194.5 982.6328,194.2656 Q982.375,194.0313 982.375,193.6406 Q982.375,193.2656 982.6484,193.0234 Q982.9219,192.7813 983.5469,192.7969 L986.2188,186.1406 L985.1094,186.1406 Q984.5,186.1406 984.2344,185.9063 Q983.9688,185.6719 983.9688,185.2813 Q983.9688,184.9063 984.2344,184.6719 Q984.5,184.4375 985.1094,184.4375 L988.7813,184.4375 L992.1719,192.7969 Q992.7656,192.7969 992.9531,192.9375 Q993.3438,193.2031 993.3438,193.6563 Q993.3438,194.0313 993.0859,194.2656 Q992.8281,194.5 992.2188,194.5 L989.9219,194.5 Q989.3125,194.5 989.0469,194.2656 Q988.7813,194.0313 988.7813,193.6406 Q988.7813,193.2656 989.0469,193.0313 Q989.3125,192.7969 989.9219,192.7969 L990.3438,192.7969 L989.9375,191.7656 Z M989.2188,190.0625 L987.8594,186.6875 L986.4844,190.0625 L989.2188,190.0625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="53" x="1008.25" y="194.9102">Condition</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="891" x2="1146" y1="206" y2="206"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="891" x2="1146" y1="214" y2="214"/><ellipse cx="901" cy="225" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="58" x="910" y="229.4189">~Condition()</text><ellipse cx="901" cy="238.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="231" x="910" y="243.2549">matches(const Component&amp; component) : bool</text><!--MD5=[7d86464a0a1bda95260c25fea9f5faaa]
class DescriptorTerm--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="75.6719" id="DescriptorTerm" style="stroke: #A80036; stroke-width: 1.5;" width="358" x="4667.5" y="1377"/><ellipse cx="4799.25" cy="1393" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4802.0156,1388.875 Q4802.1719,1388.6563 4802.3594,1388.5469 Q4802.5469,1388.4375 4802.7656,1388.4375 Q4803.1406,1388.4375 4803.375,1388.6953 Q4803.6094,1388.9531 4803.6094,1389.5625 L4803.6094,1391.0156 Q4803.6094,1391.625 4803.375,1391.8906 Q4803.1406,1392.1563 4802.7656,1392.1563 Q4802.4219,1392.1563 4802.2188,1391.9531 Q4802.0156,1391.7656 4801.9063,1391.25 Q4801.8594,1390.8906 4801.6719,1390.7031 Q4801.3438,1390.3281 4800.7344,1390.1094 Q4800.125,1389.8906 4799.5,1389.8906 Q4798.7344,1389.8906 4798.1016,1390.2188 Q4797.4688,1390.5469 4796.9766,1391.2969 Q4796.4844,1392.0469 4796.4844,1393.0781 L4796.4844,1394.1719 Q4796.4844,1395.4063 4797.375,1396.2266 Q4798.2656,1397.0469 4799.8594,1397.0469 Q4800.7969,1397.0469 4801.4531,1396.7969 Q4801.8438,1396.6406 4802.2656,1396.2031 Q4802.5313,1395.9375 4802.6797,1395.8594 Q4802.8281,1395.7813 4803.0313,1395.7813 Q4803.3594,1395.7813 4803.6172,1396.0391 Q4803.875,1396.2969 4803.875,1396.6406 Q4803.875,1396.9844 4803.5313,1397.3906 Q4803.0313,1397.9688 4802.2344,1398.2969 Q4801.1563,1398.75 4799.8594,1398.75 Q4798.3438,1398.75 4797.1406,1398.125 Q4796.1563,1397.625 4795.4688,1396.5547 Q4794.7813,1395.4844 4794.7813,1394.2031 L4794.7813,1393.0469 Q4794.7813,1391.7188 4795.3984,1390.5703 Q4796.0156,1389.4219 4797.1094,1388.8047 Q4798.2031,1388.1875 4799.4375,1388.1875 Q4800.1719,1388.1875 4800.8203,1388.3516 Q4801.4688,1388.5156 4802.0156,1388.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="86" x="4819.75" y="1397.9102">DescriptorTerm</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4668.5" x2="5024.5" y1="1409" y2="1409"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4668.5" x2="5024.5" y1="1417" y2="1417"/><ellipse cx="4678.5" cy="1428" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="4687.5" y="1432.4189">DescriptorTerm(const Relation&amp; relation, const Resource&amp; resource)</text><ellipse cx="4678.5" cy="1441.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="4687.5" y="1446.2549">DescriptorTerm(Relation&amp;&amp; relation, Resource&amp;&amp; resource)</text><!--MD5=[be996cdb8e6bf2fc7cb89c555f2cd144]
class Entity--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="310.8828" id="Entity" style="stroke: #A80036; stroke-width: 1.5;" width="540" x="2091.5" y="909"/><ellipse cx="2342.75" cy="925" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2345.5156,920.875 Q2345.6719,920.6563 2345.8594,920.5469 Q2346.0469,920.4375 2346.2656,920.4375 Q2346.6406,920.4375 2346.875,920.6953 Q2347.1094,920.9531 2347.1094,921.5625 L2347.1094,923.0156 Q2347.1094,923.625 2346.875,923.8906 Q2346.6406,924.1563 2346.2656,924.1563 Q2345.9219,924.1563 2345.7188,923.9531 Q2345.5156,923.7656 2345.4063,923.25 Q2345.3594,922.8906 2345.1719,922.7031 Q2344.8438,922.3281 2344.2344,922.1094 Q2343.625,921.8906 2343,921.8906 Q2342.2344,921.8906 2341.6016,922.2188 Q2340.9688,922.5469 2340.4766,923.2969 Q2339.9844,924.0469 2339.9844,925.0781 L2339.9844,926.1719 Q2339.9844,927.4063 2340.875,928.2266 Q2341.7656,929.0469 2343.3594,929.0469 Q2344.2969,929.0469 2344.9531,928.7969 Q2345.3438,928.6406 2345.7656,928.2031 Q2346.0313,927.9375 2346.1797,927.8594 Q2346.3281,927.7813 2346.5313,927.7813 Q2346.8594,927.7813 2347.1172,928.0391 Q2347.375,928.2969 2347.375,928.6406 Q2347.375,928.9844 2347.0313,929.3906 Q2346.5313,929.9688 2345.7344,930.2969 Q2344.6563,930.75 2343.3594,930.75 Q2341.8438,930.75 2340.6406,930.125 Q2339.6563,929.625 2338.9688,928.5547 Q2338.2813,927.4844 2338.2813,926.2031 L2338.2813,925.0469 Q2338.2813,923.7188 2338.8984,922.5703 Q2339.5156,921.4219 2340.6094,920.8047 Q2341.7031,920.1875 2342.9375,920.1875 Q2343.6719,920.1875 2344.3203,920.3516 Q2344.9688,920.5156 2345.5156,920.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="29" x="2363.25" y="929.9102">Entity</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2092.5" x2="2630.5" y1="941" y2="941"/><polygon fill="none" points="2102.5,947,2106.5,951,2102.5,955,2098.5,951" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="2111.5" y="956.4189">descriptors_ : Descriptors</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2092.5" x2="2630.5" y1="962.8359" y2="962.8359"/><ellipse cx="2102.5" cy="973.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="2111.5" y="978.2549">Entity(const std::string&amp; metaid)</text><ellipse cx="2102.5" cy="987.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="2111.5" y="992.0908">Entity(const std::string&amp; metaid, const Resource&amp; definition)</text><ellipse cx="2102.5" cy="1001.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="417" x="2111.5" y="1005.9268">Entity(const std::string&amp; metaid, const Resource&amp; definition, const EntityDescriptor&amp; d)</text><ellipse cx="2102.5" cy="1015.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="2111.5" y="1019.7627">Entity(const std::string&amp; metaid, Resource&amp;&amp; definition, EntityDescriptor&amp;&amp; d)</text><ellipse cx="2102.5" cy="1029.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="2111.5" y="1033.5986">Entity(const SingularAnnotation&amp; annotation)</text><ellipse cx="2102.5" cy="1043.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="2111.5" y="1047.4346">Entity(const Entity&amp; other)</text><ellipse cx="2102.5" cy="1056.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="2111.5" y="1061.2705">Entity(Entity&amp;&amp; other)</text><ellipse cx="2102.5" cy="1070.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="2111.5" y="1075.1064">descriptors_() : ) ,</text><ellipse cx="2102.5" cy="1084.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="2111.5" y="1088.9424">getDescriptors() : Descriptors&amp; {query}</text><ellipse cx="2102.5" cy="1098.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="2111.5" y="1102.7783">getDescriptors() : Descriptors&amp;</text><ellipse cx="2102.5" cy="1112.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="2111.5" y="1116.6143">getDescriptor(std::size_t k) : EntityDescriptor&amp; {query}</text><ellipse cx="2102.5" cy="1126.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="2111.5" y="1130.4502">getDescriptor(std::size_t k) : EntityDescriptor&amp;</text><ellipse cx="2102.5" cy="1139.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="2111.5" y="1144.2861">getNumDescriptors() : std::size_t {query}</text><ellipse cx="2102.5" cy="1153.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="2111.5" y="1158.1221">humanize() : std::string {query}</text><polygon fill="#FFFF44" points="2102.5,1162.5391,2106.5,1166.5391,2102.5,1170.5391,2098.5,1166.5391" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="2111.5" y="1171.958">humanizeDescriptors() : std::string {query}</text><ellipse cx="2102.5" cy="1181.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="2111.5" y="1185.7939">addDescriptor(const EntityDescriptor&amp; d) : void</text><ellipse cx="2102.5" cy="1195.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="2111.5" y="1199.6299">addDescriptor(EntityDescriptor&amp;&amp; d) : void</text><ellipse cx="2102.5" cy="1209.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="514" x="2111.5" y="1213.4658">serializeToRDF(const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}</text><!--MD5=[bdacc2652c53199c71303dc7f1a102c8]
class EntityBase--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="407.7344" id="EntityBase" style="stroke: #A80036; stroke-width: 1.5;" width="661" x="2839" y="8"/><ellipse cx="3136.25" cy="24" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3139.0156,19.875 Q3139.1719,19.6563 3139.3594,19.5469 Q3139.5469,19.4375 3139.7656,19.4375 Q3140.1406,19.4375 3140.375,19.6953 Q3140.6094,19.9531 3140.6094,20.5625 L3140.6094,22.0156 Q3140.6094,22.625 3140.375,22.8906 Q3140.1406,23.1563 3139.7656,23.1563 Q3139.4219,23.1563 3139.2188,22.9531 Q3139.0156,22.7656 3138.9063,22.25 Q3138.8594,21.8906 3138.6719,21.7031 Q3138.3438,21.3281 3137.7344,21.1094 Q3137.125,20.8906 3136.5,20.8906 Q3135.7344,20.8906 3135.1016,21.2188 Q3134.4688,21.5469 3133.9766,22.2969 Q3133.4844,23.0469 3133.4844,24.0781 L3133.4844,25.1719 Q3133.4844,26.4063 3134.375,27.2266 Q3135.2656,28.0469 3136.8594,28.0469 Q3137.7969,28.0469 3138.4531,27.7969 Q3138.8438,27.6406 3139.2656,27.2031 Q3139.5313,26.9375 3139.6797,26.8594 Q3139.8281,26.7813 3140.0313,26.7813 Q3140.3594,26.7813 3140.6172,27.0391 Q3140.875,27.2969 3140.875,27.6406 Q3140.875,27.9844 3140.5313,28.3906 Q3140.0313,28.9688 3139.2344,29.2969 Q3138.1563,29.75 3136.8594,29.75 Q3135.3438,29.75 3134.1406,29.125 Q3133.1563,28.625 3132.4688,27.5547 Q3131.7813,26.4844 3131.7813,25.2031 L3131.7813,24.0469 Q3131.7813,22.7188 3132.3984,21.5703 Q3133.0156,20.4219 3134.1094,19.8047 Q3135.2031,19.1875 3136.4375,19.1875 Q3137.1719,19.1875 3137.8203,19.3516 Q3138.4688,19.5156 3139.0156,19.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="58" x="3156.75" y="28.9102">EntityBase</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2840" x2="3499" y1="40" y2="40"/><polygon fill="none" points="2850,46,2854,50,2850,54,2846,50" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="2859" y="55.4189">definitions_ : Definitions</text><polygon fill="none" points="2850,59.8359,2854,63.8359,2850,67.8359,2846,63.8359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="2859" y="69.2549">terms_ : Terms</text><polygon fill="none" points="2850,73.6719,2854,77.6719,2850,81.6719,2846,77.6719" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="2859" y="83.0908">metaid_ : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2840" x2="3499" y1="89.5078" y2="89.5078"/><ellipse cx="2850" cy="100.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="2859" y="104.9268">EntityBase(const std::string&amp; metaid, const Resource&amp; definition)</text><ellipse cx="2850" cy="114.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="2859" y="118.7627">EntityBase(EntityBase&amp;&amp; other)</text><ellipse cx="2850" cy="128.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="2859" y="132.5986">EntityBase(const std::string&amp; metaid, Resource&amp;&amp; definition)</text><ellipse cx="2850" cy="142.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="2859" y="146.4346">EntityBase(const std::string&amp; metaid)</text><ellipse cx="2850" cy="155.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="175" x="2859" y="160.2705">EntityBase(const EntityBase&amp; other)</text><ellipse cx="2850" cy="169.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="2859" y="174.1064">getDefinitions() : Definitions&amp; {query}</text><ellipse cx="2850" cy="183.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="2859" y="187.9424">getDefinitions() : Definitions&amp;</text><ellipse cx="2850" cy="197.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="2859" y="201.7783">getDefinition(std::size_t k) : Resource&amp; {query}</text><ellipse cx="2850" cy="211.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="2859" y="215.6143">getURI(const URI&amp; base) : URI {query}</text><ellipse cx="2850" cy="225.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="2859" y="229.4502">isEmpty() : bool {query}</text><ellipse cx="2850" cy="238.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="2859" y="243.2861">matchesDefinition(const Resource&amp; definition) : bool</text><ellipse cx="2850" cy="252.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="2859" y="257.1221">getNumDefinitions() : std::size_t {query}</text><ellipse cx="2850" cy="266.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="2859" y="270.958">humanize() : std::string {query}</text><polygon fill="#FFFF44" points="2850,275.375,2854,279.375,2850,283.375,2846,279.375" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="2859" y="284.7939">humanizeDefintions() : std::string {query}</text><ellipse cx="2850" cy="294.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="2859" y="298.6299">toString(std::size_t indent) : std::string {query}</text><ellipse cx="2850" cy="308.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="2859" y="312.4658">getMetaId() : std::string&amp; {query}</text><ellipse cx="2850" cy="321.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="2859" y="326.3018">addDefinition(const Resource&amp; definition) : void</text><ellipse cx="2850" cy="335.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="2859" y="340.1377">addExtraneousTerm(const Term&amp; term) : void</text><ellipse cx="2850" cy="349.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="2859" y="353.9736">addExtraneousTerm(Term&amp;&amp; term) : void</text><polygon fill="#FFFF44" points="2850,358.3906,2854,362.3906,2850,366.3906,2846,362.3906" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="635" x="2859" y="367.8096">serializeDefinition(const Resource&amp; def, const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}</text><polygon fill="#FFFF44" points="2850,372.2266,2854,376.2266,2850,380.2266,2846,376.2266" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="597" x="2859" y="381.6455">serializeTerm(const Term&amp; term, const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}</text><ellipse cx="2850" cy="391.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="514" x="2859" y="395.4814">serializeToRDF(const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}</text><ellipse cx="2850" cy="404.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="2859" y="409.3174">setMetaId(const std::string&amp; metaid) : void</text><!--MD5=[faa379dbabf9aa2d3546fa21585cf3cf]
class EntityDescriptor--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="227.8672" id="EntityDescriptor" style="stroke: #A80036; stroke-width: 1.5;" width="831" x="1182" y="98"/><ellipse cx="1550.25" cy="114" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1553.0156,109.875 Q1553.1719,109.6563 1553.3594,109.5469 Q1553.5469,109.4375 1553.7656,109.4375 Q1554.1406,109.4375 1554.375,109.6953 Q1554.6094,109.9531 1554.6094,110.5625 L1554.6094,112.0156 Q1554.6094,112.625 1554.375,112.8906 Q1554.1406,113.1563 1553.7656,113.1563 Q1553.4219,113.1563 1553.2188,112.9531 Q1553.0156,112.7656 1552.9063,112.25 Q1552.8594,111.8906 1552.6719,111.7031 Q1552.3438,111.3281 1551.7344,111.1094 Q1551.125,110.8906 1550.5,110.8906 Q1549.7344,110.8906 1549.1016,111.2188 Q1548.4688,111.5469 1547.9766,112.2969 Q1547.4844,113.0469 1547.4844,114.0781 L1547.4844,115.1719 Q1547.4844,116.4063 1548.375,117.2266 Q1549.2656,118.0469 1550.8594,118.0469 Q1551.7969,118.0469 1552.4531,117.7969 Q1552.8438,117.6406 1553.2656,117.2031 Q1553.5313,116.9375 1553.6797,116.8594 Q1553.8281,116.7813 1554.0313,116.7813 Q1554.3594,116.7813 1554.6172,117.0391 Q1554.875,117.2969 1554.875,117.6406 Q1554.875,117.9844 1554.5313,118.3906 Q1554.0313,118.9688 1553.2344,119.2969 Q1552.1563,119.75 1550.8594,119.75 Q1549.3438,119.75 1548.1406,119.125 Q1547.1563,118.625 1546.4688,117.5547 Q1545.7813,116.4844 1545.7813,115.2031 L1545.7813,114.0469 Q1545.7813,112.7188 1546.3984,111.5703 Q1547.0156,110.4219 1548.1094,109.8047 Q1549.2031,109.1875 1550.4375,109.1875 Q1551.1719,109.1875 1551.8203,109.3516 Q1552.4688,109.5156 1553.0156,109.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="86" x="1570.75" y="118.9102">EntityDescriptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1183" x2="2012" y1="130" y2="130"/><polygon fill="none" points="1193,136,1197,140,1193,144,1189,140" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="1202" y="145.4189">terms_ : DescriptorTerms</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1183" x2="2012" y1="151.8359" y2="151.8359"/><ellipse cx="1193" cy="162.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="1202" y="167.2549">EntityDescriptor()</text><ellipse cx="1193" cy="176.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="1202" y="181.0908">EntityDescriptor(const EntityDescriptor&amp; other)</text><ellipse cx="1193" cy="190.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="1202" y="194.9268">EntityDescriptor(EntityDescriptor&amp;&amp; other)</text><ellipse cx="1193" cy="204.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="1202" y="208.7627">EntityDescriptor(std::initializer_list&lt;T&gt; l)</text><ellipse cx="1193" cy="218.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="1202" y="222.5986">isEmpty() : bool {query}</text><ellipse cx="1193" cy="232.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="1202" y="236.4346">humanize() : std::string {query}</text><polygon fill="#FFFF44" points="1193,240.8516,1197,244.8516,1193,248.8516,1189,244.8516" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="1202" y="250.2705">humanizeTerms() : std::string {query}</text><ellipse cx="1193" cy="259.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="1202" y="264.1064">addTerm(const DescriptorTerm&amp; t) : void</text><ellipse cx="1193" cy="273.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="1202" y="277.9424">addTerm(DescriptorTerm&amp;&amp; t) : void</text><ellipse cx="1193" cy="287.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="329" x="1202" y="291.7783">addTerm(const Relation&amp; relation, const Resource&amp; resource) : void</text><polygon fill="#FFFF44" points="1193,296.1953,1197,300.1953,1193,304.1953,1189,300.1953" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="805" x="1202" y="305.6143">serializeDescriptorTermToRDF(const DescriptorTerm&amp; term, const URI&amp; linked_uri, const URI&amp; term_uri, raptor_world* world, raptor_serializer* serializer) : void {query}</text><ellipse cx="1193" cy="315.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="639" x="1202" y="319.4502">serializeToRDF(const URI&amp; sbml_base_uri, const std::string&amp; metaid, raptor_world* world, raptor_serializer* serializer) : void {query}</text><!--MD5=[8db60afef7a3447bbe27c5ed187fdac2]
class Exception--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="117.1797" id="Exception" style="stroke: #A80036; stroke-width: 1.5;" width="184" x="5276.5" y="153.5"/><ellipse cx="5337.75" cy="169.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5340.5156,165.375 Q5340.6719,165.1563 5340.8594,165.0469 Q5341.0469,164.9375 5341.2656,164.9375 Q5341.6406,164.9375 5341.875,165.1953 Q5342.1094,165.4531 5342.1094,166.0625 L5342.1094,167.5156 Q5342.1094,168.125 5341.875,168.3906 Q5341.6406,168.6563 5341.2656,168.6563 Q5340.9219,168.6563 5340.7188,168.4531 Q5340.5156,168.2656 5340.4063,167.75 Q5340.3594,167.3906 5340.1719,167.2031 Q5339.8438,166.8281 5339.2344,166.6094 Q5338.625,166.3906 5338,166.3906 Q5337.2344,166.3906 5336.6016,166.7188 Q5335.9688,167.0469 5335.4766,167.7969 Q5334.9844,168.5469 5334.9844,169.5781 L5334.9844,170.6719 Q5334.9844,171.9063 5335.875,172.7266 Q5336.7656,173.5469 5338.3594,173.5469 Q5339.2969,173.5469 5339.9531,173.2969 Q5340.3438,173.1406 5340.7656,172.7031 Q5341.0313,172.4375 5341.1797,172.3594 Q5341.3281,172.2813 5341.5313,172.2813 Q5341.8594,172.2813 5342.1172,172.5391 Q5342.375,172.7969 5342.375,173.1406 Q5342.375,173.4844 5342.0313,173.8906 Q5341.5313,174.4688 5340.7344,174.7969 Q5339.6563,175.25 5338.3594,175.25 Q5336.8438,175.25 5335.6406,174.625 Q5334.6563,174.125 5333.9688,173.0547 Q5333.2813,171.9844 5333.2813,170.7031 L5333.2813,169.5469 Q5333.2813,168.2188 5333.8984,167.0703 Q5334.5156,165.9219 5335.6094,165.3047 Q5336.7031,164.6875 5337.9375,164.6875 Q5338.6719,164.6875 5339.3203,164.8516 Q5339.9688,165.0156 5340.5156,165.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="53" x="5358.25" y="174.4102">Exception</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5277.5" x2="5459.5" y1="185.5" y2="185.5"/><polygon fill="none" points="5287.5,191.5,5291.5,195.5,5287.5,199.5,5283.5,195.5" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="5296.5" y="200.9189">msg_ : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5277.5" x2="5459.5" y1="207.3359" y2="207.3359"/><ellipse cx="5287.5" cy="218.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="5296.5" y="222.7549">Exception(const char* message)</text><ellipse cx="5287.5" cy="232.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="5296.5" y="236.5908">Exception(std::string message)</text><ellipse cx="5287.5" cy="246.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="5296.5" y="250.4268">~Exception()</text><ellipse cx="5287.5" cy="259.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="5296.5" y="264.2627">what() : char* {query}</text><!--MD5=[c1b55a6c1c0448f9de9d288039cce202]
class GO--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="61.8359" id="GO" style="stroke: #A80036; stroke-width: 1.5;" width="178" x="4656.5" y="628"/><ellipse cx="4732.25" cy="644" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4735.0156,639.875 Q4735.1719,639.6563 4735.3594,639.5469 Q4735.5469,639.4375 4735.7656,639.4375 Q4736.1406,639.4375 4736.375,639.6953 Q4736.6094,639.9531 4736.6094,640.5625 L4736.6094,642.0156 Q4736.6094,642.625 4736.375,642.8906 Q4736.1406,643.1563 4735.7656,643.1563 Q4735.4219,643.1563 4735.2188,642.9531 Q4735.0156,642.7656 4734.9063,642.25 Q4734.8594,641.8906 4734.6719,641.7031 Q4734.3438,641.3281 4733.7344,641.1094 Q4733.125,640.8906 4732.5,640.8906 Q4731.7344,640.8906 4731.1016,641.2188 Q4730.4688,641.5469 4729.9766,642.2969 Q4729.4844,643.0469 4729.4844,644.0781 L4729.4844,645.1719 Q4729.4844,646.4063 4730.375,647.2266 Q4731.2656,648.0469 4732.8594,648.0469 Q4733.7969,648.0469 4734.4531,647.7969 Q4734.8438,647.6406 4735.2656,647.2031 Q4735.5313,646.9375 4735.6797,646.8594 Q4735.8281,646.7813 4736.0313,646.7813 Q4736.3594,646.7813 4736.6172,647.0391 Q4736.875,647.2969 4736.875,647.6406 Q4736.875,647.9844 4736.5313,648.3906 Q4736.0313,648.9688 4735.2344,649.2969 Q4734.1563,649.75 4732.8594,649.75 Q4731.3438,649.75 4730.1406,649.125 Q4729.1563,648.625 4728.4688,647.5547 Q4727.7813,646.4844 4727.7813,645.2031 L4727.7813,644.0469 Q4727.7813,642.7188 4728.3984,641.5703 Q4729.0156,640.4219 4730.1094,639.8047 Q4731.2031,639.1875 4732.4375,639.1875 Q4733.1719,639.1875 4733.8203,639.3516 Q4734.4688,639.5156 4735.0156,639.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="18" x="4752.75" y="648.9102">GO</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4657.5" x2="4833.5" y1="660" y2="660"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4657.5" x2="4833.5" y1="668" y2="668"/><ellipse cx="4667.5" cy="679" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="152" x="4676.5" y="683.4189">get(OntologyTerm t) : Resource</text><!--MD5=[76def25b7d19aba76f9d5a602beb53d2]
class IdentityCondition--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="103.3438" id="IdentityCondition" style="stroke: #A80036; stroke-width: 1.5;" width="290" x="4088.5" y="1013"/><ellipse cx="4183.75" cy="1029" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4186.5156,1024.875 Q4186.6719,1024.6563 4186.8594,1024.5469 Q4187.0469,1024.4375 4187.2656,1024.4375 Q4187.6406,1024.4375 4187.875,1024.6953 Q4188.1094,1024.9531 4188.1094,1025.5625 L4188.1094,1027.0156 Q4188.1094,1027.625 4187.875,1027.8906 Q4187.6406,1028.1563 4187.2656,1028.1563 Q4186.9219,1028.1563 4186.7188,1027.9531 Q4186.5156,1027.7656 4186.4063,1027.25 Q4186.3594,1026.8906 4186.1719,1026.7031 Q4185.8438,1026.3281 4185.2344,1026.1094 Q4184.625,1025.8906 4184,1025.8906 Q4183.2344,1025.8906 4182.6016,1026.2188 Q4181.9688,1026.5469 4181.4766,1027.2969 Q4180.9844,1028.0469 4180.9844,1029.0781 L4180.9844,1030.1719 Q4180.9844,1031.4063 4181.875,1032.2266 Q4182.7656,1033.0469 4184.3594,1033.0469 Q4185.2969,1033.0469 4185.9531,1032.7969 Q4186.3438,1032.6406 4186.7656,1032.2031 Q4187.0313,1031.9375 4187.1797,1031.8594 Q4187.3281,1031.7813 4187.5313,1031.7813 Q4187.8594,1031.7813 4188.1172,1032.0391 Q4188.375,1032.2969 4188.375,1032.6406 Q4188.375,1032.9844 4188.0313,1033.3906 Q4187.5313,1033.9688 4186.7344,1034.2969 Q4185.6563,1034.75 4184.3594,1034.75 Q4182.8438,1034.75 4181.6406,1034.125 Q4180.6563,1033.625 4179.9688,1032.5547 Q4179.2813,1031.4844 4179.2813,1030.2031 L4179.2813,1029.0469 Q4179.2813,1027.7188 4179.8984,1026.5703 Q4180.5156,1025.4219 4181.6094,1024.8047 Q4182.7031,1024.1875 4183.9375,1024.1875 Q4184.6719,1024.1875 4185.3203,1024.3516 Q4185.9688,1024.5156 4186.5156,1024.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="91" x="4204.25" y="1033.9102">IdentityCondition</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4089.5" x2="4377.5" y1="1045" y2="1045"/><polygon fill="none" points="4099.5,1051,4103.5,1055,4099.5,1059,4095.5,1055" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="4108.5" y="1060.4189">resource_ : Resource</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4089.5" x2="4377.5" y1="1066.8359" y2="1066.8359"/><ellipse cx="4099.5" cy="1077.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="217" x="4108.5" y="1082.2549">IdentityCondition(const Resource&amp; resource)</text><ellipse cx="4099.5" cy="1091.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="4108.5" y="1096.0908">matchEntity(const EntityBase&amp; entity) : bool {query}</text><ellipse cx="4099.5" cy="1105.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="4108.5" y="1109.9268">matches(const Component&amp; component) : bool {query}</text><!--MD5=[7bc5716ff34e8b57d97376709b158217]
class Mediator--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="131.0156" id="Mediator" style="stroke: #A80036; stroke-width: 1.5;" width="536" x="2858.5" y="1349.5"/><ellipse cx="3098.75" cy="1365.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3101.5156,1361.375 Q3101.6719,1361.1563 3101.8594,1361.0469 Q3102.0469,1360.9375 3102.2656,1360.9375 Q3102.6406,1360.9375 3102.875,1361.1953 Q3103.1094,1361.4531 3103.1094,1362.0625 L3103.1094,1363.5156 Q3103.1094,1364.125 3102.875,1364.3906 Q3102.6406,1364.6563 3102.2656,1364.6563 Q3101.9219,1364.6563 3101.7188,1364.4531 Q3101.5156,1364.2656 3101.4063,1363.75 Q3101.3594,1363.3906 3101.1719,1363.2031 Q3100.8438,1362.8281 3100.2344,1362.6094 Q3099.625,1362.3906 3099,1362.3906 Q3098.2344,1362.3906 3097.6016,1362.7188 Q3096.9688,1363.0469 3096.4766,1363.7969 Q3095.9844,1364.5469 3095.9844,1365.5781 L3095.9844,1366.6719 Q3095.9844,1367.9063 3096.875,1368.7266 Q3097.7656,1369.5469 3099.3594,1369.5469 Q3100.2969,1369.5469 3100.9531,1369.2969 Q3101.3438,1369.1406 3101.7656,1368.7031 Q3102.0313,1368.4375 3102.1797,1368.3594 Q3102.3281,1368.2813 3102.5313,1368.2813 Q3102.8594,1368.2813 3103.1172,1368.5391 Q3103.375,1368.7969 3103.375,1369.1406 Q3103.375,1369.4844 3103.0313,1369.8906 Q3102.5313,1370.4688 3101.7344,1370.7969 Q3100.6563,1371.25 3099.3594,1371.25 Q3097.8438,1371.25 3096.6406,1370.625 Q3095.6563,1370.125 3094.9688,1369.0547 Q3094.2813,1367.9844 3094.2813,1366.7031 L3094.2813,1365.5469 Q3094.2813,1364.2188 3094.8984,1363.0703 Q3095.5156,1361.9219 3096.6094,1361.3047 Q3097.7031,1360.6875 3098.9375,1360.6875 Q3099.6719,1360.6875 3100.3203,1360.8516 Q3100.9688,1361.0156 3101.5156,1361.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="47" x="3119.25" y="1370.4102">Mediator</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2859.5" x2="3393.5" y1="1381.5" y2="1381.5"/><polygon fill="none" points="2869.5,1387.5,2873.5,1391.5,2869.5,1395.5,2865.5,1391.5" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="2878.5" y="1396.9189">component_ : Component*</text><polygon fill="none" points="2869.5,1401.3359,2873.5,1405.3359,2869.5,1409.3359,2865.5,1405.3359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="2878.5" y="1410.7549">multiplier_ : double</text><polygon fill="none" points="2869.5,1415.1719,2873.5,1419.1719,2869.5,1423.1719,2865.5,1419.1719" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2878.5" y="1424.5908">id_ : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2859.5" x2="3393.5" y1="1431.0078" y2="1431.0078"/><ellipse cx="2869.5" cy="1442.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="347" x="2878.5" y="1446.4268">Mediator(const std::string&amp; id, Component* component, double multiplier)</text><ellipse cx="2869.5" cy="1455.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="510" x="2878.5" y="1460.2627">serializeToRDF(const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : URI {query}</text><ellipse cx="2869.5" cy="1469.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="2878.5" y="1474.0986">containsMetaId(const std::string&amp; metaid) : bool {query}</text><!--MD5=[f45cccd7cb31f743cfc20f131429139c]
class MetaID--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="75.6719" id="MetaID" style="stroke: #A80036; stroke-width: 1.5;" width="370" x="139.5" y="621"/><ellipse cx="301.25" cy="637" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M304.0156,632.875 Q304.1719,632.6563 304.3594,632.5469 Q304.5469,632.4375 304.7656,632.4375 Q305.1406,632.4375 305.375,632.6953 Q305.6094,632.9531 305.6094,633.5625 L305.6094,635.0156 Q305.6094,635.625 305.375,635.8906 Q305.1406,636.1563 304.7656,636.1563 Q304.4219,636.1563 304.2188,635.9531 Q304.0156,635.7656 303.9063,635.25 Q303.8594,634.8906 303.6719,634.7031 Q303.3438,634.3281 302.7344,634.1094 Q302.125,633.8906 301.5,633.8906 Q300.7344,633.8906 300.1016,634.2188 Q299.4688,634.5469 298.9766,635.2969 Q298.4844,636.0469 298.4844,637.0781 L298.4844,638.1719 Q298.4844,639.4063 299.375,640.2266 Q300.2656,641.0469 301.8594,641.0469 Q302.7969,641.0469 303.4531,640.7969 Q303.8438,640.6406 304.2656,640.2031 Q304.5313,639.9375 304.6797,639.8594 Q304.8281,639.7813 305.0313,639.7813 Q305.3594,639.7813 305.6172,640.0391 Q305.875,640.2969 305.875,640.6406 Q305.875,640.9844 305.5313,641.3906 Q305.0313,641.9688 304.2344,642.2969 Q303.1563,642.75 301.8594,642.75 Q300.3438,642.75 299.1406,642.125 Q298.1563,641.625 297.4688,640.5547 Q296.7813,639.4844 296.7813,638.2031 L296.7813,637.0469 Q296.7813,635.7188 297.3984,634.5703 Q298.0156,633.4219 299.1094,632.8047 Q300.2031,632.1875 301.4375,632.1875 Q302.1719,632.1875 302.8203,632.3516 Q303.4688,632.5156 304.0156,632.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="38" x="321.75" y="641.9102">MetaID</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="140.5" x2="508.5" y1="653" y2="653"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="140.5" x2="508.5" y1="661" y2="661"/><ellipse cx="150.5" cy="672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="344" x="159.5" y="676.4189">modelContainsMetaId(libsbml::Model* m, const std::string&amp; metaid) : bool</text><ellipse cx="150.5" cy="685.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="187" x="159.5" y="690.2549">assignMetaIds(libsbml::Model* m) : void</text><!--MD5=[71fa3de94e04873e11e60aaa2e645c68]
class ModelStrings--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="103.3438" id="ModelStrings" style="stroke: #A80036; stroke-width: 1.5;" width="164" x="544.5" y="607.5"/><ellipse cx="586.5" cy="623.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M589.2656,619.375 Q589.4219,619.1563 589.6094,619.0469 Q589.7969,618.9375 590.0156,618.9375 Q590.3906,618.9375 590.625,619.1953 Q590.8594,619.4531 590.8594,620.0625 L590.8594,621.5156 Q590.8594,622.125 590.625,622.3906 Q590.3906,622.6563 590.0156,622.6563 Q589.6719,622.6563 589.4688,622.4531 Q589.2656,622.2656 589.1563,621.75 Q589.1094,621.3906 588.9219,621.2031 Q588.5938,620.8281 587.9844,620.6094 Q587.375,620.3906 586.75,620.3906 Q585.9844,620.3906 585.3516,620.7188 Q584.7188,621.0469 584.2266,621.7969 Q583.7344,622.5469 583.7344,623.5781 L583.7344,624.6719 Q583.7344,625.9063 584.625,626.7266 Q585.5156,627.5469 587.1094,627.5469 Q588.0469,627.5469 588.7031,627.2969 Q589.0938,627.1406 589.5156,626.7031 Q589.7813,626.4375 589.9297,626.3594 Q590.0781,626.2813 590.2813,626.2813 Q590.6094,626.2813 590.8672,626.5391 Q591.125,626.7969 591.125,627.1406 Q591.125,627.4844 590.7813,627.8906 Q590.2813,628.4688 589.4844,628.7969 Q588.4063,629.25 587.1094,629.25 Q585.5938,629.25 584.3906,628.625 Q583.4063,628.125 582.7188,627.0547 Q582.0313,625.9844 582.0313,624.7031 L582.0313,623.5469 Q582.0313,622.2188 582.6484,621.0703 Q583.2656,619.9219 584.3594,619.3047 Q585.4531,618.6875 586.6875,618.6875 Q587.4219,618.6875 588.0703,618.8516 Q588.7188,619.0156 589.2656,619.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="72" x="606.5" y="628.4102">ModelStrings</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="545.5" x2="707.5" y1="639.5" y2="639.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="564.5" y="654.9189">class NullPointerException {</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="552.5" y="661.3359"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="564.5" y="668.7549">Exception : using Exception::</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="545.5" x2="707.5" y1="675.1719" y2="675.1719"/><ellipse cx="555.5" cy="686.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="564.5" y="690.5908">ModelStrings()</text><ellipse cx="555.5" cy="700.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="126" x="564.5" y="704.4268">Teusink2000() : std::string</text><!--MD5=[96aab87f93b31f41f8a03d502514a3ef]
class OPB--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="61.8359" id="OPB" style="stroke: #A80036; stroke-width: 1.5;" width="178" x="4869.5" y="628"/><ellipse cx="4941.75" cy="644" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4944.5156,639.875 Q4944.6719,639.6563 4944.8594,639.5469 Q4945.0469,639.4375 4945.2656,639.4375 Q4945.6406,639.4375 4945.875,639.6953 Q4946.1094,639.9531 4946.1094,640.5625 L4946.1094,642.0156 Q4946.1094,642.625 4945.875,642.8906 Q4945.6406,643.1563 4945.2656,643.1563 Q4944.9219,643.1563 4944.7188,642.9531 Q4944.5156,642.7656 4944.4063,642.25 Q4944.3594,641.8906 4944.1719,641.7031 Q4943.8438,641.3281 4943.2344,641.1094 Q4942.625,640.8906 4942,640.8906 Q4941.2344,640.8906 4940.6016,641.2188 Q4939.9688,641.5469 4939.4766,642.2969 Q4938.9844,643.0469 4938.9844,644.0781 L4938.9844,645.1719 Q4938.9844,646.4063 4939.875,647.2266 Q4940.7656,648.0469 4942.3594,648.0469 Q4943.2969,648.0469 4943.9531,647.7969 Q4944.3438,647.6406 4944.7656,647.2031 Q4945.0313,646.9375 4945.1797,646.8594 Q4945.3281,646.7813 4945.5313,646.7813 Q4945.8594,646.7813 4946.1172,647.0391 Q4946.375,647.2969 4946.375,647.6406 Q4946.375,647.9844 4946.0313,648.3906 Q4945.5313,648.9688 4944.7344,649.2969 Q4943.6563,649.75 4942.3594,649.75 Q4940.8438,649.75 4939.6406,649.125 Q4938.6563,648.625 4937.9688,647.5547 Q4937.2813,646.4844 4937.2813,645.2031 L4937.2813,644.0469 Q4937.2813,642.7188 4937.8984,641.5703 Q4938.5156,640.4219 4939.6094,639.8047 Q4940.7031,639.1875 4941.9375,639.1875 Q4942.6719,639.1875 4943.3203,639.3516 Q4943.9688,639.5156 4944.5156,639.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="25" x="4962.25" y="648.9102">OPB</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4870.5" x2="5046.5" y1="660" y2="660"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4870.5" x2="5046.5" y1="668" y2="668"/><ellipse cx="4880.5" cy="679" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="152" x="4889.5" y="683.4189">get(OntologyTerm t) : Resource</text><!--MD5=[5dfd8d6a6d713da886d1ef2bfe78f203]
class Ontology--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="61.8359" id="Ontology" style="stroke: #A80036; stroke-width: 1.5;" width="360" x="4565.5" y="181"/><ellipse cx="4717.25" cy="197" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4720.0156,192.875 Q4720.1719,192.6563 4720.3594,192.5469 Q4720.5469,192.4375 4720.7656,192.4375 Q4721.1406,192.4375 4721.375,192.6953 Q4721.6094,192.9531 4721.6094,193.5625 L4721.6094,195.0156 Q4721.6094,195.625 4721.375,195.8906 Q4721.1406,196.1563 4720.7656,196.1563 Q4720.4219,196.1563 4720.2188,195.9531 Q4720.0156,195.7656 4719.9063,195.25 Q4719.8594,194.8906 4719.6719,194.7031 Q4719.3438,194.3281 4718.7344,194.1094 Q4718.125,193.8906 4717.5,193.8906 Q4716.7344,193.8906 4716.1016,194.2188 Q4715.4688,194.5469 4714.9766,195.2969 Q4714.4844,196.0469 4714.4844,197.0781 L4714.4844,198.1719 Q4714.4844,199.4063 4715.375,200.2266 Q4716.2656,201.0469 4717.8594,201.0469 Q4718.7969,201.0469 4719.4531,200.7969 Q4719.8438,200.6406 4720.2656,200.2031 Q4720.5313,199.9375 4720.6797,199.8594 Q4720.8281,199.7813 4721.0313,199.7813 Q4721.3594,199.7813 4721.6172,200.0391 Q4721.875,200.2969 4721.875,200.6406 Q4721.875,200.9844 4721.5313,201.3906 Q4721.0313,201.9688 4720.2344,202.2969 Q4719.1563,202.75 4717.8594,202.75 Q4716.3438,202.75 4715.1406,202.125 Q4714.1563,201.625 4713.4688,200.5547 Q4712.7813,199.4844 4712.7813,198.2031 L4712.7813,197.0469 Q4712.7813,195.7188 4713.3984,194.5703 Q4714.0156,193.4219 4715.1094,192.8047 Q4716.2031,192.1875 4717.4375,192.1875 Q4718.1719,192.1875 4718.8203,192.3516 Q4719.4688,192.5156 4720.0156,192.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="48" x="4737.75" y="201.9102">Ontology</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4566.5" x2="4924.5" y1="213" y2="213"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4566.5" x2="4924.5" y1="221" y2="221"/><ellipse cx="4576.5" cy="232" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="334" x="4585.5" y="236.4189">resolve(const std::string&amp; root, unsigned int t, int n_digits) : Resource</text><!--MD5=[b1b35833dc86dffc6b5d0c34dd643d10]
class Participant--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="61.8359" id="Participant" style="stroke: #A80036; stroke-width: 1.5;" width="90" x="3081.5" y="1033.5"/><ellipse cx="3096.5" cy="1049.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3099.2656,1045.375 Q3099.4219,1045.1563 3099.6094,1045.0469 Q3099.7969,1044.9375 3100.0156,1044.9375 Q3100.3906,1044.9375 3100.625,1045.1953 Q3100.8594,1045.4531 3100.8594,1046.0625 L3100.8594,1047.5156 Q3100.8594,1048.125 3100.625,1048.3906 Q3100.3906,1048.6563 3100.0156,1048.6563 Q3099.6719,1048.6563 3099.4688,1048.4531 Q3099.2656,1048.2656 3099.1563,1047.75 Q3099.1094,1047.3906 3098.9219,1047.2031 Q3098.5938,1046.8281 3097.9844,1046.6094 Q3097.375,1046.3906 3096.75,1046.3906 Q3095.9844,1046.3906 3095.3516,1046.7188 Q3094.7188,1047.0469 3094.2266,1047.7969 Q3093.7344,1048.5469 3093.7344,1049.5781 L3093.7344,1050.6719 Q3093.7344,1051.9063 3094.625,1052.7266 Q3095.5156,1053.5469 3097.1094,1053.5469 Q3098.0469,1053.5469 3098.7031,1053.2969 Q3099.0938,1053.1406 3099.5156,1052.7031 Q3099.7813,1052.4375 3099.9297,1052.3594 Q3100.0781,1052.2813 3100.2813,1052.2813 Q3100.6094,1052.2813 3100.8672,1052.5391 Q3101.125,1052.7969 3101.125,1053.1406 Q3101.125,1053.4844 3100.7813,1053.8906 Q3100.2813,1054.4688 3099.4844,1054.7969 Q3098.4063,1055.25 3097.1094,1055.25 Q3095.5938,1055.25 3094.3906,1054.625 Q3093.4063,1054.125 3092.7188,1053.0547 Q3092.0313,1051.9844 3092.0313,1050.7031 L3092.0313,1049.5469 Q3092.0313,1048.2188 3092.6484,1047.0703 Q3093.2656,1045.9219 3094.3594,1045.3047 Q3095.4531,1044.6875 3096.6875,1044.6875 Q3097.4219,1044.6875 3098.0703,1044.8516 Q3098.7188,1045.0156 3099.2656,1045.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="58" x="3110.5" y="1054.4102">Participant</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3082.5" x2="3170.5" y1="1065.5" y2="1065.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3082.5" x2="3170.5" y1="1073.5" y2="1073.5"/><ellipse cx="3092.5" cy="1084.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="3101.5" y="1088.9189">~Participant()</text><!--MD5=[fa40dda412b6b247aa26dc2693ea2d81]
class PhysicalProperty--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="158.6875" id="PhysicalProperty" style="stroke: #A80036; stroke-width: 1.5;" width="247" x="2755" y="985"/><ellipse cx="2828.75" cy="1001" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2831.5156,996.875 Q2831.6719,996.6563 2831.8594,996.5469 Q2832.0469,996.4375 2832.2656,996.4375 Q2832.6406,996.4375 2832.875,996.6953 Q2833.1094,996.9531 2833.1094,997.5625 L2833.1094,999.0156 Q2833.1094,999.625 2832.875,999.8906 Q2832.6406,1000.1563 2832.2656,1000.1563 Q2831.9219,1000.1563 2831.7188,999.9531 Q2831.5156,999.7656 2831.4063,999.25 Q2831.3594,998.8906 2831.1719,998.7031 Q2830.8438,998.3281 2830.2344,998.1094 Q2829.625,997.8906 2829,997.8906 Q2828.2344,997.8906 2827.6016,998.2188 Q2826.9688,998.5469 2826.4766,999.2969 Q2825.9844,1000.0469 2825.9844,1001.0781 L2825.9844,1002.1719 Q2825.9844,1003.4063 2826.875,1004.2266 Q2827.7656,1005.0469 2829.3594,1005.0469 Q2830.2969,1005.0469 2830.9531,1004.7969 Q2831.3438,1004.6406 2831.7656,1004.2031 Q2832.0313,1003.9375 2832.1797,1003.8594 Q2832.3281,1003.7813 2832.5313,1003.7813 Q2832.8594,1003.7813 2833.1172,1004.0391 Q2833.375,1004.2969 2833.375,1004.6406 Q2833.375,1004.9844 2833.0313,1005.3906 Q2832.5313,1005.9688 2831.7344,1006.2969 Q2830.6563,1006.75 2829.3594,1006.75 Q2827.8438,1006.75 2826.6406,1006.125 Q2825.6563,1005.625 2824.9688,1004.5547 Q2824.2813,1003.4844 2824.2813,1002.2031 L2824.2813,1001.0469 Q2824.2813,999.7188 2824.8984,998.5703 Q2825.5156,997.4219 2826.6094,996.8047 Q2827.7031,996.1875 2828.9375,996.1875 Q2829.6719,996.1875 2830.3203,996.3516 Q2830.9688,996.5156 2831.5156,996.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="91" x="2849.25" y="1005.9102">PhysicalProperty</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2756" x2="3001" y1="1017" y2="1017"/><polygon fill="none" points="2766,1023,2770,1027,2766,1031,2762,1027" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="2775" y="1032.4189">resource_ : Resource</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2756" x2="3001" y1="1038.8359" y2="1038.8359"/><ellipse cx="2766" cy="1049.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="2775" y="1054.2549">PhysicalProperty(const Resource&amp; resource)</text><ellipse cx="2766" cy="1063.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="2775" y="1068.0908">PhysicalProperty(Resource&amp;&amp; resource)</text><ellipse cx="2766" cy="1077.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="2775" y="1081.9268">PhysicalProperty(const std::string&amp; resource)</text><ellipse cx="2766" cy="1091.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="2775" y="1095.7627">PhysicalProperty(std::string&amp;&amp; resource)</text><ellipse cx="2766" cy="1105.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="2775" y="1109.5986">getResource() : Resource&amp; {query}</text><ellipse cx="2766" cy="1119.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="2775" y="1123.4346">getResource() : Resource&amp;</text><ellipse cx="2766" cy="1132.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="2775" y="1137.2705">humanize() : std::string {query}</text><!--MD5=[bb370c11d182b7ebaea7e6fa83404e81]
class Process--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="283.2109" id="Process" style="stroke: #A80036; stroke-width: 1.5;" width="540" x="3427.5" y="2126"/><ellipse cx="3670.25" cy="2142" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3673.0156,2137.875 Q3673.1719,2137.6563 3673.3594,2137.5469 Q3673.5469,2137.4375 3673.7656,2137.4375 Q3674.1406,2137.4375 3674.375,2137.6953 Q3674.6094,2137.9531 3674.6094,2138.5625 L3674.6094,2140.0156 Q3674.6094,2140.625 3674.375,2140.8906 Q3674.1406,2141.1563 3673.7656,2141.1563 Q3673.4219,2141.1563 3673.2188,2140.9531 Q3673.0156,2140.7656 3672.9063,2140.25 Q3672.8594,2139.8906 3672.6719,2139.7031 Q3672.3438,2139.3281 3671.7344,2139.1094 Q3671.125,2138.8906 3670.5,2138.8906 Q3669.7344,2138.8906 3669.1016,2139.2188 Q3668.4688,2139.5469 3667.9766,2140.2969 Q3667.4844,2141.0469 3667.4844,2142.0781 L3667.4844,2143.1719 Q3667.4844,2144.4063 3668.375,2145.2266 Q3669.2656,2146.0469 3670.8594,2146.0469 Q3671.7969,2146.0469 3672.4531,2145.7969 Q3672.8438,2145.6406 3673.2656,2145.2031 Q3673.5313,2144.9375 3673.6797,2144.8594 Q3673.8281,2144.7813 3674.0313,2144.7813 Q3674.3594,2144.7813 3674.6172,2145.0391 Q3674.875,2145.2969 3674.875,2145.6406 Q3674.875,2145.9844 3674.5313,2146.3906 Q3674.0313,2146.9688 3673.2344,2147.2969 Q3672.1563,2147.75 3670.8594,2147.75 Q3669.3438,2147.75 3668.1406,2147.125 Q3667.1563,2146.625 3666.4688,2145.5547 Q3665.7813,2144.4844 3665.7813,2143.2031 L3665.7813,2142.0469 Q3665.7813,2140.7188 3666.3984,2139.5703 Q3667.0156,2138.4219 3668.1094,2137.8047 Q3669.2031,2137.1875 3670.4375,2137.1875 Q3671.1719,2137.1875 3671.8203,2137.3516 Q3672.4688,2137.5156 3673.0156,2137.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="46" x="3690.75" y="2146.9102">Process</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3428.5" x2="3966.5" y1="2158" y2="2158"/><polygon fill="none" points="3438.5,2164,3442.5,2168,3438.5,2172,3434.5,2168" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="3447.5" y="2173.4189">mediators_ : Mediators</text><polygon fill="none" points="3438.5,2177.8359,3442.5,2181.8359,3438.5,2185.8359,3434.5,2181.8359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="3447.5" y="2187.2549">sinks_ : Sinks</text><polygon fill="none" points="3438.5,2191.6719,3442.5,2195.6719,3438.5,2199.6719,3434.5,2195.6719" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="3447.5" y="2201.0908">sources_ : Sources</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3428.5" x2="3966.5" y1="2207.5078" y2="2207.5078"/><ellipse cx="3438.5" cy="2218.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="48" x="3447.5" y="2222.9268">Process()</text><ellipse cx="3438.5" cy="2232.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="3447.5" y="2236.7627">Process(const SingularAnnotation&amp; annotation)</text><ellipse cx="3438.5" cy="2246.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="3447.5" y="2250.5986">Process(SingularAnnotation&amp;&amp; annotation)</text><ellipse cx="3438.5" cy="2260.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="3447.5" y="2264.4346">Process(const CompositeAnnotation&amp; annotation)</text><ellipse cx="3438.5" cy="2273.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="217" x="3447.5" y="2278.2705">Process(CompositeAnnotation&amp;&amp; annotation)</text><ellipse cx="3438.5" cy="2287.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="3447.5" y="2292.1064">Process(const Process&amp; other)</text><ellipse cx="3438.5" cy="2301.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="3447.5" y="2305.9424">Process(Process&amp;&amp; other)</text><ellipse cx="3438.5" cy="2315.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="3447.5" y="2319.7783">clone() : Component* {query}</text><ellipse cx="3438.5" cy="2329.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="3447.5" y="2333.6143">containsMetaId(const std::string&amp; metaid) : bool {query}</text><ellipse cx="3438.5" cy="2343.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="3447.5" y="2347.4502">isProcess() : bool {query}</text><ellipse cx="3438.5" cy="2356.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="3447.5" y="2361.2861">addMediator(const Mediator&amp; mediator) : void</text><ellipse cx="3438.5" cy="2370.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="3447.5" y="2375.1221">addSink(const Sink&amp; sink) : void</text><ellipse cx="3438.5" cy="2384.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="3447.5" y="2388.958">addSource(const Source&amp; source) : void</text><ellipse cx="3438.5" cy="2398.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="514" x="3447.5" y="2402.7939">serializeToRDF(const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}</text><!--MD5=[91221848cc6fc2b51471cfb300e81a0a]
class Query--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="75.6719" id="Query" style="stroke: #A80036; stroke-width: 1.5;" width="276" x="743.5" y="621"/><ellipse cx="860.75" cy="637" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M862.9375,638.7656 L858.7969,638.7656 L858.375,639.7969 L858.7969,639.7969 Q859.4063,639.7969 859.6719,640.0313 Q859.9375,640.2656 859.9375,640.6563 Q859.9375,641.0313 859.6719,641.2656 Q859.4063,641.5 858.7969,641.5 L856.5,641.5 Q855.8906,641.5 855.6328,641.2656 Q855.375,641.0313 855.375,640.6406 Q855.375,640.2656 855.6484,640.0234 Q855.9219,639.7813 856.5469,639.7969 L859.2188,633.1406 L858.1094,633.1406 Q857.5,633.1406 857.2344,632.9063 Q856.9688,632.6719 856.9688,632.2813 Q856.9688,631.9063 857.2344,631.6719 Q857.5,631.4375 858.1094,631.4375 L861.7813,631.4375 L865.1719,639.7969 Q865.7656,639.7969 865.9531,639.9375 Q866.3438,640.2031 866.3438,640.6563 Q866.3438,641.0313 866.0859,641.2656 Q865.8281,641.5 865.2188,641.5 L862.9219,641.5 Q862.3125,641.5 862.0469,641.2656 Q861.7813,641.0313 861.7813,640.6406 Q861.7813,640.2656 862.0469,640.0313 Q862.3125,639.7969 862.9219,639.7969 L863.3438,639.7969 L862.9375,638.7656 Z M862.2188,637.0625 L860.8594,633.6875 L859.4844,637.0625 L862.2188,637.0625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="33" x="881.25" y="641.9102">Query</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="744.5" x2="1018.5" y1="653" y2="653"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="744.5" x2="1018.5" y1="661" y2="661"/><ellipse cx="754.5" cy="672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="44" x="763.5" y="676.4189">~Query()</text><ellipse cx="754.5" cy="685.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="250" x="763.5" y="690.2549">run(SemSimModel&amp; model) : QueryResults {query}</text><!--MD5=[f4666cd7827c100ee21b42e4ef3c0963]
class QueryResults--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="89.5078" id="QueryResults" style="stroke: #A80036; stroke-width: 1.5;" width="138" x="1054.5" y="614"/><ellipse cx="1083.45" cy="630" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1086.2156,625.875 Q1086.3719,625.6563 1086.5594,625.5469 Q1086.7469,625.4375 1086.9656,625.4375 Q1087.3406,625.4375 1087.575,625.6953 Q1087.8094,625.9531 1087.8094,626.5625 L1087.8094,628.0156 Q1087.8094,628.625 1087.575,628.8906 Q1087.3406,629.1563 1086.9656,629.1563 Q1086.6219,629.1563 1086.4188,628.9531 Q1086.2156,628.7656 1086.1063,628.25 Q1086.0594,627.8906 1085.8719,627.7031 Q1085.5438,627.3281 1084.9344,627.1094 Q1084.325,626.8906 1083.7,626.8906 Q1082.9344,626.8906 1082.3016,627.2188 Q1081.6688,627.5469 1081.1766,628.2969 Q1080.6844,629.0469 1080.6844,630.0781 L1080.6844,631.1719 Q1080.6844,632.4063 1081.575,633.2266 Q1082.4656,634.0469 1084.0594,634.0469 Q1084.9969,634.0469 1085.6531,633.7969 Q1086.0438,633.6406 1086.4656,633.2031 Q1086.7313,632.9375 1086.8797,632.8594 Q1087.0281,632.7813 1087.2313,632.7813 Q1087.5594,632.7813 1087.8172,633.0391 Q1088.075,633.2969 1088.075,633.6406 Q1088.075,633.9844 1087.7313,634.3906 Q1087.2313,634.9688 1086.4344,635.2969 Q1085.3563,635.75 1084.0594,635.75 Q1082.5438,635.75 1081.3406,635.125 Q1080.3563,634.625 1079.6688,633.5547 Q1078.9813,632.4844 1078.9813,631.2031 L1078.9813,630.0469 Q1078.9813,628.7188 1079.5984,627.5703 Q1080.2156,626.4219 1081.3094,625.8047 Q1082.4031,625.1875 1083.6375,625.1875 Q1084.3719,625.1875 1085.0203,625.3516 Q1085.6688,625.5156 1086.2156,625.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="75" x="1100.55" y="634.9102">QueryResults</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1055.5" x2="1191.5" y1="646" y2="646"/><polygon fill="none" points="1065.5,652,1069.5,656,1065.5,660,1061.5,656" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="1074.5" y="661.4189">refs_ : ComponentRefs</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1055.5" x2="1191.5" y1="667.8359" y2="667.8359"/><ellipse cx="1065.5" cy="678.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="1074.5" y="683.2549">begin() : iterator</text><ellipse cx="1065.5" cy="692.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="1074.5" y="697.0908">end() : iterator</text><!--MD5=[84eff013e893d23e5b529329b31777a9]
class RDFReader--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="227.8672" id="RDFReader" style="stroke: #A80036; stroke-width: 1.5;" width="637" x="6" y="950.5"/><ellipse cx="287.25" cy="966.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M290.0156,962.375 Q290.1719,962.1563 290.3594,962.0469 Q290.5469,961.9375 290.7656,961.9375 Q291.1406,961.9375 291.375,962.1953 Q291.6094,962.4531 291.6094,963.0625 L291.6094,964.5156 Q291.6094,965.125 291.375,965.3906 Q291.1406,965.6563 290.7656,965.6563 Q290.4219,965.6563 290.2188,965.4531 Q290.0156,965.2656 289.9063,964.75 Q289.8594,964.3906 289.6719,964.2031 Q289.3438,963.8281 288.7344,963.6094 Q288.125,963.3906 287.5,963.3906 Q286.7344,963.3906 286.1016,963.7188 Q285.4688,964.0469 284.9766,964.7969 Q284.4844,965.5469 284.4844,966.5781 L284.4844,967.6719 Q284.4844,968.9063 285.375,969.7266 Q286.2656,970.5469 287.8594,970.5469 Q288.7969,970.5469 289.4531,970.2969 Q289.8438,970.1406 290.2656,969.7031 Q290.5313,969.4375 290.6797,969.3594 Q290.8281,969.2813 291.0313,969.2813 Q291.3594,969.2813 291.6172,969.5391 Q291.875,969.7969 291.875,970.1406 Q291.875,970.4844 291.5313,970.8906 Q291.0313,971.4688 290.2344,971.7969 Q289.1563,972.25 287.8594,972.25 Q286.3438,972.25 285.1406,971.625 Q284.1563,971.125 283.4688,970.0547 Q282.7813,968.9844 282.7813,967.7031 L282.7813,966.5469 Q282.7813,965.2188 283.3984,964.0703 Q284.0156,962.9219 285.1094,962.3047 Q286.2031,961.6875 287.4375,961.6875 Q288.1719,961.6875 288.8203,961.8516 Q289.4688,962.0156 290.0156,962.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="66" x="307.75" y="971.4102">RDFReader</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="642" y1="982.5" y2="982.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="642" y1="990.5" y2="990.5"/><ellipse cx="17" cy="1001.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="183" x="26" y="1005.9189">RaptorTermToURI(raptor_term* t) : URI</text><ellipse cx="17" cy="1015.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="176" x="26" y="1019.7549">isMetaId(const std::string&amp; uri) : bool</text><ellipse cx="17" cy="1029.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="142" x="26" y="1033.5908">isMetaId(raptor_term* t) : bool</text><ellipse cx="17" cy="1043.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="222" x="26" y="1047.4268">RaptorTermToRepr(raptor_term* t) : std::string</text><ellipse cx="17" cy="1056.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="213" x="26" y="1061.2627">RaptorURIToString(raptor_uri* u) : std::string</text><ellipse cx="17" cy="1070.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="230" x="26" y="1075.0986">extractMetaId(const std::string&amp; uri) : std::string</text><ellipse cx="17" cy="1084.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="196" x="26" y="1088.9346">extractMetaId(raptor_term* t) : std::string</text><ellipse cx="17" cy="1098.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="536" x="26" y="1102.7705">addTermToAnnotation(AnnotationBase&amp; annotation, const Relation&amp; relation, const Resource&amp; resource) : void</text><ellipse cx="17" cy="1112.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="611" x="26" y="1116.6064">addTermToCompositeAnnotation(CompositeAnnotation&amp; annotation, const Relation&amp; relation, const Resource&amp; resource) : void</text><ellipse cx="17" cy="1126.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="460" x="26" y="1130.4424">addTermToEntity(EntityBase&amp; entity, const Relation&amp; relation, const Resource&amp; resource) : void</text><ellipse cx="17" cy="1139.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="589" x="26" y="1144.2783">addTermToSingularAnnotation(SingularAnnotation&amp; annotation, const Relation&amp; relation, const Resource&amp; resource) : void</text><ellipse cx="17" cy="1153.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="538" x="26" y="1158.1143">applyRDFAnnotationsToModel(SemSimModel&amp; model, const std::string&amp; rdf, const std::string&amp; rdf_format) : void</text><ellipse cx="17" cy="1167.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="300" x="26" y="1171.9502">process_triple(void* user_data, raptor_statement* triple) : void</text><!--MD5=[1a0359269956d51b44d9f9ab596063f6]
class RasqalQuery--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="214.0313" id="RasqalQuery" style="stroke: #A80036; stroke-width: 1.5;" width="381" x="678" y="957.5"/><ellipse cx="828.25" cy="973.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M831.0156,969.375 Q831.1719,969.1563 831.3594,969.0469 Q831.5469,968.9375 831.7656,968.9375 Q832.1406,968.9375 832.375,969.1953 Q832.6094,969.4531 832.6094,970.0625 L832.6094,971.5156 Q832.6094,972.125 832.375,972.3906 Q832.1406,972.6563 831.7656,972.6563 Q831.4219,972.6563 831.2188,972.4531 Q831.0156,972.2656 830.9063,971.75 Q830.8594,971.3906 830.6719,971.2031 Q830.3438,970.8281 829.7344,970.6094 Q829.125,970.3906 828.5,970.3906 Q827.7344,970.3906 827.1016,970.7188 Q826.4688,971.0469 825.9766,971.7969 Q825.4844,972.5469 825.4844,973.5781 L825.4844,974.6719 Q825.4844,975.9063 826.375,976.7266 Q827.2656,977.5469 828.8594,977.5469 Q829.7969,977.5469 830.4531,977.2969 Q830.8438,977.1406 831.2656,976.7031 Q831.5313,976.4375 831.6797,976.3594 Q831.8281,976.2813 832.0313,976.2813 Q832.3594,976.2813 832.6172,976.5391 Q832.875,976.7969 832.875,977.1406 Q832.875,977.4844 832.5313,977.8906 Q832.0313,978.4688 831.2344,978.7969 Q830.1563,979.25 828.8594,979.25 Q827.3438,979.25 826.1406,978.625 Q825.1563,978.125 824.4688,977.0547 Q823.7813,975.9844 823.7813,974.7031 L823.7813,973.5469 Q823.7813,972.2188 824.3984,971.0703 Q825.0156,969.9219 826.1094,969.3047 Q827.2031,968.6875 828.4375,968.6875 Q829.1719,968.6875 829.8203,968.8516 Q830.4688,969.0156 831.0156,969.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="72" x="848.75" y="978.4102">RasqalQuery</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="679" x2="1058" y1="989.5" y2="989.5"/><polygon fill="none" points="689,995.5,693,999.5,689,1003.5,685,999.5" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="698" y="1004.9189">raptor_iostr_ : raptor_iostream*</text><polygon fill="none" points="689,1009.3359,693,1013.3359,689,1017.3359,685,1013.3359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="698" y="1018.7549">base_uri_ : raptor_uri*</text><polygon fill="none" points="689,1023.1719,693,1027.1719,689,1031.1719,685,1027.1719" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="698" y="1032.5908">uri_ : raptor_uri*</text><polygon fill="none" points="689,1037.0078,693,1041.0078,689,1045.0078,685,1041.0078" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="698" y="1046.4268">raptor_world_ : raptor_world*</text><polygon fill="none" points="689,1050.8438,693,1054.8438,689,1058.8438,685,1054.8438" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="698" y="1060.2627">dg_ : rasqal_data_graph*</text><polygon fill="none" points="689,1064.6797,693,1068.6797,689,1072.6797,685,1068.6797" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="698" y="1074.0986">query_ : rasqal_query*</text><polygon fill="none" points="689,1078.5156,693,1082.5156,689,1086.5156,685,1082.5156" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="698" y="1087.9346">rasqal_world_ : rasqal_world*</text><polygon fill="none" points="689,1092.3516,693,1096.3516,689,1100.3516,685,1096.3516" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="698" y="1101.7705">rdf_ : std::string</text><polygon fill="none" points="689,1106.1875,693,1110.1875,689,1114.1875,685,1110.1875" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="698" y="1115.6064">uri_string_ : unsigned char*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="679" x2="1058" y1="1122.0234" y2="1122.0234"/><ellipse cx="689" cy="1133.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="355" x="698" y="1137.4424">RasqalQuery(const std::string&amp; rdf, const std::string&amp; format, bool is_file)</text><ellipse cx="689" cy="1146.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="698" y="1151.2783">~RasqalQuery()</text><ellipse cx="689" cy="1160.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="698" y="1165.1143">run(const std::string&amp; query) : RasqalQueryResult</text><!--MD5=[25cc2995ea6d5d0c52313ac9d7753299]
class RasqalQueryResult--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="144.8516" id="RasqalQueryResult" style="stroke: #A80036; stroke-width: 1.5;" width="368" x="1094.5" y="992"/><ellipse cx="1220.25" cy="1008" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1223.0156,1003.875 Q1223.1719,1003.6563 1223.3594,1003.5469 Q1223.5469,1003.4375 1223.7656,1003.4375 Q1224.1406,1003.4375 1224.375,1003.6953 Q1224.6094,1003.9531 1224.6094,1004.5625 L1224.6094,1006.0156 Q1224.6094,1006.625 1224.375,1006.8906 Q1224.1406,1007.1563 1223.7656,1007.1563 Q1223.4219,1007.1563 1223.2188,1006.9531 Q1223.0156,1006.7656 1222.9063,1006.25 Q1222.8594,1005.8906 1222.6719,1005.7031 Q1222.3438,1005.3281 1221.7344,1005.1094 Q1221.125,1004.8906 1220.5,1004.8906 Q1219.7344,1004.8906 1219.1016,1005.2188 Q1218.4688,1005.5469 1217.9766,1006.2969 Q1217.4844,1007.0469 1217.4844,1008.0781 L1217.4844,1009.1719 Q1217.4844,1010.4063 1218.375,1011.2266 Q1219.2656,1012.0469 1220.8594,1012.0469 Q1221.7969,1012.0469 1222.4531,1011.7969 Q1222.8438,1011.6406 1223.2656,1011.2031 Q1223.5313,1010.9375 1223.6797,1010.8594 Q1223.8281,1010.7813 1224.0313,1010.7813 Q1224.3594,1010.7813 1224.6172,1011.0391 Q1224.875,1011.2969 1224.875,1011.6406 Q1224.875,1011.9844 1224.5313,1012.3906 Q1224.0313,1012.9688 1223.2344,1013.2969 Q1222.1563,1013.75 1220.8594,1013.75 Q1219.3438,1013.75 1218.1406,1013.125 Q1217.1563,1012.625 1216.4688,1011.5547 Q1215.7813,1010.4844 1215.7813,1009.2031 L1215.7813,1008.0469 Q1215.7813,1006.7188 1216.3984,1005.5703 Q1217.0156,1004.4219 1218.1094,1003.8047 Q1219.2031,1003.1875 1220.4375,1003.1875 Q1221.1719,1003.1875 1221.8203,1003.3516 Q1222.4688,1003.5156 1223.0156,1003.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="108" x="1240.75" y="1012.9102">RasqalQueryResult</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1095.5" x2="1461.5" y1="1024" y2="1024"/><polygon fill="none" points="1105.5,1030,1109.5,1034,1105.5,1038,1101.5,1034" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="1114.5" y="1039.4189">results_ : rasqal_query_results*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1095.5" x2="1461.5" y1="1045.8359" y2="1045.8359"/><ellipse cx="1105.5" cy="1056.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="1114.5" y="1061.2549">RasqalQueryResult(rasqal_query_results* results)</text><ellipse cx="1105.5" cy="1070.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="1114.5" y="1075.0908">~RasqalQueryResult()</text><ellipse cx="1105.5" cy="1084.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="1114.5" y="1088.9268">toRDFString(const std::string&amp; format) : std::string</text><ellipse cx="1105.5" cy="1098.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="1114.5" y="1102.7627">toString() : std::string</text><ellipse cx="1105.5" cy="1112.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="1114.5" y="1116.5986">asList() : std::vector&lt;std::vector&lt;std::string&gt; &gt;</text><polygon fill="#FFFF44" points="1105.5,1121.0156,1109.5,1125.0156,1105.5,1129.0156,1101.5,1125.0156" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="1114.5" y="1130.4346">toRaptorGraph(raptor_world* world, raptor_serializer* serializer) : void</text><!--MD5=[534474e9f05b14d7c70186ae077f30e0]
class Relation--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="144.8516" id="Relation" style="stroke: #A80036; stroke-width: 1.5;" width="258" x="4374.5" y="1342.5"/><ellipse cx="4476.25" cy="1358.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4479.0156,1354.375 Q4479.1719,1354.1563 4479.3594,1354.0469 Q4479.5469,1353.9375 4479.7656,1353.9375 Q4480.1406,1353.9375 4480.375,1354.1953 Q4480.6094,1354.4531 4480.6094,1355.0625 L4480.6094,1356.5156 Q4480.6094,1357.125 4480.375,1357.3906 Q4480.1406,1357.6563 4479.7656,1357.6563 Q4479.4219,1357.6563 4479.2188,1357.4531 Q4479.0156,1357.2656 4478.9063,1356.75 Q4478.8594,1356.3906 4478.6719,1356.2031 Q4478.3438,1355.8281 4477.7344,1355.6094 Q4477.125,1355.3906 4476.5,1355.3906 Q4475.7344,1355.3906 4475.1016,1355.7188 Q4474.4688,1356.0469 4473.9766,1356.7969 Q4473.4844,1357.5469 4473.4844,1358.5781 L4473.4844,1359.6719 Q4473.4844,1360.9063 4474.375,1361.7266 Q4475.2656,1362.5469 4476.8594,1362.5469 Q4477.7969,1362.5469 4478.4531,1362.2969 Q4478.8438,1362.1406 4479.2656,1361.7031 Q4479.5313,1361.4375 4479.6797,1361.3594 Q4479.8281,1361.2813 4480.0313,1361.2813 Q4480.3594,1361.2813 4480.6172,1361.5391 Q4480.875,1361.7969 4480.875,1362.1406 Q4480.875,1362.4844 4480.5313,1362.8906 Q4480.0313,1363.4688 4479.2344,1363.7969 Q4478.1563,1364.25 4476.8594,1364.25 Q4475.3438,1364.25 4474.1406,1363.625 Q4473.1563,1363.125 4472.4688,1362.0547 Q4471.7813,1360.9844 4471.7813,1359.7031 L4471.7813,1358.5469 Q4471.7813,1357.2188 4472.3984,1356.0703 Q4473.0156,1354.9219 4474.1094,1354.3047 Q4475.2031,1353.6875 4476.4375,1353.6875 Q4477.1719,1353.6875 4477.8203,1353.8516 Q4478.4688,1354.0156 4479.0156,1354.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="46" x="4496.75" y="1363.4102">Relation</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4375.5" x2="4631.5" y1="1374.5" y2="1374.5"/><polygon fill="none" points="4385.5,1380.5,4389.5,1384.5,4385.5,1388.5,4381.5,1384.5" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="43" x="4394.5" y="1389.9189">uri_ : URI</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4375.5" x2="4631.5" y1="1396.3359" y2="1396.3359"/><ellipse cx="4385.5" cy="1407.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="4394.5" y="1411.7549">Relation(const URI&amp; uri)</text><ellipse cx="4385.5" cy="1421.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="4394.5" y="1425.5908">Relation(URI&amp;&amp; uri)</text><ellipse cx="4385.5" cy="1435.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="4394.5" y="1439.4268">getURI() : URI&amp; {query}</text><ellipse cx="4385.5" cy="1448.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="4394.5" y="1453.2627">operator==(const Relation&amp; other) : bool {query}</text><ellipse cx="4385.5" cy="1462.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="4394.5" y="1467.0986">humanize() : std::string {query}</text><ellipse cx="4385.5" cy="1476.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="4394.5" y="1480.9346">toString() : std::string {query}</text><!--MD5=[6b13f1b330d33795af281e5c1dfe1e98]
class Resource--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="186.3594" id="Resource" style="stroke: #A80036; stroke-width: 1.5;" width="267" x="4001" y="1322"/><ellipse cx="4103.25" cy="1338" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4106.0156,1333.875 Q4106.1719,1333.6563 4106.3594,1333.5469 Q4106.5469,1333.4375 4106.7656,1333.4375 Q4107.1406,1333.4375 4107.375,1333.6953 Q4107.6094,1333.9531 4107.6094,1334.5625 L4107.6094,1336.0156 Q4107.6094,1336.625 4107.375,1336.8906 Q4107.1406,1337.1563 4106.7656,1337.1563 Q4106.4219,1337.1563 4106.2188,1336.9531 Q4106.0156,1336.7656 4105.9063,1336.25 Q4105.8594,1335.8906 4105.6719,1335.7031 Q4105.3438,1335.3281 4104.7344,1335.1094 Q4104.125,1334.8906 4103.5,1334.8906 Q4102.7344,1334.8906 4102.1016,1335.2188 Q4101.4688,1335.5469 4100.9766,1336.2969 Q4100.4844,1337.0469 4100.4844,1338.0781 L4100.4844,1339.1719 Q4100.4844,1340.4063 4101.375,1341.2266 Q4102.2656,1342.0469 4103.8594,1342.0469 Q4104.7969,1342.0469 4105.4531,1341.7969 Q4105.8438,1341.6406 4106.2656,1341.2031 Q4106.5313,1340.9375 4106.6797,1340.8594 Q4106.8281,1340.7813 4107.0313,1340.7813 Q4107.3594,1340.7813 4107.6172,1341.0391 Q4107.875,1341.2969 4107.875,1341.6406 Q4107.875,1341.9844 4107.5313,1342.3906 Q4107.0313,1342.9688 4106.2344,1343.2969 Q4105.1563,1343.75 4103.8594,1343.75 Q4102.3438,1343.75 4101.1406,1343.125 Q4100.1563,1342.625 4099.4688,1341.5547 Q4098.7813,1340.4844 4098.7813,1339.2031 L4098.7813,1338.0469 Q4098.7813,1336.7188 4099.3984,1335.5703 Q4100.0156,1334.4219 4101.1094,1333.8047 Q4102.2031,1333.1875 4103.4375,1333.1875 Q4104.1719,1333.1875 4104.8203,1333.3516 Q4105.4688,1333.5156 4106.0156,1333.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="54" x="4123.75" y="1342.9102">Resource</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4002" x2="4267" y1="1354" y2="1354"/><polygon fill="none" points="4012,1360,4016,1364,4012,1368,4008,1364" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="4021" y="1369.4189">element_ : Component*</text><polygon fill="none" points="4012,1373.8359,4016,1377.8359,4012,1381.8359,4008,1377.8359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="43" x="4021" y="1383.2549">uri_ : URI</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4002" x2="4267" y1="1389.6719" y2="1389.6719"/><ellipse cx="4012" cy="1400.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="4021" y="1405.0908">Resource(const URI&amp; uri)</text><ellipse cx="4012" cy="1414.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="4021" y="1418.9268">Resource(URI&amp;&amp; uri)</text><ellipse cx="4012" cy="1428.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="4021" y="1432.7627">Resource(Component* element)</text><ellipse cx="4012" cy="1442.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="4021" y="1446.5986">getURI(const URI&amp; base) : URI {query}</text><ellipse cx="4012" cy="1456.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="4021" y="1460.4346">isLocal() : bool {query}</text><ellipse cx="4012" cy="1469.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="4021" y="1474.2705">operator==(const Resource&amp; other) : bool {query}</text><ellipse cx="4012" cy="1483.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="4021" y="1488.1064">humanize() : std::string {query}</text><ellipse cx="4012" cy="1497.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="4021" y="1501.9424">toString() : std::string {query}</text><!--MD5=[14b070f747ee3e0291decafe58bd19c2]
class SBMLImporter--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="366.2266" id="SBMLImporter" style="stroke: #A80036; stroke-width: 1.5;" width="432" x="3248.5" y="476"/><ellipse cx="3421.25" cy="492" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3424.0156,487.875 Q3424.1719,487.6563 3424.3594,487.5469 Q3424.5469,487.4375 3424.7656,487.4375 Q3425.1406,487.4375 3425.375,487.6953 Q3425.6094,487.9531 3425.6094,488.5625 L3425.6094,490.0156 Q3425.6094,490.625 3425.375,490.8906 Q3425.1406,491.1563 3424.7656,491.1563 Q3424.4219,491.1563 3424.2188,490.9531 Q3424.0156,490.7656 3423.9063,490.25 Q3423.8594,489.8906 3423.6719,489.7031 Q3423.3438,489.3281 3422.7344,489.1094 Q3422.125,488.8906 3421.5,488.8906 Q3420.7344,488.8906 3420.1016,489.2188 Q3419.4688,489.5469 3418.9766,490.2969 Q3418.4844,491.0469 3418.4844,492.0781 L3418.4844,493.1719 Q3418.4844,494.4063 3419.375,495.2266 Q3420.2656,496.0469 3421.8594,496.0469 Q3422.7969,496.0469 3423.4531,495.7969 Q3423.8438,495.6406 3424.2656,495.2031 Q3424.5313,494.9375 3424.6797,494.8594 Q3424.8281,494.7813 3425.0313,494.7813 Q3425.3594,494.7813 3425.6172,495.0391 Q3425.875,495.2969 3425.875,495.6406 Q3425.875,495.9844 3425.5313,496.3906 Q3425.0313,496.9688 3424.2344,497.2969 Q3423.1563,497.75 3421.8594,497.75 Q3420.3438,497.75 3419.1406,497.125 Q3418.1563,496.625 3417.4688,495.5547 Q3416.7813,494.4844 3416.7813,493.2031 L3416.7813,492.0469 Q3416.7813,490.7188 3417.3984,489.5703 Q3418.0156,488.4219 3419.1094,487.8047 Q3420.2031,487.1875 3421.4375,487.1875 Q3422.1719,487.1875 3422.8203,487.3516 Q3423.4688,487.5156 3424.0156,487.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="78" x="3441.75" y="496.9102">SBMLImporter</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3249.5" x2="3679.5" y1="508" y2="508"/><polygon fill="none" points="3259.5,514,3263.5,518,3259.5,522,3255.5,518" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="3268.5" y="523.4189">result_ : SBMLModel</text><polygon fill="none" points="3259.5,527.8359,3263.5,531.8359,3259.5,535.8359,3255.5,531.8359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="3268.5" y="537.2549">m_ : libsbml::Model*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3249.5" x2="3679.5" y1="543.6719" y2="543.6719"/><ellipse cx="3259.5" cy="554.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="3268.5" y="559.0908">SBMLImporter(libsbml::SBMLDocument* d)</text><ellipse cx="3259.5" cy="568.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="3268.5" y="572.9268">SBMLImporter(const std::string&amp; sbml)</text><polygon fill="#FFFF44" points="3259.5,577.3438,3263.5,581.3438,3259.5,585.3438,3255.5,581.3438" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="3268.5" y="586.7627">extractAnnotation(libsbml::SBase* s) : AnnotationPtr</text><polygon fill="#FFFF44" points="3259.5,591.1797,3263.5,595.1797,3259.5,599.1797,3255.5,595.1797" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="3268.5" y="600.5986">extractAnnotation(libsbml::Species* s) : AnnotationPtr</text><polygon fill="#FFFF44" points="3259.5,605.0156,3263.5,609.0156,3259.5,613.0156,3255.5,609.0156" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="3268.5" y="614.4346">extractAnnotation(libsbml::Compartment* c) : AnnotationPtr</text><polygon fill="#FFFF44" points="3259.5,618.8516,3263.5,622.8516,3259.5,626.8516,3255.5,622.8516" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="259" x="3268.5" y="628.2705">extractAnnotation(libsbml::Reaction* r) : AnnotationPtr</text><polygon fill="#FFFF44" points="3259.5,632.6875,3263.5,636.6875,3259.5,640.6875,3255.5,636.6875" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="268" x="3268.5" y="642.1064">extractAnnotation(libsbml::Parameter* p) : AnnotationPtr</text><polygon fill="#FFFF44" points="3259.5,646.5234,3263.5,650.5234,3259.5,654.5234,3255.5,650.5234" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="243" x="3268.5" y="655.9424">getComponentFor(libsbml::SBase* s) : Component*</text><polygon fill="#FFFF44" points="3259.5,660.3594,3263.5,664.3594,3259.5,668.3594,3255.5,664.3594" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="345" x="3268.5" y="669.7783">extractCompositeAnnotation(libsbml::Species* s) : CompositeAnnotation</text><polygon fill="#FFFF44" points="3259.5,674.1953,3263.5,678.1953,3259.5,682.1953,3255.5,678.1953" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="3268.5" y="683.6143">extractSpeciesEntity(libsbml::Species* s) : Entity</text><polygon fill="#FFFF44" points="3259.5,688.0313,3263.5,692.0313,3259.5,696.0313,3255.5,692.0313" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="3268.5" y="697.4502">extractSpeciesEntityDescriptor(libsbml::Species* s) : EntityDescriptor</text><ellipse cx="3259.5" cy="706.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="326" x="3268.5" y="711.2861">getRelationFromSBMLQual(libsbml::BiolQualifierType_t q) : Relation&amp;</text><polygon fill="#FFFF44" points="3259.5,715.7031,3263.5,719.7031,3259.5,723.7031,3255.5,719.7031" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="3268.5" y="725.1221">getResourceFor(libsbml::SBase* s) : Resource</text><ellipse cx="3259.5" cy="734.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="3268.5" y="738.958">getSBMLModel() : SBMLModel&amp;</text><ellipse cx="3259.5" cy="748.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="3268.5" y="752.7939">getSBMLModel() : SBMLModel&amp; {query}</text><polygon fill="#FFFF44" points="3259.5,757.2109,3263.5,761.2109,3259.5,765.2109,3255.5,761.2109" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="316" x="3268.5" y="766.6299">extractSingularAnnotation(libsbml::SBase* s) : SingularAnnotation</text><polygon fill="#FFFF44" points="3259.5,771.0469,3263.5,775.0469,3259.5,779.0469,3255.5,775.0469" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="333" x="3268.5" y="780.4658">extractSingularAnnotation(libsbml::Parameter* p) : SingularAnnotation</text><polygon fill="#FFFF44" points="3259.5,784.8828,3263.5,788.8828,3259.5,792.8828,3255.5,788.8828" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="406" x="3268.5" y="794.3018">makeUniqueMetaId(const SemSimModel&amp; model, const std::string&amp; base) : std::string</text><polygon fill="#FFFF44" points="3259.5,798.7188,3263.5,802.7188,3259.5,806.7188,3255.5,802.7188" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="3268.5" y="808.1377">assignParticipants(Process&amp; process, libsbml::Reaction* r) : void</text><polygon fill="#FFFF44" points="3259.5,812.5547,3263.5,816.5547,3259.5,820.5547,3255.5,816.5547" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="334" x="3268.5" y="821.9736">populateDefinitionsAndTerms(libsbml::SBase* s, EntityBase&amp; e) : void</text><polygon fill="#FFFF44" points="3259.5,826.3906,3263.5,830.3906,3259.5,834.3906,3255.5,830.3906" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="280" x="3268.5" y="835.8096">populateSBOTerm(libsbml::SBase* s, EntityBase&amp; e) : void</text><!--MD5=[57f73dbc490ae1951346d13b5c2b0c27]
class SBMLModel--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="324.7188" id="SBMLModel" style="stroke: #A80036; stroke-width: 1.5;" width="500" x="3250.5" y="902"/><ellipse cx="3463.75" cy="918" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3466.5156,913.875 Q3466.6719,913.6563 3466.8594,913.5469 Q3467.0469,913.4375 3467.2656,913.4375 Q3467.6406,913.4375 3467.875,913.6953 Q3468.1094,913.9531 3468.1094,914.5625 L3468.1094,916.0156 Q3468.1094,916.625 3467.875,916.8906 Q3467.6406,917.1563 3467.2656,917.1563 Q3466.9219,917.1563 3466.7188,916.9531 Q3466.5156,916.7656 3466.4063,916.25 Q3466.3594,915.8906 3466.1719,915.7031 Q3465.8438,915.3281 3465.2344,915.1094 Q3464.625,914.8906 3464,914.8906 Q3463.2344,914.8906 3462.6016,915.2188 Q3461.9688,915.5469 3461.4766,916.2969 Q3460.9844,917.0469 3460.9844,918.0781 L3460.9844,919.1719 Q3460.9844,920.4063 3461.875,921.2266 Q3462.7656,922.0469 3464.3594,922.0469 Q3465.2969,922.0469 3465.9531,921.7969 Q3466.3438,921.6406 3466.7656,921.2031 Q3467.0313,920.9375 3467.1797,920.8594 Q3467.3281,920.7813 3467.5313,920.7813 Q3467.8594,920.7813 3468.1172,921.0391 Q3468.375,921.2969 3468.375,921.6406 Q3468.375,921.9844 3468.0313,922.3906 Q3467.5313,922.9688 3466.7344,923.2969 Q3465.6563,923.75 3464.3594,923.75 Q3462.8438,923.75 3461.6406,923.125 Q3460.6563,922.625 3459.9688,921.5547 Q3459.2813,920.4844 3459.2813,919.2031 L3459.2813,918.0469 Q3459.2813,916.7188 3459.8984,915.5703 Q3460.5156,914.4219 3461.6094,913.8047 Q3462.7031,913.1875 3463.9375,913.1875 Q3464.6719,913.1875 3465.3203,913.3516 Q3465.9688,913.5156 3466.5156,913.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="65" x="3484.25" y="922.9102">SBMLModel</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3251.5" x2="3749.5" y1="934" y2="934"/><polygon fill="none" points="3261.5,940,3265.5,944,3261.5,948,3257.5,944" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="474" x="3270.5" y="949.4189">element_map_ : SEMSIM_TR1_NAMESPACE_QUAL unordered_map&lt;libsbml::SBase*, Component*&gt;</text><polygon fill="none" points="3261.5,953.8359,3265.5,957.8359,3261.5,961.8359,3257.5,957.8359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="462" x="3270.5" y="963.2549">element_id_map_ : SEMSIM_TR1_NAMESPACE_QUAL unordered_map&lt;std::string, Component*&gt;</text><polygon fill="none" points="3261.5,967.6719,3265.5,971.6719,3261.5,975.6719,3257.5,971.6719" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="3270.5" y="977.0908">d_ : libsbml::SBMLDocument*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3251.5" x2="3749.5" y1="983.5078" y2="983.5078"/><ellipse cx="3261.5" cy="994.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="3270.5" y="998.9268">SBMLModel(libsbml::SBMLDocument* d)</text><ellipse cx="3261.5" cy="1008.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="3270.5" y="1012.7627">SBMLModel(SBMLModel&amp;&amp; other)</text><ellipse cx="3261.5" cy="1022.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="3270.5" y="1026.5986">getComponent(libsbml::SBase* s) : Component* {query}</text><ellipse cx="3261.5" cy="1036.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="3270.5" y="1040.4346">getComponent(libsbml::SBase* s) : Component*</text><ellipse cx="3261.5" cy="1049.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="3270.5" y="1054.2705">getComponentForId(const std::string&amp; id) : Component* {query}</text><ellipse cx="3261.5" cy="1063.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="3270.5" y="1068.1064">getComponentForId(const std::string&amp; id) : Component*</text><ellipse cx="3261.5" cy="1077.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="3270.5" y="1081.9424">getProcess(libsbml::SBase* s) : Process*</text><ellipse cx="3261.5" cy="1091.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="237" x="3270.5" y="1095.7783">hasComponent(const std::string id) : bool {query}</text><ellipse cx="3261.5" cy="1105.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="3270.5" y="1109.6143">hasComponent(libsbml::SBase* s) : bool {query}</text><ellipse cx="3261.5" cy="1119.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="217" x="3270.5" y="1123.4502">hasProcess(libsbml::SBase* s) : bool {query}</text><ellipse cx="3261.5" cy="1132.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="3270.5" y="1137.2861">encodeXML() : std::string {query}</text><ellipse cx="3261.5" cy="1146.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="3270.5" y="1151.1221">getFormat() : std::string {query}</text><ellipse cx="3261.5" cy="1160.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="390" x="3270.5" y="1164.958">getRDF(const URI&amp; sbml_base_uri, const std::string&amp; format) : std::string {query}</text><ellipse cx="3261.5" cy="1174.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="422" x="3270.5" y="1178.7939">getRDF(const std::string&amp; sbml_base_uri, const std::string&amp; format) : std::string {query}</text><ellipse cx="3261.5" cy="1188.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="414" x="3270.5" y="1192.6299">setComponentAnnotation(libsbml::SBase* s, const AnnotationBase&amp; annotation) : void</text><ellipse cx="3261.5" cy="1202.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="402" x="3270.5" y="1206.4658">setComponentAnnotation(libsbml::SBase* s, const AnnotationPtr&amp; annotation) : void</text><ellipse cx="3261.5" cy="1215.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="379" x="3270.5" y="1220.3018">setComponentAnnotation(libsbml::SBase* s, AnnotationPtr&amp;&amp; annotation) : void</text><!--MD5=[45c202e7176b357b93f8f4d7cef12c99]
class SBMLSpecies--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="89.5078" id="SBMLSpecies" style="stroke: #A80036; stroke-width: 1.5;" width="438" x="1497.5" y="1019.5"/><ellipse cx="1673.75" cy="1035.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1676.5156,1031.375 Q1676.6719,1031.1563 1676.8594,1031.0469 Q1677.0469,1030.9375 1677.2656,1030.9375 Q1677.6406,1030.9375 1677.875,1031.1953 Q1678.1094,1031.4531 1678.1094,1032.0625 L1678.1094,1033.5156 Q1678.1094,1034.125 1677.875,1034.3906 Q1677.6406,1034.6563 1677.2656,1034.6563 Q1676.9219,1034.6563 1676.7188,1034.4531 Q1676.5156,1034.2656 1676.4063,1033.75 Q1676.3594,1033.3906 1676.1719,1033.2031 Q1675.8438,1032.8281 1675.2344,1032.6094 Q1674.625,1032.3906 1674,1032.3906 Q1673.2344,1032.3906 1672.6016,1032.7188 Q1671.9688,1033.0469 1671.4766,1033.7969 Q1670.9844,1034.5469 1670.9844,1035.5781 L1670.9844,1036.6719 Q1670.9844,1037.9063 1671.875,1038.7266 Q1672.7656,1039.5469 1674.3594,1039.5469 Q1675.2969,1039.5469 1675.9531,1039.2969 Q1676.3438,1039.1406 1676.7656,1038.7031 Q1677.0313,1038.4375 1677.1797,1038.3594 Q1677.3281,1038.2813 1677.5313,1038.2813 Q1677.8594,1038.2813 1678.1172,1038.5391 Q1678.375,1038.7969 1678.375,1039.1406 Q1678.375,1039.4844 1678.0313,1039.8906 Q1677.5313,1040.4688 1676.7344,1040.7969 Q1675.6563,1041.25 1674.3594,1041.25 Q1672.8438,1041.25 1671.6406,1040.625 Q1670.6563,1040.125 1669.9688,1039.0547 Q1669.2813,1037.9844 1669.2813,1036.7031 L1669.2813,1035.5469 Q1669.2813,1034.2188 1669.8984,1033.0703 Q1670.5156,1031.9219 1671.6094,1031.3047 Q1672.7031,1030.6875 1673.9375,1030.6875 Q1674.6719,1030.6875 1675.3203,1030.8516 Q1675.9688,1031.0156 1676.5156,1031.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="77" x="1694.25" y="1040.4102">SBMLSpecies</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1498.5" x2="1934.5" y1="1051.5" y2="1051.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1498.5" x2="1934.5" y1="1059.5" y2="1059.5"/><ellipse cx="1508.5" cy="1070.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="412" x="1517.5" y="1074.9189">GetSpeciesPhysicalProperty(libsbml::Species* s, libsbml::Model* m) : PhysicalProperty</text><ellipse cx="1508.5" cy="1084.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="333" x="1517.5" y="1088.7549">SubstanceUnitsAreConc(libsbml::Species* s, libsbml::Model* m) : bool</text><ellipse cx="1508.5" cy="1098.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="224" x="1517.5" y="1102.5908">UnitDefIsConc(libsbml::UnitDefinition* ud) : bool</text><!--MD5=[3cf46bc0680b88ec9fa9ebfa036f0ef4]
class SBO--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="61.8359" id="SBO" style="stroke: #A80036; stroke-width: 1.5;" width="178" x="5082.5" y="628"/><ellipse cx="5154.75" cy="644" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5157.5156,639.875 Q5157.6719,639.6563 5157.8594,639.5469 Q5158.0469,639.4375 5158.2656,639.4375 Q5158.6406,639.4375 5158.875,639.6953 Q5159.1094,639.9531 5159.1094,640.5625 L5159.1094,642.0156 Q5159.1094,642.625 5158.875,642.8906 Q5158.6406,643.1563 5158.2656,643.1563 Q5157.9219,643.1563 5157.7188,642.9531 Q5157.5156,642.7656 5157.4063,642.25 Q5157.3594,641.8906 5157.1719,641.7031 Q5156.8438,641.3281 5156.2344,641.1094 Q5155.625,640.8906 5155,640.8906 Q5154.2344,640.8906 5153.6016,641.2188 Q5152.9688,641.5469 5152.4766,642.2969 Q5151.9844,643.0469 5151.9844,644.0781 L5151.9844,645.1719 Q5151.9844,646.4063 5152.875,647.2266 Q5153.7656,648.0469 5155.3594,648.0469 Q5156.2969,648.0469 5156.9531,647.7969 Q5157.3438,647.6406 5157.7656,647.2031 Q5158.0313,646.9375 5158.1797,646.8594 Q5158.3281,646.7813 5158.5313,646.7813 Q5158.8594,646.7813 5159.1172,647.0391 Q5159.375,647.2969 5159.375,647.6406 Q5159.375,647.9844 5159.0313,648.3906 Q5158.5313,648.9688 5157.7344,649.2969 Q5156.6563,649.75 5155.3594,649.75 Q5153.8438,649.75 5152.6406,649.125 Q5151.6563,648.625 5150.9688,647.5547 Q5150.2813,646.4844 5150.2813,645.2031 L5150.2813,644.0469 Q5150.2813,642.7188 5150.8984,641.5703 Q5151.5156,640.4219 5152.6094,639.8047 Q5153.7031,639.1875 5154.9375,639.1875 Q5155.6719,639.1875 5156.3203,639.3516 Q5156.9688,639.5156 5157.5156,639.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="25" x="5175.25" y="648.9102">SBO</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5083.5" x2="5259.5" y1="660" y2="660"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="5083.5" x2="5259.5" y1="668" y2="668"/><ellipse cx="5093.5" cy="679" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="152" x="5102.5" y="683.4189">get(OntologyTerm t) : Resource</text><!--MD5=[d20b284c4665a10287baf4da791f1117]
class SelectQuery--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="75.6719" id="SelectQuery" style="stroke: #A80036; stroke-width: 1.5;" width="200" x="224.5" y="1377"/><ellipse cx="287.25" cy="1393" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M290.0156,1388.875 Q290.1719,1388.6563 290.3594,1388.5469 Q290.5469,1388.4375 290.7656,1388.4375 Q291.1406,1388.4375 291.375,1388.6953 Q291.6094,1388.9531 291.6094,1389.5625 L291.6094,1391.0156 Q291.6094,1391.625 291.375,1391.8906 Q291.1406,1392.1563 290.7656,1392.1563 Q290.4219,1392.1563 290.2188,1391.9531 Q290.0156,1391.7656 289.9063,1391.25 Q289.8594,1390.8906 289.6719,1390.7031 Q289.3438,1390.3281 288.7344,1390.1094 Q288.125,1389.8906 287.5,1389.8906 Q286.7344,1389.8906 286.1016,1390.2188 Q285.4688,1390.5469 284.9766,1391.2969 Q284.4844,1392.0469 284.4844,1393.0781 L284.4844,1394.1719 Q284.4844,1395.4063 285.375,1396.2266 Q286.2656,1397.0469 287.8594,1397.0469 Q288.7969,1397.0469 289.4531,1396.7969 Q289.8438,1396.6406 290.2656,1396.2031 Q290.5313,1395.9375 290.6797,1395.8594 Q290.8281,1395.7813 291.0313,1395.7813 Q291.3594,1395.7813 291.6172,1396.0391 Q291.875,1396.2969 291.875,1396.6406 Q291.875,1396.9844 291.5313,1397.3906 Q291.0313,1397.9688 290.2344,1398.2969 Q289.1563,1398.75 287.8594,1398.75 Q286.3438,1398.75 285.1406,1398.125 Q284.1563,1397.625 283.4688,1396.5547 Q282.7813,1395.4844 282.7813,1394.2031 L282.7813,1393.0469 Q282.7813,1391.7188 283.3984,1390.5703 Q284.0156,1389.4219 285.1094,1388.8047 Q286.2031,1388.1875 287.4375,1388.1875 Q288.1719,1388.1875 288.8203,1388.3516 Q289.4688,1388.5156 290.0156,1388.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="66" x="307.75" y="1397.9102">SelectQuery</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="225.5" x2="423.5" y1="1409" y2="1409"/><polygon fill="none" points="235.5,1415,239.5,1419,235.5,1423,231.5,1419" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="244.5" y="1424.4189">where_ : ConditionPtr</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="225.5" x2="423.5" y1="1430.8359" y2="1430.8359"/><ellipse cx="235.5" cy="1441.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="244.5" y="1446.2549">SelectQuery(ConditionPtr&amp;&amp; where)</text><!--MD5=[6f576134be89a9f90e5bb95b78ba0989]
class SemSimModel--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="324.7188" id="SemSimModel" style="stroke: #A80036; stroke-width: 1.5;" width="480" x="3715.5" y="496.5"/><ellipse cx="3910.75" cy="512.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3912.9375,514.2656 L3908.7969,514.2656 L3908.375,515.2969 L3908.7969,515.2969 Q3909.4063,515.2969 3909.6719,515.5313 Q3909.9375,515.7656 3909.9375,516.1563 Q3909.9375,516.5313 3909.6719,516.7656 Q3909.4063,517 3908.7969,517 L3906.5,517 Q3905.8906,517 3905.6328,516.7656 Q3905.375,516.5313 3905.375,516.1406 Q3905.375,515.7656 3905.6484,515.5234 Q3905.9219,515.2813 3906.5469,515.2969 L3909.2188,508.6406 L3908.1094,508.6406 Q3907.5,508.6406 3907.2344,508.4063 Q3906.9688,508.1719 3906.9688,507.7813 Q3906.9688,507.4063 3907.2344,507.1719 Q3907.5,506.9375 3908.1094,506.9375 L3911.7813,506.9375 L3915.1719,515.2969 Q3915.7656,515.2969 3915.9531,515.4375 Q3916.3438,515.7031 3916.3438,516.1563 Q3916.3438,516.5313 3916.0859,516.7656 Q3915.8281,517 3915.2188,517 L3912.9219,517 Q3912.3125,517 3912.0469,516.7656 Q3911.7813,516.5313 3911.7813,516.1406 Q3911.7813,515.7656 3912.0469,515.5313 Q3912.3125,515.2969 3912.9219,515.2969 L3913.3438,515.2969 L3912.9375,514.2656 Z M3912.2188,512.5625 L3910.8594,509.1875 L3909.4844,512.5625 L3912.2188,512.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="81" x="3931.25" y="517.4102">SemSimModel</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3716.5" x2="4194.5" y1="528.5" y2="528.5"/><polygon fill="none" points="3726.5,534.5,3730.5,538.5,3726.5,542.5,3722.5,538.5" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="3735.5" y="543.9189">components_ : semsim::Components</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3716.5" x2="4194.5" y1="550.3359" y2="550.3359"/><ellipse cx="3726.5" cy="561.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="3735.5" y="565.7549">SemSimModel()</text><ellipse cx="3726.5" cy="575.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="3735.5" y="579.5908">SemSimModel(const SemSimModel&amp; other)</text><ellipse cx="3726.5" cy="589.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="454" x="3735.5" y="593.4268">SemSimModel(SemSimModel&amp;&amp; other) noexcept: components_(std::move(othercomponents_))</text><ellipse cx="3726.5" cy="602.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="3735.5" y="607.2627">~SemSimModel()</text><ellipse cx="3726.5" cy="616.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="321" x="3735.5" y="621.0986">findComponentWithMetaId(const std::string&amp; metaid) : Component&amp;</text><ellipse cx="3726.5" cy="630.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="360" x="3735.5" y="634.9346">findComponentWithMetaId(const std::string&amp; metaid) : Component&amp; {query}</text><ellipse cx="3726.5" cy="644.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="3735.5" y="648.7705">addComponent(const Component&amp; component) : Component*</text><ellipse cx="3726.5" cy="658.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="3735.5" y="662.6064">addComponent(Component&amp;&amp; component) : Component*</text><ellipse cx="3726.5" cy="672.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="3735.5" y="676.4424">getComponents() : Components&amp; {query}</text><ellipse cx="3726.5" cy="685.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="3735.5" y="690.2783">getComponents() : Components&amp;</text><ellipse cx="3726.5" cy="699.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="3735.5" y="704.1143">addComponent(const Process&amp; component) : Process*</text><ellipse cx="3726.5" cy="713.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="243" x="3735.5" y="717.9502">addComponent(Process&amp;&amp; component) : Process*</text><ellipse cx="3726.5" cy="727.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="3735.5" y="731.7861">containsMetaId(const std::string&amp; metaid) : bool {query}</text><ellipse cx="3726.5" cy="741.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="3735.5" y="745.6221">hasComponentWithMetaId(const std::string&amp; metaid) : bool {query}</text><ellipse cx="3726.5" cy="755.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="3735.5" y="759.458">getNumComponents() : std::size_t {query}</text><ellipse cx="3726.5" cy="768.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="162" x="3735.5" y="773.2939">encodeXML() : std::string {query}</text><ellipse cx="3726.5" cy="782.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="154" x="3735.5" y="787.1299">getFormat() : std::string {query}</text><ellipse cx="3726.5" cy="796.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="401" x="3735.5" y="800.9658">getRDF(const URI&amp; sbml_base_uri, const std::string&amp; format) : std::string {query}</text><ellipse cx="3726.5" cy="810.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="3735.5" y="814.8018">humanize() : std::string {query}</text><!--MD5=[6902b8c9f4611437208785eb88a9d6e8]
class SemSimObject--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="255.5391" id="SemSimObject" style="stroke: #A80036; stroke-width: 1.5;" width="275" x="460" y="1287"/><ellipse cx="551.75" cy="1303" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M554.5156,1298.875 Q554.6719,1298.6563 554.8594,1298.5469 Q555.0469,1298.4375 555.2656,1298.4375 Q555.6406,1298.4375 555.875,1298.6953 Q556.1094,1298.9531 556.1094,1299.5625 L556.1094,1301.0156 Q556.1094,1301.625 555.875,1301.8906 Q555.6406,1302.1563 555.2656,1302.1563 Q554.9219,1302.1563 554.7188,1301.9531 Q554.5156,1301.7656 554.4063,1301.25 Q554.3594,1300.8906 554.1719,1300.7031 Q553.8438,1300.3281 553.2344,1300.1094 Q552.625,1299.8906 552,1299.8906 Q551.2344,1299.8906 550.6016,1300.2188 Q549.9688,1300.5469 549.4766,1301.2969 Q548.9844,1302.0469 548.9844,1303.0781 L548.9844,1304.1719 Q548.9844,1305.4063 549.875,1306.2266 Q550.7656,1307.0469 552.3594,1307.0469 Q553.2969,1307.0469 553.9531,1306.7969 Q554.3438,1306.6406 554.7656,1306.2031 Q555.0313,1305.9375 555.1797,1305.8594 Q555.3281,1305.7813 555.5313,1305.7813 Q555.8594,1305.7813 556.1172,1306.0391 Q556.375,1306.2969 556.375,1306.6406 Q556.375,1306.9844 556.0313,1307.3906 Q555.5313,1307.9688 554.7344,1308.2969 Q553.6563,1308.75 552.3594,1308.75 Q550.8438,1308.75 549.6406,1308.125 Q548.6563,1307.625 547.9688,1306.5547 Q547.2813,1305.4844 547.2813,1304.2031 L547.2813,1303.0469 Q547.2813,1301.7188 547.8984,1300.5703 Q548.5156,1299.4219 549.6094,1298.8047 Q550.7031,1298.1875 551.9375,1298.1875 Q552.6719,1298.1875 553.3203,1298.3516 Q553.9688,1298.5156 554.5156,1298.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="83" x="572.25" y="1307.9102">SemSimObject</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="461" x2="734" y1="1319" y2="1319"/><polygon fill="none" points="471,1325,475,1329,471,1333,467,1329" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="480" y="1334.4189">semsimtype : SemSimTypes</text><polygon fill="none" points="471,1338.8359,475,1342.8359,471,1346.8359,467,1342.8359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="480" y="1348.2549">description : std::string</text><polygon fill="none" points="471,1352.6719,475,1356.6719,471,1360.6719,467,1356.6719" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="480" y="1362.0908">metadataID : std::string</text><polygon fill="none" points="471,1366.5078,475,1370.5078,471,1374.5078,467,1370.5078" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="480" y="1375.9268">name : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="461" x2="734" y1="1382.3438" y2="1382.3438"/><ellipse cx="471" cy="1393.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="480" y="1397.7627">SemSimObject(SemSimTypes type)</text><ellipse cx="471" cy="1407.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="480" y="1411.5986">hasDescription() : bool {query}</text><ellipse cx="471" cy="1421.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="480" y="1425.4346">hasMetadataID() : bool {query}</text><ellipse cx="471" cy="1434.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="480" y="1439.2705">hasName() : bool {query}</text><ellipse cx="471" cy="1448.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="480" y="1453.1064">getDescription() : std::string&amp; {query}</text><ellipse cx="471" cy="1462.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="480" y="1466.9424">getMetadataID() : std::string&amp; {query}</text><ellipse cx="471" cy="1476.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="480" y="1480.7783">getName() : std::string&amp; {query}</text><ellipse cx="471" cy="1490.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="480" y="1494.6143">copyDescription(const SemSimObject&amp; other) : void</text><ellipse cx="471" cy="1504.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="480" y="1508.4502">setDescription(const std::string&amp; description) : void</text><ellipse cx="471" cy="1517.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="480" y="1522.2861">setMetadataID(const std::string&amp; metadataID) : void</text><ellipse cx="471" cy="1531.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="480" y="1536.1221">setName(const std::string&amp; name) : void</text><!--MD5=[3c11629c5314607dcae72425f0c11ee0]
class SingularAnnotation--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="227.8672" id="SingularAnnotation" style="stroke: #A80036; stroke-width: 1.5;" width="540" x="2602.5" y="545"/><ellipse cx="2816.25" cy="561" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2819.0156,556.875 Q2819.1719,556.6563 2819.3594,556.5469 Q2819.5469,556.4375 2819.7656,556.4375 Q2820.1406,556.4375 2820.375,556.6953 Q2820.6094,556.9531 2820.6094,557.5625 L2820.6094,559.0156 Q2820.6094,559.625 2820.375,559.8906 Q2820.1406,560.1563 2819.7656,560.1563 Q2819.4219,560.1563 2819.2188,559.9531 Q2819.0156,559.7656 2818.9063,559.25 Q2818.8594,558.8906 2818.6719,558.7031 Q2818.3438,558.3281 2817.7344,558.1094 Q2817.125,557.8906 2816.5,557.8906 Q2815.7344,557.8906 2815.1016,558.2188 Q2814.4688,558.5469 2813.9766,559.2969 Q2813.4844,560.0469 2813.4844,561.0781 L2813.4844,562.1719 Q2813.4844,563.4063 2814.375,564.2266 Q2815.2656,565.0469 2816.8594,565.0469 Q2817.7969,565.0469 2818.4531,564.7969 Q2818.8438,564.6406 2819.2656,564.2031 Q2819.5313,563.9375 2819.6797,563.8594 Q2819.8281,563.7813 2820.0313,563.7813 Q2820.3594,563.7813 2820.6172,564.0391 Q2820.875,564.2969 2820.875,564.6406 Q2820.875,564.9844 2820.5313,565.3906 Q2820.0313,565.9688 2819.2344,566.2969 Q2818.1563,566.75 2816.8594,566.75 Q2815.3438,566.75 2814.1406,566.125 Q2813.1563,565.625 2812.4688,564.5547 Q2811.7813,563.4844 2811.7813,562.2031 L2811.7813,561.0469 Q2811.7813,559.7188 2812.3984,558.5703 Q2813.0156,557.4219 2814.1094,556.8047 Q2815.2031,556.1875 2816.4375,556.1875 Q2817.1719,556.1875 2817.8203,556.3516 Q2818.4688,556.5156 2819.0156,556.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="104" x="2836.75" y="565.9102">SingularAnnotation</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2603.5" x2="3141.5" y1="577" y2="577"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2603.5" x2="3141.5" y1="585" y2="585"/><ellipse cx="2613.5" cy="596" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="354" x="2622.5" y="600.4189">SingularAnnotation(const std::string&amp; metaid, const Resource&amp; definition)</text><ellipse cx="2613.5" cy="609.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="2622.5" y="614.2549">SingularAnnotation(const std::string&amp; metaid)</text><ellipse cx="2613.5" cy="623.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="331" x="2622.5" y="628.0908">SingularAnnotation(const std::string&amp; metaid, Resource&amp;&amp; definition)</text><ellipse cx="2613.5" cy="637.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="2622.5" y="641.9268">SingularAnnotation(const SingularAnnotation&amp; other)</text><ellipse cx="2613.5" cy="651.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="2622.5" y="655.7627">SingularAnnotation(SingularAnnotation&amp;&amp; other)</text><ellipse cx="2613.5" cy="665.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="2622.5" y="669.5986">clone() : AnnotationBase* {query}</text><ellipse cx="2613.5" cy="679.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="339" x="2622.5" y="683.4346">makeComposite(const PhysicalProperty&amp; prop) : AnnotationPtr {query}</text><ellipse cx="2613.5" cy="692.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="2622.5" y="697.2705">getURI(const URI&amp; base) : URI {query}</text><ellipse cx="2613.5" cy="706.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="2622.5" y="711.1064">isComposite() : bool {query}</text><ellipse cx="2613.5" cy="720.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="390" x="2622.5" y="724.9424">getRDF(const URI&amp; sbml_base_uri, const std::string&amp; format) : std::string {query}</text><ellipse cx="2613.5" cy="734.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="2622.5" y="738.7783">humanize() : std::string {query}</text><ellipse cx="2613.5" cy="748.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="2622.5" y="752.6143">getMetaId() : std::string&amp; {query}</text><ellipse cx="2613.5" cy="762.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="514" x="2622.5" y="766.4502">serializeToRDF(const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}</text><!--MD5=[bb0076f36699579ceee0ebce73764b72]
class Sink--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="131.0156" id="Sink" style="stroke: #A80036; stroke-width: 1.5;" width="536" x="3429.5" y="1349.5"/><ellipse cx="3681.25" cy="1365.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3684.0156,1361.375 Q3684.1719,1361.1563 3684.3594,1361.0469 Q3684.5469,1360.9375 3684.7656,1360.9375 Q3685.1406,1360.9375 3685.375,1361.1953 Q3685.6094,1361.4531 3685.6094,1362.0625 L3685.6094,1363.5156 Q3685.6094,1364.125 3685.375,1364.3906 Q3685.1406,1364.6563 3684.7656,1364.6563 Q3684.4219,1364.6563 3684.2188,1364.4531 Q3684.0156,1364.2656 3683.9063,1363.75 Q3683.8594,1363.3906 3683.6719,1363.2031 Q3683.3438,1362.8281 3682.7344,1362.6094 Q3682.125,1362.3906 3681.5,1362.3906 Q3680.7344,1362.3906 3680.1016,1362.7188 Q3679.4688,1363.0469 3678.9766,1363.7969 Q3678.4844,1364.5469 3678.4844,1365.5781 L3678.4844,1366.6719 Q3678.4844,1367.9063 3679.375,1368.7266 Q3680.2656,1369.5469 3681.8594,1369.5469 Q3682.7969,1369.5469 3683.4531,1369.2969 Q3683.8438,1369.1406 3684.2656,1368.7031 Q3684.5313,1368.4375 3684.6797,1368.3594 Q3684.8281,1368.2813 3685.0313,1368.2813 Q3685.3594,1368.2813 3685.6172,1368.5391 Q3685.875,1368.7969 3685.875,1369.1406 Q3685.875,1369.4844 3685.5313,1369.8906 Q3685.0313,1370.4688 3684.2344,1370.7969 Q3683.1563,1371.25 3681.8594,1371.25 Q3680.3438,1371.25 3679.1406,1370.625 Q3678.1563,1370.125 3677.4688,1369.0547 Q3676.7813,1367.9844 3676.7813,1366.7031 L3676.7813,1365.5469 Q3676.7813,1364.2188 3677.3984,1363.0703 Q3678.0156,1361.9219 3679.1094,1361.3047 Q3680.2031,1360.6875 3681.4375,1360.6875 Q3682.1719,1360.6875 3682.8203,1360.8516 Q3683.4688,1361.0156 3684.0156,1361.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="24" x="3701.75" y="1370.4102">Sink</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3430.5" x2="3964.5" y1="1381.5" y2="1381.5"/><polygon fill="none" points="3440.5,1387.5,3444.5,1391.5,3440.5,1395.5,3436.5,1391.5" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="3449.5" y="1396.9189">component_ : Component*</text><polygon fill="none" points="3440.5,1401.3359,3444.5,1405.3359,3440.5,1409.3359,3436.5,1405.3359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="3449.5" y="1410.7549">multiplier_ : double</text><polygon fill="none" points="3440.5,1415.1719,3444.5,1419.1719,3440.5,1423.1719,3436.5,1419.1719" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3449.5" y="1424.5908">id_ : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3430.5" x2="3964.5" y1="1431.0078" y2="1431.0078"/><ellipse cx="3440.5" cy="1442.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="3449.5" y="1446.4268">Sink(const std::string&amp; id, Component* component, double multiplier)</text><ellipse cx="3440.5" cy="1455.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="510" x="3449.5" y="1460.2627">serializeToRDF(const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : URI {query}</text><ellipse cx="3440.5" cy="1469.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="3449.5" y="1474.0986">containsMetaId(const std::string&amp; metaid) : bool {query}</text><!--MD5=[43d3c0ba1d3b9c6f5e40c8769cc5b343]
class Source--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="131.0156" id="Source" style="stroke: #A80036; stroke-width: 1.5;" width="536" x="2287.5" y="1349.5"/><ellipse cx="2531.75" cy="1365.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2534.5156,1361.375 Q2534.6719,1361.1563 2534.8594,1361.0469 Q2535.0469,1360.9375 2535.2656,1360.9375 Q2535.6406,1360.9375 2535.875,1361.1953 Q2536.1094,1361.4531 2536.1094,1362.0625 L2536.1094,1363.5156 Q2536.1094,1364.125 2535.875,1364.3906 Q2535.6406,1364.6563 2535.2656,1364.6563 Q2534.9219,1364.6563 2534.7188,1364.4531 Q2534.5156,1364.2656 2534.4063,1363.75 Q2534.3594,1363.3906 2534.1719,1363.2031 Q2533.8438,1362.8281 2533.2344,1362.6094 Q2532.625,1362.3906 2532,1362.3906 Q2531.2344,1362.3906 2530.6016,1362.7188 Q2529.9688,1363.0469 2529.4766,1363.7969 Q2528.9844,1364.5469 2528.9844,1365.5781 L2528.9844,1366.6719 Q2528.9844,1367.9063 2529.875,1368.7266 Q2530.7656,1369.5469 2532.3594,1369.5469 Q2533.2969,1369.5469 2533.9531,1369.2969 Q2534.3438,1369.1406 2534.7656,1368.7031 Q2535.0313,1368.4375 2535.1797,1368.3594 Q2535.3281,1368.2813 2535.5313,1368.2813 Q2535.8594,1368.2813 2536.1172,1368.5391 Q2536.375,1368.7969 2536.375,1369.1406 Q2536.375,1369.4844 2536.0313,1369.8906 Q2535.5313,1370.4688 2534.7344,1370.7969 Q2533.6563,1371.25 2532.3594,1371.25 Q2530.8438,1371.25 2529.6406,1370.625 Q2528.6563,1370.125 2527.9688,1369.0547 Q2527.2813,1367.9844 2527.2813,1366.7031 L2527.2813,1365.5469 Q2527.2813,1364.2188 2527.8984,1363.0703 Q2528.5156,1361.9219 2529.6094,1361.3047 Q2530.7031,1360.6875 2531.9375,1360.6875 Q2532.6719,1360.6875 2533.3203,1360.8516 Q2533.9688,1361.0156 2534.5156,1361.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="39" x="2552.25" y="1370.4102">Source</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2288.5" x2="2822.5" y1="1381.5" y2="1381.5"/><polygon fill="none" points="2298.5,1387.5,2302.5,1391.5,2298.5,1395.5,2294.5,1391.5" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="2307.5" y="1396.9189">component_ : Component*</text><polygon fill="none" points="2298.5,1401.3359,2302.5,1405.3359,2298.5,1409.3359,2294.5,1405.3359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="2307.5" y="1410.7549">multiplier_ : double</text><polygon fill="none" points="2298.5,1415.1719,2302.5,1419.1719,2298.5,1423.1719,2294.5,1419.1719" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2307.5" y="1424.5908">id_ : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2288.5" x2="2822.5" y1="1431.0078" y2="1431.0078"/><ellipse cx="2298.5" cy="1442.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="341" x="2307.5" y="1446.4268">Source(const std::string&amp; id, Component* component, double multiplier)</text><ellipse cx="2298.5" cy="1455.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="510" x="2307.5" y="1460.2627">serializeToRDF(const URI&amp; sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : URI {query}</text><ellipse cx="2298.5" cy="1469.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="2307.5" y="1474.0986">containsMetaId(const std::string&amp; metaid) : bool {query}</text><!--MD5=[9d35236b92952560f647498cf8a29acb]
class Term--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="214.0313" id="Term" style="stroke: #A80036; stroke-width: 1.5;" width="308" x="4413.5" y="957.5"/><ellipse cx="4548.75" cy="973.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4551.5156,969.375 Q4551.6719,969.1563 4551.8594,969.0469 Q4552.0469,968.9375 4552.2656,968.9375 Q4552.6406,968.9375 4552.875,969.1953 Q4553.1094,969.4531 4553.1094,970.0625 L4553.1094,971.5156 Q4553.1094,972.125 4552.875,972.3906 Q4552.6406,972.6563 4552.2656,972.6563 Q4551.9219,972.6563 4551.7188,972.4531 Q4551.5156,972.2656 4551.4063,971.75 Q4551.3594,971.3906 4551.1719,971.2031 Q4550.8438,970.8281 4550.2344,970.6094 Q4549.625,970.3906 4549,970.3906 Q4548.2344,970.3906 4547.6016,970.7188 Q4546.9688,971.0469 4546.4766,971.7969 Q4545.9844,972.5469 4545.9844,973.5781 L4545.9844,974.6719 Q4545.9844,975.9063 4546.875,976.7266 Q4547.7656,977.5469 4549.3594,977.5469 Q4550.2969,977.5469 4550.9531,977.2969 Q4551.3438,977.1406 4551.7656,976.7031 Q4552.0313,976.4375 4552.1797,976.3594 Q4552.3281,976.2813 4552.5313,976.2813 Q4552.8594,976.2813 4553.1172,976.5391 Q4553.375,976.7969 4553.375,977.1406 Q4553.375,977.4844 4553.0313,977.8906 Q4552.5313,978.4688 4551.7344,978.7969 Q4550.6563,979.25 4549.3594,979.25 Q4547.8438,979.25 4546.6406,978.625 Q4545.6563,978.125 4544.9688,977.0547 Q4544.2813,975.9844 4544.2813,974.7031 L4544.2813,973.5469 Q4544.2813,972.2188 4544.8984,971.0703 Q4545.5156,969.9219 4546.6094,969.3047 Q4547.7031,968.6875 4548.9375,968.6875 Q4549.6719,968.6875 4550.3203,968.8516 Q4550.9688,969.0156 4551.5156,969.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="29" x="4569.25" y="978.4102">Term</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4414.5" x2="4720.5" y1="989.5" y2="989.5"/><polygon fill="none" points="4424.5,995.5,4428.5,999.5,4424.5,1003.5,4420.5,999.5" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="4433.5" y="1004.9189">relation_ : Relation</text><polygon fill="none" points="4424.5,1009.3359,4428.5,1013.3359,4424.5,1017.3359,4420.5,1013.3359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="4433.5" y="1018.7549">resource_ : Resource</text><polygon fill="none" points="4424.5,1023.1719,4428.5,1027.1719,4424.5,1031.1719,4420.5,1027.1719" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="4433.5" y="1032.5908">is_value_ : bool</text><polygon fill="none" points="4424.5,1037.0078,4428.5,1041.0078,4424.5,1045.0078,4420.5,1041.0078" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="4433.5" y="1046.4268">value_ : double</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4414.5" x2="4720.5" y1="1052.8438" y2="1052.8438"/><ellipse cx="4424.5" cy="1063.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="4433.5" y="1068.2627">Term(const Relation&amp; relation, const Resource&amp; resource)</text><ellipse cx="4424.5" cy="1077.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="4433.5" y="1082.0986">Term(Relation&amp;&amp; relation, Resource&amp;&amp; resource)</text><ellipse cx="4424.5" cy="1091.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="4433.5" y="1095.9346">Term(const Relation&amp; relation, const double value)</text><ellipse cx="4424.5" cy="1105.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="4433.5" y="1109.7705">getRelation() : Relation&amp; {query}</text><ellipse cx="4424.5" cy="1119.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="4433.5" y="1123.6064">getResource() : Resource&amp; {query}</text><ellipse cx="4424.5" cy="1133.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="4433.5" y="1137.4424">isValue() : bool {query}</text><ellipse cx="4424.5" cy="1146.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="4433.5" y="1151.2783">getValue() : double {query}</text><ellipse cx="4424.5" cy="1160.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="4433.5" y="1165.1143">toString() : std::string {query}</text><!--MD5=[aa8e2326924bfffcd09b19a64a8af289]
class URI--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="186.3594" id="URI" style="stroke: #A80036; stroke-width: 1.5;" width="284" x="4181.5" y="1741.5"/><ellipse cx="4308.75" cy="1757.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4311.5156,1753.375 Q4311.6719,1753.1563 4311.8594,1753.0469 Q4312.0469,1752.9375 4312.2656,1752.9375 Q4312.6406,1752.9375 4312.875,1753.1953 Q4313.1094,1753.4531 4313.1094,1754.0625 L4313.1094,1755.5156 Q4313.1094,1756.125 4312.875,1756.3906 Q4312.6406,1756.6563 4312.2656,1756.6563 Q4311.9219,1756.6563 4311.7188,1756.4531 Q4311.5156,1756.2656 4311.4063,1755.75 Q4311.3594,1755.3906 4311.1719,1755.2031 Q4310.8438,1754.8281 4310.2344,1754.6094 Q4309.625,1754.3906 4309,1754.3906 Q4308.2344,1754.3906 4307.6016,1754.7188 Q4306.9688,1755.0469 4306.4766,1755.7969 Q4305.9844,1756.5469 4305.9844,1757.5781 L4305.9844,1758.6719 Q4305.9844,1759.9063 4306.875,1760.7266 Q4307.7656,1761.5469 4309.3594,1761.5469 Q4310.2969,1761.5469 4310.9531,1761.2969 Q4311.3438,1761.1406 4311.7656,1760.7031 Q4312.0313,1760.4375 4312.1797,1760.3594 Q4312.3281,1760.2813 4312.5313,1760.2813 Q4312.8594,1760.2813 4313.1172,1760.5391 Q4313.375,1760.7969 4313.375,1761.1406 Q4313.375,1761.4844 4313.0313,1761.8906 Q4312.5313,1762.4688 4311.7344,1762.7969 Q4310.6563,1763.25 4309.3594,1763.25 Q4307.8438,1763.25 4306.6406,1762.625 Q4305.6563,1762.125 4304.9688,1761.0547 Q4304.2813,1759.9844 4304.2813,1758.7031 L4304.2813,1757.5469 Q4304.2813,1756.2188 4304.8984,1755.0703 Q4305.5156,1753.9219 4306.6094,1753.3047 Q4307.7031,1752.6875 4308.9375,1752.6875 Q4309.6719,1752.6875 4310.3203,1752.8516 Q4310.9688,1753.0156 4311.5156,1753.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="21" x="4329.25" y="1762.4102">URI</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4182.5" x2="4464.5" y1="1773.5" y2="1773.5"/><polygon fill="none" points="4192.5,1779.5,4196.5,1783.5,4192.5,1787.5,4188.5,1783.5" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="4201.5" y="1788.9189">encoded_uri_ : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4182.5" x2="4464.5" y1="1795.3359" y2="1795.3359"/><ellipse cx="4192.5" cy="1806.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="24" x="4201.5" y="1810.7549">URI()</text><ellipse cx="4192.5" cy="1820.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="4201.5" y="1824.5908">URI(const std::string&amp; uri)</text><ellipse cx="4192.5" cy="1834.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="4201.5" y="1838.4268">URI(const char* uri)</text><ellipse cx="4192.5" cy="1847.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="4201.5" y="1852.2627">URI(std::string&amp;&amp; uri)</text><ellipse cx="4192.5" cy="1861.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="4201.5" y="1866.0986">appendToFrag(const std::string&amp; suffix) : URI {query}</text><ellipse cx="4192.5" cy="1875.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="4201.5" y="1879.9346">withFrag(const std::string&amp; suffix) : URI {query}</text><ellipse cx="4192.5" cy="1889.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="4201.5" y="1893.7705">operator==(const URI&amp; other) : bool {query}</text><ellipse cx="4192.5" cy="1903.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="4201.5" y="1907.6064">encode() : std::string {query}</text><ellipse cx="4192.5" cy="1917.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="4201.5" y="1921.4424">toString() : std::string {query}</text><!--MD5=[0a8a7ece0e68c8ddb569b7da79945513]
class bqb--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="255.5391" id="bqb" style="stroke: #A80036; stroke-width: 1.5;" width="261" x="4757" y="936.5"/><ellipse cx="4872.75" cy="952.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4875.5156,948.375 Q4875.6719,948.1563 4875.8594,948.0469 Q4876.0469,947.9375 4876.2656,947.9375 Q4876.6406,947.9375 4876.875,948.1953 Q4877.1094,948.4531 4877.1094,949.0625 L4877.1094,950.5156 Q4877.1094,951.125 4876.875,951.3906 Q4876.6406,951.6563 4876.2656,951.6563 Q4875.9219,951.6563 4875.7188,951.4531 Q4875.5156,951.2656 4875.4063,950.75 Q4875.3594,950.3906 4875.1719,950.2031 Q4874.8438,949.8281 4874.2344,949.6094 Q4873.625,949.3906 4873,949.3906 Q4872.2344,949.3906 4871.6016,949.7188 Q4870.9688,950.0469 4870.4766,950.7969 Q4869.9844,951.5469 4869.9844,952.5781 L4869.9844,953.6719 Q4869.9844,954.9063 4870.875,955.7266 Q4871.7656,956.5469 4873.3594,956.5469 Q4874.2969,956.5469 4874.9531,956.2969 Q4875.3438,956.1406 4875.7656,955.7031 Q4876.0313,955.4375 4876.1797,955.3594 Q4876.3281,955.2813 4876.5313,955.2813 Q4876.8594,955.2813 4877.1172,955.5391 Q4877.375,955.7969 4877.375,956.1406 Q4877.375,956.4844 4877.0313,956.8906 Q4876.5313,957.4688 4875.7344,957.7969 Q4874.6563,958.25 4873.3594,958.25 Q4871.8438,958.25 4870.6406,957.625 Q4869.6563,957.125 4868.9688,956.0547 Q4868.2813,954.9844 4868.2813,953.7031 L4868.2813,952.5469 Q4868.2813,951.2188 4868.8984,950.0703 Q4869.5156,948.9219 4870.6094,948.3047 Q4871.7031,947.6875 4872.9375,947.6875 Q4873.6719,947.6875 4874.3203,947.8516 Q4874.9688,948.0156 4875.5156,948.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="21" x="4893.25" y="957.4102">bqb</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4758" x2="5017" y1="968.5" y2="968.5"/><ellipse cx="4768" cy="979.5" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="148" x="4777" y="983.9189">encodes : const static Relation</text><ellipse cx="4768" cy="993.3359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="143" x="4777" y="997.7549">hasPart : const static Relation</text><ellipse cx="4768" cy="1007.1719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="165" x="4777" y="1011.5908">hasProperty : const static Relation</text><ellipse cx="4768" cy="1021.0078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="154" x="4777" y="1025.4268">hasTaxon : const static Relation</text><ellipse cx="4768" cy="1034.8438" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="162" x="4777" y="1039.2627">hasVersion : const static Relation</text><ellipse cx="4768" cy="1048.6797" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="114" x="4777" y="1053.0986">is : const static Relation</text><ellipse cx="4768" cy="1062.5156" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="176" x="4777" y="1066.9346">isDescribedBy : const static Relation</text><ellipse cx="4768" cy="1076.3516" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="169" x="4777" y="1080.7705">isEncodedBy : const static Relation</text><ellipse cx="4768" cy="1090.1875" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="167" x="4777" y="1094.6064">isHomologTo : const static Relation</text><ellipse cx="4768" cy="1104.0234" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="4777" y="1108.4424">isPartOf : const static Relation</text><ellipse cx="4768" cy="1117.8594" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="167" x="4777" y="1122.2783">isPropertyOf : const static Relation</text><ellipse cx="4768" cy="1131.6953" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="4777" y="1136.1143">isVersionOf : const static Relation</text><ellipse cx="4768" cy="1145.5313" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="148" x="4777" y="1149.9502">occursIn : const static Relation</text><ellipse cx="4768" cy="1159.3672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="135" x="4777" y="1163.7861">root : const static std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4758" x2="5017" y1="1170.2031" y2="1170.2031"/><ellipse cx="4768" cy="1181.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="235" x="4777" y="1185.6221">humanizeQualifier(const Relation&amp; q) : std::string</text><!--MD5=[d57a266d52a5a2f856a1eb97f542a699]
class semsim--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="158.6875" id="semsim" style="stroke: #A80036; stroke-width: 1.5;" width="267" x="3786" y="985"/><ellipse cx="3892.25" cy="1001" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3895.0156,996.875 Q3895.1719,996.6563 3895.3594,996.5469 Q3895.5469,996.4375 3895.7656,996.4375 Q3896.1406,996.4375 3896.375,996.6953 Q3896.6094,996.9531 3896.6094,997.5625 L3896.6094,999.0156 Q3896.6094,999.625 3896.375,999.8906 Q3896.1406,1000.1563 3895.7656,1000.1563 Q3895.4219,1000.1563 3895.2188,999.9531 Q3895.0156,999.7656 3894.9063,999.25 Q3894.8594,998.8906 3894.6719,998.7031 Q3894.3438,998.3281 3893.7344,998.1094 Q3893.125,997.8906 3892.5,997.8906 Q3891.7344,997.8906 3891.1016,998.2188 Q3890.4688,998.5469 3889.9766,999.2969 Q3889.4844,1000.0469 3889.4844,1001.0781 L3889.4844,1002.1719 Q3889.4844,1003.4063 3890.375,1004.2266 Q3891.2656,1005.0469 3892.8594,1005.0469 Q3893.7969,1005.0469 3894.4531,1004.7969 Q3894.8438,1004.6406 3895.2656,1004.2031 Q3895.5313,1003.9375 3895.6797,1003.8594 Q3895.8281,1003.7813 3896.0313,1003.7813 Q3896.3594,1003.7813 3896.6172,1004.0391 Q3896.875,1004.2969 3896.875,1004.6406 Q3896.875,1004.9844 3896.5313,1005.3906 Q3896.0313,1005.9688 3895.2344,1006.2969 Q3894.1563,1006.75 3892.8594,1006.75 Q3891.3438,1006.75 3890.1406,1006.125 Q3889.1563,1005.625 3888.4688,1004.5547 Q3887.7813,1003.4844 3887.7813,1002.2031 L3887.7813,1001.0469 Q3887.7813,999.7188 3888.3984,998.5703 Q3889.0156,997.4219 3890.1094,996.8047 Q3891.2031,996.1875 3892.4375,996.1875 Q3893.1719,996.1875 3893.8203,996.3516 Q3894.4688,996.5156 3895.0156,996.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="46" x="3912.75" y="1005.9102">semsim</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3787" x2="4052" y1="1017" y2="1017"/><ellipse cx="3797" cy="1028" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="215" x="3806" y="1032.4189">hasMediatorParticipant : const static Relation</text><ellipse cx="3797" cy="1041.8359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="165" x="3806" y="1046.2549">hasMultiplier : const static Relation</text><ellipse cx="3797" cy="1055.6719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="241" x="3806" y="1060.0908">hasPhysicalEntityReference : const static Relation</text><ellipse cx="3797" cy="1069.5078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="170" x="3806" y="1073.9268">hasSBOTerm : const static Relation</text><ellipse cx="3797" cy="1083.3438" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="194" x="3806" y="1087.7627">hasSinkParticipant : const static Relation</text><ellipse cx="3797" cy="1097.1797" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="209" x="3806" y="1101.5986">hasSourceParticipant : const static Relation</text><ellipse cx="3797" cy="1111.0156" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="152" x="3806" y="1115.4346">hasValue : const static Relation</text><ellipse cx="3797" cy="1124.8516" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="135" x="3806" y="1129.2705">root : const static std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3787" x2="4052" y1="1135.6875" y2="1135.6875"/><!--MD5=[312b0335a2edee9f3d3b1802358d9f2b]
class NullPointerException--><rect fill="#FEFECE" filter="url(#fd8akq6wbmov0)" height="48" id="NullPointerException" style="stroke: #A80036; stroke-width: 1.5;" width="146" x="5295.5" y="635"/><ellipse cx="5310.5" cy="651" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5313.2656,646.875 Q5313.4219,646.6563 5313.6094,646.5469 Q5313.7969,646.4375 5314.0156,646.4375 Q5314.3906,646.4375 5314.625,646.6953 Q5314.8594,646.9531 5314.8594,647.5625 L5314.8594,649.0156 Q5314.8594,649.625 5314.625,649.8906 Q5314.3906,650.1563 5314.0156,650.1563 Q5313.6719,650.1563 5313.4688,649.9531 Q5313.2656,649.7656 5313.1563,649.25 Q5313.1094,648.8906 5312.9219,648.7031 Q5312.5938,648.3281 5311.9844,648.1094 Q5311.375,647.8906 5310.75,647.8906 Q5309.9844,647.8906 5309.3516,648.2188 Q5308.7188,648.5469 5308.2266,649.2969 Q5307.7344,650.0469 5307.7344,651.0781 L5307.7344,652.1719 Q5307.7344,653.4063 5308.625,654.2266 Q5309.5156,655.0469 5311.1094,655.0469 Q5312.0469,655.0469 5312.7031,654.7969 Q5313.0938,654.6406 5313.5156,654.2031 Q5313.7813,653.9375 5313.9297,653.8594 Q5314.0781,653.7813 5314.2813,653.7813 Q5314.6094,653.7813 5314.8672,654.0391 Q5315.125,654.2969 5315.125,654.6406 Q5315.125,654.9844 5314.7813,655.3906 Q5314.2813,655.9688 5313.4844,656.2969 Q5312.4063,656.75 5311.1094,656.75 Q5309.5938,656.75 5308.3906,656.125 Q5307.4063,655.625 5306.7188,654.5547 Q5306.0313,653.4844 5306.0313,652.2031 L5306.0313,651.0469 Q5306.0313,649.7188 5306.6484,648.5703 Q5307.2656,647.4219 5308.3594,646.8047 Q5309.4531,646.1875 5310.6875,646.1875 Q5311.4219,646.1875 5312.0703,646.3516 Q5312.7188,646.5156 5313.2656,646.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="114" x="5324.5" y="655.9102">NullPointerException</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5296.5" x2="5440.5" y1="667" y2="667"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="5296.5" x2="5440.5" y1="675" y2="675"/><!--MD5=[a42d29ed5a036d9188a9f4f9993e3c55]
reverse link AnnotationBase to CompositeAnnotation--><path d="M2351.66,310.89 C2337.31,363.24 2319.24,429.17 2302.7,489.47 " fill="none" id="AnnotationBase&lt;-CompositeAnnotation" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2344.93,308.97,2356.97,291.53,2358.43,312.67,2344.93,308.97" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ef4af43042446b45ec1240d4c141018e]
reverse link AnnotationBase to SingularAnnotation--><path d="M2480.72,305.08 C2557.95,374.65 2664.36,470.5 2746.79,544.76 " fill="none" id="AnnotationBase&lt;-SingularAnnotation" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2475.85,310.12,2465.68,291.53,2485.23,299.72,2475.85,310.12" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[931e49541fdcc14d421ab5b359e6f3be]
reverse link Component to Process--><path d="M3697.5,2086.526 C3697.5,2099.881 3697.5,2113.049 3697.5,2125.817 " fill="none" id="Component&lt;-Process" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3690.5,2086.141,3697.5,2066.141,3704.5,2086.141,3690.5,2086.141" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5e805723da8ebd8de22f8624fd1c2ec2]
reverse link EntityBase to Entity--><path d="M3195.41,436.34 C3208.19,592.49 3211.36,783.2 3159.5,842 C3096.85,913.04 2828.7,876.42 2737.5,902 C2702.61,911.79 2666.7,924.08 2631.56,937.5 " fill="none" id="EntityBase&lt;-Entity" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3188.4,436.54,3193.68,416.02,3202.35,435.35,3188.4,436.54" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5e8e764e06c6281ade87379c1179810f]
reverse link EntityBase to SingularAnnotation--><path d="M3022.56,433.16 C2996.72,471.88 2970.81,510.7 2947.98,544.91 " fill="none" id="EntityBase&lt;-SingularAnnotation" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3016.9,429.04,3033.82,416.29,3028.54,436.81,3016.9,429.04" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c74c872ddde20bd75046b253ea92d881]
reverse link Exception to NullPointerException--><path d="M5358.53,290.99 C5353.81,394.39 5355.1,571.19 5362.39,634.55 " fill="none" id="Exception&lt;-NullPointerException" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="5351.55,290.33,5359.59,270.72,5365.54,291.06,5351.55,290.33" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9c99f61b0487ae92cd16dd243ab3a308]
reverse link NullPointerException to Exception--><path d="M5376.34,621.35 C5383.31,544.03 5383.84,363.7 5377.93,270.72 " fill="none" id="NullPointerException&lt;-Exception" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="5374.97,634.55,5379.5685,628.9954,5376.2097,622.6142,5371.6113,628.1689,5374.97,634.55" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[52a5976ee59c7d9bf2b7946ff83f11ef]
reverse link Ontology to CHEBI--><path d="M4682.69,254.41 C4613.75,302.03 4502.62,385.38 4425.5,476 C4384.62,524.03 4350.7,589.97 4332.93,627.87 " fill="none" id="Ontology&lt;-CHEBI" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4678.8,248.59,4699.26,243.09,4686.7,260.15,4678.8,248.59" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4ead6c018bf7d7236d5a907bce09885d]
reverse link Ontology to CL--><path d="M4722.29,261.48 C4678.15,353.71 4583.25,551.96 4546.99,627.72 " fill="none" id="Ontology&lt;-CL" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4716.08,258.25,4731.03,243.24,4728.71,264.3,4716.08,258.25" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[265d00fdaeb0aa65bac826c8178303f3]
reverse link Ontology to GO--><path d="M4745.5,263.53 C4745.5,356.61 4745.5,552.52 4745.5,627.72 " fill="none" id="Ontology&lt;-GO" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4738.5,263.24,4745.5,243.24,4752.5,263.24,4738.5,263.24" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[034bb88a66d612df5b73b95df0cdb2fb]
reverse link Ontology to OPB--><path d="M4768.71,261.48 C4812.85,353.71 4907.75,551.96 4944.01,627.72 " fill="none" id="Ontology&lt;-OPB" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4762.29,264.3,4759.97,243.24,4774.92,258.25,4762.29,264.3" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4ff89db65c2bde9d031475296bf5111a]
reverse link Ontology to SBO--><path d="M4808.03,254.51 C4876.69,302.21 4987.4,385.65 5064.5,476 C5105.54,524.1 5139.86,590.01 5157.87,627.89 " fill="none" id="Ontology&lt;-SBO" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4804.05,260.26,4791.53,243.16,4811.98,248.72,4804.05,260.26" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b35c52db1fbbfa6a3c98b88819b42c51]
reverse link Participant to Mediator--><path d="M3126.5,1115.75 C3126.5,1177.33 3126.5,1281.8 3126.5,1349.33 " fill="none" id="Participant&lt;-Mediator" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3119.5,1115.51,3126.5,1095.51,3133.5,1115.51,3119.5,1115.51" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[23adc73da0acaa3e4e59147d88a96ae6]
reverse link Participant to Sink--><path d="M3147.55,1114.05 C3165.38,1149.92 3194.18,1197.46 3232.5,1227 C3298.95,1278.23 3333.29,1256.61 3411.5,1287 C3460.24,1305.94 3512.76,1328.59 3559.32,1349.49 " fill="none" id="Participant&lt;-Sink" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3141,1116.58,3138.78,1095.51,3153.66,1110.6,3141,1116.58" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[3509ab1ac20743964b05a27e6524ce36]
reverse link Participant to Source--><path d="M3105.4,1113.55 C3087.36,1149.47 3058.18,1197.32 3019.5,1227 C2952.94,1278.08 2918.69,1256.56 2840.5,1287 C2791.92,1305.92 2739.58,1328.56 2693.17,1349.46 " fill="none" id="Participant&lt;-Source" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3099.08,1110.53,3114.04,1095.51,3111.71,1116.57,3099.08,1110.53" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[deb8ac9775a63aea4aaa1eba49b796e1]
reverse link SemSimModel to SBMLModel--><path d="M3758.28,834.9 C3733.23,857.12 3707.67,879.78 3682.86,901.78 " fill="none" id="SemSimModel&lt;-SBMLModel" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3753.78,829.54,3773.38,821.5,3763.06,840.01,3753.78,829.54" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[81533766c0227e7cb6e9cbcae6ec4cdf]
reverse link Term to DescriptorTerm--><path d="M4665.35,1187.73 C4718.64,1254.29 4780.85,1332 4816.76,1376.85 " fill="none" id="Term&lt;-DescriptorTerm" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4659.76,1191.94,4652.73,1171.96,4670.69,1183.19,4659.76,1191.94" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[f23a746bf74a9b16a7716cb821aa702c]
reverse link CompositeAnnotation to Entity--><path d="M2303.76,841.6 C2309.61,864.08 2315.54,886.89 2321.27,908.91 " fill="none" id="CompositeAnnotation&lt;-Entity" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="2300.42,828.78,2298.0581,835.5933,2303.4389,840.3941,2305.8008,833.5807,2300.42,828.78" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[55e54f5aee4922594b1c0f267967b5aa]
reverse link CompositeAnnotation to PhysicalProperty--><path d="M2545.4,835.66 C2580.33,857.69 2615.36,880.16 2648.5,902 C2688.43,928.31 2731.49,958.14 2769.44,984.95 " fill="none" id="CompositeAnnotation&lt;-PhysicalProperty" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="2534.06,828.53,2537.005,835.1123,2544.2137,834.9255,2541.2687,828.3432,2534.06,828.53" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[7ee9bff4a8737e73b792fdba796f7840]
reverse link IdentityCondition to Resource--><path d="M4215.47,1128.99 C4200.16,1182.86 4178,1260.87 4160.73,1321.66 " fill="none" id="IdentityCondition&lt;-Resource" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="4219.1,1116.17,4213.6155,1120.8519,4215.8278,1127.7152,4221.3123,1123.0334,4219.1,1116.17" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[326d5a028d7e4ff20c9032e6016ed7dc]
reverse link Mediator to Component--><path d="M3225.44,1488.341 C3281.7,1529.475 3355.15,1583.179 3427.29,1635.929 " fill="none" id="Mediator&lt;-Component" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="3214.78,1480.548,3217.2632,1487.3181,3224.4676,1487.6297,3221.9844,1480.8597,3214.78,1480.548" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[1d896617d84051f67c8b08e5e1f49ac2]
reverse link PhysicalProperty to Resource--><path d="M2956,1153.3 C2986.46,1181.93 3023.67,1210.56 3063.5,1227 C3441.85,1383.16 3602.48,1134.94 3982.5,1287 C4003.57,1295.43 4023.88,1307.96 4042.42,1321.9 " fill="none" id="PhysicalProperty&lt;-Resource" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="2946.36,1144.02,2947.9113,1151.0623,2955.0085,1152.3389,2953.4572,1145.2966,2946.36,1144.02" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d92448d9fbeac98dd44a3e1b6c223304]
reverse link Relation to URI--><path d="M4467.28,1500.018 C4437.17,1569.844 4394.39,1669.071 4363.33,1741.119 " fill="none" id="Relation&lt;-URI" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="4472.56,1487.771,4466.5119,1491.6979,4467.8105,1498.7911,4473.8586,1494.8642,4472.56,1487.771" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[f336a971478a334e5739ae3ffca7cc0c]
reverse link Resource to Component--><path d="M4028.49,1517.281 C4001.04,1543.504 3970.34,1572.838 3938.99,1602.782 " fill="none" id="Resource&lt;-Component" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="4038.06,1508.139,4030.9589,1509.3936,4029.3857,1516.431,4036.4869,1515.1764,4038.06,1508.139" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[94acaea827e491bf66f6474e90e1984c]
reverse link Resource to URI--><path d="M4181.65,1520.145 C4212.38,1588.043 4252.13,1675.853 4281.73,1741.236 " fill="none" id="Resource&lt;-URI" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="4176.21,1508.139,4175.0398,1515.2545,4181.1579,1519.0714,4182.3281,1511.9559,4176.21,1508.139" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ad49bf4cd932eb39e5343707c1ae89de]
reverse link SBMLImporter to SBMLModel--><path d="M3481.93,855.32 C3483.31,870.88 3484.71,886.49 3486.07,901.78 " fill="none" id="SBMLImporter&lt;-SBMLModel" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3480.76,842.27,3477.3033,848.5986,3481.8155,854.2235,3485.2722,847.8949,3480.76,842.27" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[8ad6b88fde0c2d5695e1f12bd140dd2f]
reverse link SBMLModel to Component--><path d="M3762.95,1225.07 C3764.8,1225.72 3766.65,1226.37 3768.5,1227 C3877.96,1264.36 4208.57,1200.63 4285.5,1287 C4361.17,1371.96 4345.63,1446.412 4285.5,1543 C4253.56,1594.296 4217.69,1576.272 4163.5,1603 C4100.06,1634.291 4031.78,1668.027 3967.58,1699.778 " fill="none" id="SBMLModel&lt;-Component" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="3750.75,1220.53,3754.9808,1226.3696,3761.9984,1224.7102,3757.7676,1218.8707,3750.75,1220.53" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="7" x="3758.2832" y="1222.4292">2</text><!--MD5=[338135403aa0b1feb5ee1ba05dba2b80]
reverse link SemSimModel to semsim--><path d="M3939.91,834.76 C3935.23,887.16 3930.34,942.03 3926.51,984.9 " fill="none" id="SemSimModel&lt;-semsim" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3941.09,821.5,3936.5721,827.1204,3940.0226,833.4524,3944.5404,827.832,3941.09,821.5" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[894c949646e7f1a179ee86bc9ea3d1dc]
reverse link Sink to Component--><path d="M3697.5,1493.842 C3697.5,1525.319 3697.5,1563.454 3697.5,1602.64 " fill="none" id="Sink&lt;-Component" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="3697.5,1480.776,3693.5,1486.776,3697.5,1492.776,3701.5,1486.776,3697.5,1480.776" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[00010d7f72d69197ffc78bbbb73fa941]
reverse link Source to Component--><path d="M2705.64,1486.018 C2748.83,1505.309 2796.23,1525.678 2840.5,1543 C3034.53,1618.928 3257.53,1694.153 3427.41,1749.024 " fill="none" id="Source&lt;-Component" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="2693.57,1480.608,2697.4042,1486.7153,2704.5164,1485.5249,2700.6822,1479.4177,2693.57,1480.608" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d3120f0040e7f62dc6ec8950d510029e]
reverse link Term to Relation--><path d="M4545.6,1184.76 C4535.98,1237.16 4524.99,1296.96 4516.66,1342.35 " fill="none" id="Term&lt;-Relation" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="4547.95,1171.96,4542.9341,1177.1408,4545.7871,1183.7635,4550.8031,1178.5827,4547.95,1171.96" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[e597d267664a8fdc0db74a4587ddb382]
reverse link Term to Resource--><path d="M4449.15,1180.44 C4431.49,1196.46 4413.26,1212.41 4395.5,1227 C4355.34,1260 4309.8,1293.77 4268.14,1323.37 " fill="none" id="Term&lt;-Resource" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="4458.89,1171.54,4451.7624,1172.6342,4450.031,1179.6344,4457.1586,1178.5402,4458.89,1171.54" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[934b855bffa4271cc8d072804d3eddc0]
reverse link bqb to Relation--><path d="M4766.1,1201.87 C4756.99,1210.61 4747.74,1219.07 4738.5,1227 C4702.3,1258.07 4687.35,1257.96 4649.5,1287 C4627.11,1304.18 4603.7,1323.76 4582.34,1342.31 " fill="none" id="bqb&lt;-Relation" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="4775.55,1192.67,4768.4609,1193.9907,4766.9534,1201.0425,4774.0425,1199.7218,4775.55,1192.67" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="14" x="4755.0449" y="1213.6341">13</text><!--MD5=[be795178b94645286a51ba2af505172e]
reverse link semsim to Relation--><path d="M3984.69,1154.05 C4008.82,1181.2 4038.24,1208.69 4070.5,1227 C4180.06,1289.17 4233.98,1232.4 4347.5,1287 C4376.77,1301.08 4405.36,1321.69 4429.9,1342.23 " fill="none" id="semsim&lt;-Relation" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3976.05,1144.09,3976.9604,1151.2434,3983.9137,1153.1543,3983.0033,1146.0009,3976.05,1144.09" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="7" x="3973.609" y="1165.1409">7</text><!--MD5=[99901ec3ee1ac82efbeaf6e2fd99c6a4]
link Accessor to Annotation--><!--MD5=[af331e4f92c8e556a84731dda0a14f70]
link Annotation to Condition--><!--MD5=[de5773c495eca2a29bef973278e2d613]
link Condition to EntityDescriptor--><!--MD5=[b7c02cb76356070e5c1b768100774efe]
link Accessor to MetaID--><!--MD5=[3b8a03c3b8313d0bb70731672c9dbece]
link MetaID to ModelStrings--><!--MD5=[f52ccca2384752616e1dc138b8eae3a4]
link ModelStrings to Query--><!--MD5=[714902943b586a6e8875d41235fc2e41]
link Query to QueryResults--><!--MD5=[6fb6fb761617b24808b4a4548e93c2bd]
link MetaID to RDFReader--><!--MD5=[124aff27c8af9d315c72ffceb50d3e17]
link RDFReader to RasqalQuery--><!--MD5=[698d854ed39b4a4a5a80e60d549a83da]
link RasqalQuery to RasqalQueryResult--><!--MD5=[e3f06888d75e593b0d0518b9e8ac5513]
link RasqalQueryResult to SBMLSpecies--><!--MD5=[2bf35063b0c83262330a36299e64b01a]
link RDFReader to SelectQuery--><!--MD5=[fe9bc7c886952c40320a1907d0362fbf]
link SelectQuery to SemSimObject--><!--MD5=[23d600052db396b187b4aa672f49f7a3]
=======
<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="211px" preserveAspectRatio="none" style="width:308px;height:211px;background:#000000;" version="1.1" viewBox="0 0 308 211" width="308px" zoomAndPan="magnify"><defs/><g><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="261" x="5" y="19">Dot Executable: /opt/local/bin/dot</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="145" x="5" y="35.2969">File does not exist</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="291" x="5" y="51.5938">Cannot find Graphviz. You should try</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="10" y="67.8906"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="79" x="5" y="84.1875">@startuml</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="57" x="5" y="100.4844">testdot</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="72" x="5" y="116.7813">@enduml</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="10" y="133.0781"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="17" x="10" y="149.375">or</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="10" y="165.6719"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="227" x="5" y="181.9688">java -jar plantuml.jar -testdot</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="10" y="198.2656"/><!--MD5=[98f84554449002f0ab3fef5ea97287b3]
>>>>>>> ciaran-develop
@startuml



<<<<<<< HEAD
class Accessor {
    +{static} hasCompartmentWithMetaId(const std::string& metaid, libsbml::Model* m) : bool
    +{static} findCompartment(const std::string& sid, libsbml::Model* m) : libsbml::Compartment*
    +{static} findUnitDefinition(const std::string& sid, libsbml::Model* m) : libsbml::UnitDefinition*
}


class Annotation {
    +{static} stripAnnotations(libsbml::SBMLDocument* d) : void
    +{static} stripAnnotationsFromElement(libsbml::SBase* x) : void
}


abstract class AnnotationBase {
    +~AnnotationBase()
    +{abstract} clone() : AnnotationBase* {query}
    +{abstract} isComposite() : bool {query}
    +{abstract} getRDF(const URI& sbml_base_uri, const std::string& format) : std::string {query}
    +{abstract} humanize() : std::string {query}
    +{abstract} getMetaId() : std::string& {query}
    +{abstract} makeComposite(const PhysicalProperty& prop) : std::unique_ptr<AnnotationBase> {query}
    +{abstract} serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
}


class CHEBI {
    +{static} get(OntologyTerm t) : Resource
}


class CL {
    +{static} get(OntologyTerm t) : Resource
}


class Component {
    +Component()
    +Component(const SingularAnnotation& annotation)
    +Component(SingularAnnotation&& annotation)
    +Component(const CompositeAnnotation& annotation)
    +Component(CompositeAnnotation&& annotation)
    +Component(const Component& other)
    +Component(Component&& other) noexcept: annotation_(std::move(otherannotation_))
    +~Component()
    +getAnnotation() : AnnotationBase& {query}
    +getAnnotation() : AnnotationBase&
    #annotation_ : AnnotationPtr
    +clone() : Component* {query}
    +getCompositeAnnotation() : CompositeAnnotation& {query}
    +getCompositeAnnotation() : CompositeAnnotation&
    +getURI(const URI& base) : URI {query}
    +containsMetaId(const std::string& metaid) : bool {query}
    +hasAnnotation() : bool {query}
    +hasCompositeAnnotation() : bool {query}
    +hasMetaId() : bool {query}
    +hasSingularAnnotation() : bool {query}
    +isProcess() : bool {query}
    +getRDF(const URI& sbml_base_uri, const std::string& format) : std::string {query}
    +humanize() : std::string {query}
    #metaid_ : std::string
    +getMetaId() : std::string& {query}
    +serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
    +setAnnotation(AnnotationBase* annotation) : void
    +setAnnotation(const AnnotationBase& annotation) : void
    +setAnnotation(AnnotationPtr&& annotation) : void
    +setMetaId(const std::string& metaid) : void
}




class CompositeAnnotation {
    +CompositeAnnotation(const std::string& metaid, const PhysicalProperty& property, const Entity& entity)
    +CompositeAnnotation(const std::string& metaid, PhysicalProperty&& property, Entity&& entity)
    +CompositeAnnotation(const CompositeAnnotation& other)
    +CompositeAnnotation(CompositeAnnotation&& other)
    +CompositeAnnotation(const SingularAnnotation& other, const PhysicalProperty& property)
    +clone() : AnnotationBase* {query}
    +makeComposite(const PhysicalProperty& prop) : AnnotationPtr {query}
    #entity_ : Entity
    +getEntity() : Entity& {query}
    +getEntity() : Entity&
    #property_ : PhysicalProperty
    +isComposite() : bool {query}
    +isEntityEmpty() : bool {query}
    +getRDF(const URI& sbml_base_uri, const std::string& format) : std::string {query}
    +humanize() : std::string {query}
    #metaid_ : std::string
    +getMetaId() : std::string& {query}
    +addTerm(const Relation& relation, const Resource& resource) : void
    #serializePhysicalPropertyToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
    +serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
    +setMetaId(const std::string& metaid) : void
}




abstract class Condition {
    +~Condition()
    +{abstract} matches(const Component& component) : bool
}




class DescriptorTerm {
    +DescriptorTerm(const Relation& relation, const Resource& resource)
    +DescriptorTerm(Relation&& relation, Resource&& resource)
}




class Entity {
    +Entity(const std::string& metaid)
    +Entity(const std::string& metaid, const Resource& definition)
    +Entity(const std::string& metaid, const Resource& definition, const EntityDescriptor& d)
    +Entity(const std::string& metaid, Resource&& definition, EntityDescriptor&& d)
    +Entity(const SingularAnnotation& annotation)
    +Entity(const Entity& other)
    +Entity(Entity&& other)
    +descriptors_() : ) ,
    #descriptors_ : Descriptors
    +getDescriptors() : Descriptors& {query}
    +getDescriptors() : Descriptors&
    +getDescriptor(std::size_t k) : EntityDescriptor& {query}
    +getDescriptor(std::size_t k) : EntityDescriptor&
    +getNumDescriptors() : std::size_t {query}
    +humanize() : std::string {query}
    #humanizeDescriptors() : std::string {query}
    +addDescriptor(const EntityDescriptor& d) : void
    +addDescriptor(EntityDescriptor&& d) : void
    +serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
}




class EntityBase {
    +EntityBase(const std::string& metaid, const Resource& definition)
    +EntityBase(EntityBase&& other)
    +EntityBase(const std::string& metaid, Resource&& definition)
    +EntityBase(const std::string& metaid)
    +EntityBase(const EntityBase& other)
    #definitions_ : Definitions
    +getDefinitions() : Definitions& {query}
    +getDefinitions() : Definitions&
    +getDefinition(std::size_t k) : Resource& {query}
    #terms_ : Terms
    +getURI(const URI& base) : URI {query}
    +isEmpty() : bool {query}
    +matchesDefinition(const Resource& definition) : bool
    +getNumDefinitions() : std::size_t {query}
    +humanize() : std::string {query}
    #humanizeDefintions() : std::string {query}
    #metaid_ : std::string
    +toString(std::size_t indent) : std::string {query}
    +getMetaId() : std::string& {query}
    +addDefinition(const Resource& definition) : void
    +addExtraneousTerm(const Term& term) : void
    +addExtraneousTerm(Term&& term) : void
    #serializeDefinition(const Resource& def, const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
    #serializeTerm(const Term& term, const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
    +serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
    +setMetaId(const std::string& metaid) : void
}




class EntityDescriptor {
    +EntityDescriptor()
    +EntityDescriptor(const EntityDescriptor& other)
    +EntityDescriptor(EntityDescriptor&& other)
    +EntityDescriptor(std::initializer_list<T> l)
    #terms_ : DescriptorTerms
    +isEmpty() : bool {query}
    +humanize() : std::string {query}
    #humanizeTerms() : std::string {query}
    +addTerm(const DescriptorTerm& t) : void
    +addTerm(DescriptorTerm&& t) : void
    +addTerm(const Relation& relation, const Resource& resource) : void
    #serializeDescriptorTermToRDF(const DescriptorTerm& term, const URI& linked_uri, const URI& term_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
    +serializeToRDF(const URI& sbml_base_uri, const std::string& metaid, raptor_world* world, raptor_serializer* serializer) : void {query}
}




class Exception {
    +Exception(const char* message)
    +Exception(std::string message)
    +~Exception()
    +what() : char* {query}
    #msg_ : std::string
}




class GO {
    +{static} get(OntologyTerm t) : Resource
}




class IdentityCondition {
    +IdentityCondition(const Resource& resource)
    #resource_ : Resource
    +matchEntity(const EntityBase& entity) : bool {query}
    +matches(const Component& component) : bool {query}
}




class Mediator {
    +Mediator(const std::string& id, Component* component, double multiplier)
    #component_ : Component*
    +serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : URI {query}
    +containsMetaId(const std::string& metaid) : bool {query}
    #multiplier_ : double
    #id_ : std::string
}




class MetaID {
    +{static} modelContainsMetaId(libsbml::Model* m, const std::string& metaid) : bool
    +{static} assignMetaIds(libsbml::Model* m) : void
}



class ModelStrings {
+ModelStrings()
+{static} Teusink2000() : std::string




class NullPointerException {
    -Exception : using Exception::
}




class OPB {
    +{static} get(OntologyTerm t) : Resource
}




class Ontology {
    +{static} resolve(const std::string& root, unsigned int t, int n_digits) : Resource
}




class Participant {
    +~Participant()
}




class PhysicalProperty {
    +PhysicalProperty(const Resource& resource)
    +PhysicalProperty(Resource&& resource)
    +PhysicalProperty(const std::string& resource)
    +PhysicalProperty(std::string&& resource)
    #resource_ : Resource
    +getResource() : Resource& {query}
    +getResource() : Resource&
    +humanize() : std::string {query}
}



class Process {
    +Process()
    +Process(const SingularAnnotation& annotation)
    +Process(SingularAnnotation&& annotation)
    +Process(const CompositeAnnotation& annotation)
    +Process(CompositeAnnotation&& annotation)
    +Process(const Process& other)
    +Process(Process&& other)
    +clone() : Component* {query}
    #mediators_ : Mediators
    #sinks_ : Sinks
    #sources_ : Sources
    +containsMetaId(const std::string& metaid) : bool {query}
    +isProcess() : bool {query}
    +addMediator(const Mediator& mediator) : void
    +addSink(const Sink& sink) : void
    +addSource(const Source& source) : void
    +serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
}




abstract class Query {
    +~Query()
    +{abstract} run(SemSimModel& model) : QueryResults {query}
}




class QueryResults {
    #refs_ : ComponentRefs
    +begin() : iterator
    +end() : iterator
}




class RDFReader {
    +{static} RaptorTermToURI(raptor_term* t) : URI
    +{static} isMetaId(const std::string& uri) : bool
    +{static} isMetaId(raptor_term* t) : bool
    +{static} RaptorTermToRepr(raptor_term* t) : std::string
    +{static} RaptorURIToString(raptor_uri* u) : std::string
    +{static} extractMetaId(const std::string& uri) : std::string
    +{static} extractMetaId(raptor_term* t) : std::string
    +{static} addTermToAnnotation(AnnotationBase& annotation, const Relation& relation, const Resource& resource) : void
    +{static} addTermToCompositeAnnotation(CompositeAnnotation& annotation, const Relation& relation, const Resource& resource) : void
    +{static} addTermToEntity(EntityBase& entity, const Relation& relation, const Resource& resource) : void
    +{static} addTermToSingularAnnotation(SingularAnnotation& annotation, const Relation& relation, const Resource& resource) : void
    +{static} applyRDFAnnotationsToModel(SemSimModel& model, const std::string& rdf, const std::string& rdf_format) : void
    +{static} process_triple(void* user_data, raptor_statement* triple) : void
}




class RasqalQuery {
    +RasqalQuery(const std::string& rdf, const std::string& format, bool is_file)
    +~RasqalQuery()
    +run(const std::string& query) : RasqalQueryResult
    #raptor_iostr_ : raptor_iostream*
    #base_uri_ : raptor_uri*
    #uri_ : raptor_uri*
    #raptor_world_ : raptor_world*
    #dg_ : rasqal_data_graph*
    #query_ : rasqal_query*
    #rasqal_world_ : rasqal_world*
    #rdf_ : std::string
    #uri_string_ : unsigned char*
}




class RasqalQueryResult {
    +RasqalQueryResult(rasqal_query_results* results)
    +~RasqalQueryResult()
    #results_ : rasqal_query_results*
    +toRDFString(const std::string& format) : std::string
    +toString() : std::string
    +asList() : std::vector<std::vector<std::string> >
    #toRaptorGraph(raptor_world* world, raptor_serializer* serializer) : void
}




class Relation {
    +Relation(const URI& uri)
    +Relation(URI&& uri)
    #uri_ : URI
    +getURI() : URI& {query}
    +operator==(const Relation& other) : bool {query}
    +humanize() : std::string {query}
    +toString() : std::string {query}
}




class Resource {
    +Resource(const URI& uri)
    +Resource(URI&& uri)
    +Resource(Component* element)
    #element_ : Component*
    +getURI(const URI& base) : URI {query}
    #uri_ : URI
    +isLocal() : bool {query}
    +operator==(const Resource& other) : bool {query}
    +humanize() : std::string {query}
    +toString() : std::string {query}
}




class SBMLImporter {
    +SBMLImporter(libsbml::SBMLDocument* d)
    +SBMLImporter(const std::string& sbml)
    #extractAnnotation(libsbml::SBase* s) : AnnotationPtr
    #extractAnnotation(libsbml::Species* s) : AnnotationPtr
    #extractAnnotation(libsbml::Compartment* c) : AnnotationPtr
    #extractAnnotation(libsbml::Reaction* r) : AnnotationPtr
    #extractAnnotation(libsbml::Parameter* p) : AnnotationPtr
    #getComponentFor(libsbml::SBase* s) : Component*
    #extractCompositeAnnotation(libsbml::Species* s) : CompositeAnnotation
    #extractSpeciesEntity(libsbml::Species* s) : Entity
    #extractSpeciesEntityDescriptor(libsbml::Species* s) : EntityDescriptor
    +{static} getRelationFromSBMLQual(libsbml::BiolQualifierType_t q) : Relation&
    #getResourceFor(libsbml::SBase* s) : Resource
    #result_ : SBMLModel
    +getSBMLModel() : SBMLModel&
    +getSBMLModel() : SBMLModel& {query}
    #{static} extractSingularAnnotation(libsbml::SBase* s) : SingularAnnotation
    #{static} extractSingularAnnotation(libsbml::Parameter* p) : SingularAnnotation
    #m_ : libsbml::Model*
    #{static} makeUniqueMetaId(const SemSimModel& model, const std::string& base) : std::string
    #assignParticipants(Process& process, libsbml::Reaction* r) : void
    #{static} populateDefinitionsAndTerms(libsbml::SBase* s, EntityBase& e) : void
    #{static} populateSBOTerm(libsbml::SBase* s, EntityBase& e) : void
=======



namespace semsim {
	class Accessor {
		+{static} findCompartment(const std::string& sid, LIBSBML_CPP_NAMESPACE_QUALIFIER Model* m) : LIBSBML_CPP_NAMESPACE_QUALIFIER Compartment*
		+{static} findUnitDefinition(const std::string& sid, libsbml::Model* m) : LIBSBML_CPP_NAMESPACE_QUALIFIER UnitDefinition*
		+{static} hasCompartmentWithMetaId(const std::string& metaid, LIBSBML_CPP_NAMESPACE_QUALIFIER Model* m) : bool
	}
}


namespace semsim {
	class Annotation {
		+{static} stripAnnotations(LIBSBML_CPP_NAMESPACE_QUALIFIER SBMLDocument* d) : void
		+{static} stripAnnotationsFromElement(LIBSBML_CPP_NAMESPACE_QUALIFIER SBase* x) : void
	}
}


namespace semsim {
	class CHEBI {
		+{static} get(OntologyTerm t) : Resource
	}
}


namespace semsim {
	class CL {
		+{static} get(OntologyTerm t) : Resource
	}
}


namespace semsim {
	class CompositeAnnotation {
		+CompositeAnnotation(const std::string& metaid, const PhysicalProperty& property, const Entity& entity)
		+CompositeAnnotation(const std::string& metaid, PhysicalProperty&& property, Entity&& entity)
		+CompositeAnnotation(const CompositeAnnotation& other)
		+CompositeAnnotation(CompositeAnnotation&& other)
		+CompositeAnnotation(const SingularAnnotation& other, const PhysicalProperty& property)
		+clone() : AnnotationBase* {query}
		+makeComposite(const PhysicalProperty& prop) : AnnotationPtr {query}
		#entity_ : Entity
		+getEntity() : Entity& {query}
		+getEntity() : Entity&
		#property_ : PhysicalProperty
		+isComposite() : bool {query}
		+isEntityEmpty() : bool {query}
		+getRDF(const URI& sbml_base_uri, const std::string& format) : std::string {query}
		+humanize() : std::string {query}
		#metaid_ : std::string
		+getMetaId() : std::string& {query}
		+addTerm(const Relation& relation, const Resource& resource) : void
		#serializePhysicalPropertyToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
		+serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
		+setMetaId(const std::string& metaid) : void
	}
}


namespace semsim {
	class DescriptorTerm {
		+DescriptorTerm(const Relation& relation, const Resource& resource)
		+DescriptorTerm(Relation&& relation, Resource&& resource)
	}
}


namespace semsim {
	class Entity {
		+Entity(const std::string& metaid)
		+Entity(const std::string& metaid, const Resource& definition)
		+Entity(const std::string& metaid, const Resource& definition, const EntityDescriptor& d)
		+Entity(const std::string& metaid, Resource&& definition, EntityDescriptor&& d)
		+Entity(const SingularAnnotation& annotation)
		+Entity(const Entity& other)
		+Entity(Entity&& other)
		+descriptors_() : ) ,
		#descriptors_ : Descriptors
		+getDescriptors() : Descriptors& {query}
		+getDescriptors() : Descriptors&
		+getDescriptor(std::size_t k) : EntityDescriptor& {query}
		+getDescriptor(std::size_t k) : EntityDescriptor&
		+getNumDescriptors() : std::size_t {query}
		+humanize() : std::string {query}
		#humanizeDescriptors() : std::string {query}
		+addDescriptor(const EntityDescriptor& d) : void
		+addDescriptor(EntityDescriptor&& d) : void
		+serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
	}
}


namespace semsim {
	class Exception {
		+Exception(const char* message)
		+Exception(std::string message)
		+~Exception()
		+what() : char* {query}
		#msg_ : std::string
	}
}


namespace semsim {
	class GO {
		+{static} get(OntologyTerm t) : Resource
	}
}


namespace semsim {
	class Mediator {
		+Mediator(const std::string& id, Component* component, double multiplier)
		#component_ : Component*
		+serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : URI {query}
		+containsMetaId(const std::string& metaid) : bool {query}
		#multiplier_ : double
		#id_ : std::string
	}
}


namespace semsim {
	class MetaID {
		+{static} modelContainsMetaId(LIBSBML_CPP_NAMESPACE_QUALIFIER Model* m, const std::string& metaid) : bool
		+{static} assignMetaIds(LIBSBML_CPP_NAMESPACE_QUALIFIER Model* m) : void
	}
}


class ModelStrings {
	+ModelStrings()
	+{static} Teusink2000() : std::string
}


namespace semsim {
	class NullPointerException {
		-Exception : using Exception::
	}
}


namespace semsim {
	class OPB {
		+{static} get(OntologyTerm t) : Resource
	}
}


namespace semsim {
	class Process {
		+Process()
		+Process(const SingularAnnotation& annotation)
		+Process(SingularAnnotation&& annotation)
		+Process(const CompositeAnnotation& annotation)
		+Process(CompositeAnnotation&& annotation)
		+Process(const Process& other)
		+Process(Process&& other)
		+clone() : Component* {query}
		#mediators_ : Mediators
		#sinks_ : Sinks
		#sources_ : Sources
		+containsMetaId(const std::string& metaid) : bool {query}
		+isProcess() : bool {query}
		+addMediator(const Mediator& mediator) : void
		+addSink(const Sink& sink) : void
		+addSource(const Source& source) : void
		+serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
	}
}


namespace semsim {
	abstract class Query {
		+~Query()
		+{abstract} run(Model& model) : QueryResults {query}
	}
}


namespace semsim {
	class QueryResults {
		#refs_ : ComponentRefs
		+begin() : iterator
		+end() : iterator
	}
}


namespace semsim {
	class RDFReader {
		+{static} RaptorTermToURI(raptor_term* t) : URI
		+{static} isMetaId(const std::string& uri) : bool
		+{static} isMetaId(raptor_term* t) : bool
		+{static} RaptorTermToRepr(raptor_term* t) : std::string
		+{static} RaptorURIToString(raptor_uri* u) : std::string
		+{static} extractMetaId(const std::string& uri) : std::string
		+{static} extractMetaId(raptor_term* t) : std::string
		+{static} addTermToAnnotation(AnnotationBase& annotation, const Relation& relation, const Resource& resource) : void
		+{static} addTermToCompositeAnnotation(CompositeAnnotation& annotation, const Relation& relation, const Resource& resource) : void
		+{static} addTermToEntity(EntityBase& entity, const Relation& relation, const Resource& resource) : void
		+{static} addTermToSingularAnnotation(SingularAnnotation& annotation, const Relation& relation, const Resource& resource) : void
		+{static} applyRDFAnnotationsToModel(Model& model, const std::string& rdf, const std::string& rdf_format) : void
		+{static} process_triple(void* user_data, raptor_statement* triple) : void
	}
}


namespace semsim {
	class SBMLModel {
		+SBMLModel(LIBSBML_CPP_NAMESPACE_QUALIFIER SBMLDocument* d)
		+SBMLModel(SBMLModel&& other)
		+getComponent(LIBSBML_CPP_NAMESPACE_QUALIFIER SBase* s) : Component* {query}
		+getComponent(LIBSBML_CPP_NAMESPACE_QUALIFIER SBase* s) : Component*
		+getComponentForId(const std::string& id) : Component* {query}
		+getComponentForId(const std::string& id) : Component*
		#d_ : LIBSBML_CPP_NAMESPACE_QUALIFIER SBMLDocument*
		+getProcess(LIBSBML_CPP_NAMESPACE_QUALIFIER SBase* s) : Process*
		#element_map_ : SEMSIM_TR1_NAMESPACE_QUAL unordered_map<LIBSBML_CPP_NAMESPACE_QUALIFIER SBase*, Component*>
		#element_id_map_ : SEMSIM_TR1_NAMESPACE_QUAL unordered_map<std::string, Component*>
		+hasComponent(const std::string id) : bool {query}
		+hasComponent(LIBSBML_CPP_NAMESPACE_QUALIFIER SBase* s) : bool {query}
		+hasProcess(LIBSBML_CPP_NAMESPACE_QUALIFIER SBase* s) : bool {query}
		+encodeXML() : std::string {query}
		+getFormat() : std::string {query}
		+getRDF(const URI& sbml_base_uri, const std::string& format) : std::string {query}
		+getRDF(const std::string& sbml_base_uri, const std::string& format) : std::string {query}
		+setComponentAnnotation(LIBSBML_CPP_NAMESPACE_QUALIFIER SBase* s, const AnnotationBase& annotation) : void
		+setComponentAnnotation(LIBSBML_CPP_NAMESPACE_QUALIFIER SBase* s, const AnnotationPtr& annotation) : void
		+setComponentAnnotation(LIBSBML_CPP_NAMESPACE_QUALIFIER SBase* s, AnnotationPtr&& annotation) : void
	}
}


namespace semsim {
	class SBMLSpecies {
		+{static} GetSpeciesPhysicalProperty(LIBSBML_CPP_NAMESPACE_QUALIFIER Species* s, LIBSBML_CPP_NAMESPACE_QUALIFIER Model* m) : PhysicalProperty
		+{static} SubstanceUnitsAreConc(LIBSBML_CPP_NAMESPACE_QUALIFIER Species* s, LIBSBML_CPP_NAMESPACE_QUALIFIER Model* m) : bool
		+{static} UnitDefIsConc(LIBSBML_CPP_NAMESPACE_QUALIFIER UnitDefinition* ud) : bool
	}
}


namespace semsim {
	class SBO {
		+{static} get(OntologyTerm t) : Resource
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+{static} hasMediatorParticipant : const static Relation
		+{static} hasMultiplier : const static Relation
		+{static} hasPhysicalEntityReference : const static Relation
		+{static} hasSBOTerm : const static Relation
		+{static} hasSinkParticipant : const static Relation
		+{static} hasSourceParticipant : const static Relation
		+{static} hasValue : const static Relation
		+{static} root : const static std::string
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+SelectQuery(ConditionPtr&& where)
		#where_ : ConditionPtr
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+~Participant()
	}
}


namespace semsim {
	abstract class SEMSIM_PUBLIC {
		+~Condition()
		+{abstract} matches(const Component& component) : bool
	}
}


namespace semsim {
	abstract class SEMSIM_PUBLIC {
		+Model()
		+Model(const Model& other)
		+Model(Model&& other) noexcept: components_(std::move(othercomponents_))
		+~Model()
		+findComponentWithMetaId(const std::string& metaid) : Component&
		+findComponentWithMetaId(const std::string& metaid) : Component& {query}
		+addComponent(const Component& component) : Component*
		+addComponent(Component&& component) : Component*
		+getComponents() : Components& {query}
		+getComponents() : Components&
		+addComponent(const Process& component) : Process*
		+addComponent(Process&& component) : Process*
		+containsMetaId(const std::string& metaid) : bool {query}
		+hasComponentWithMetaId(const std::string& metaid) : bool {query}
		#components_ : semsim::Components
		+getNumComponents() : std::size_t {query}
		+{abstract} encodeXML() : std::string {query}
		+{abstract} getFormat() : std::string {query}
		+{abstract} getRDF(const URI& sbml_base_uri, const std::string& format) : std::string {query}
		+humanize() : std::string {query}
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+{static} encodes : const static Relation
		+{static} hasPart : const static Relation
		+{static} hasProperty : const static Relation
		+{static} hasTaxon : const static Relation
		+{static} hasVersion : const static Relation
		+{static} is : const static Relation
		+{static} isDescribedBy : const static Relation
		+{static} isEncodedBy : const static Relation
		+{static} isHomologTo : const static Relation
		+{static} isPartOf : const static Relation
		+{static} isPropertyOf : const static Relation
		+{static} isVersionOf : const static Relation
		+{static} occursIn : const static Relation
		+{static} root : const static std::string
		+{static} humanizeQualifier(const Relation& q) : std::string
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+EntityBase(const std::string& metaid, const Resource& definition)
		+EntityBase(EntityBase&& other)
		+EntityBase(const std::string& metaid, Resource&& definition)
		+EntityBase(const std::string& metaid)
		+EntityBase(const EntityBase& other)
		#definitions_ : Definitions
		+getDefinitions() : Definitions& {query}
		+getDefinitions() : Definitions&
		+getDefinition(std::size_t k) : Resource& {query}
		#terms_ : Terms
		+getURI(const URI& base) : URI {query}
		+isEmpty() : bool {query}
		+matchesDefinition(const Resource& definition) : bool
		+getNumDefinitions() : std::size_t {query}
		+humanize() : std::string {query}
		#humanizeDefintions() : std::string {query}
		#metaid_ : std::string
		+toString(std::size_t indent) : std::string {query}
		+getMetaId() : std::string& {query}
		+addDefinition(const Resource& definition) : void
		+addExtraneousTerm(const Term& term) : void
		+addExtraneousTerm(Term&& term) : void
		#serializeDefinition(const Resource& def, const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
		#serializeTerm(const Term& term, const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
		+serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
		+setMetaId(const std::string& metaid) : void
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+{static} resolve(const std::string& root, unsigned int t, int n_digits) : Resource
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+URI()
		+URI(const std::string& uri)
		+URI(const char* uri)
		+URI(std::string&& uri)
		+appendToFrag(const std::string& suffix) : URI {query}
		+withFrag(const std::string& suffix) : URI {query}
		+operator==(const URI& other) : bool {query}
		+encode() : std::string {query}
		#encoded_uri_ : std::string
		+toString() : std::string {query}
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+Relation(const URI& uri)
		+Relation(URI&& uri)
		#uri_ : URI
		+getURI() : URI& {query}
		+operator==(const Relation& other) : bool {query}
		+humanize() : std::string {query}
		+toString() : std::string {query}
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+Component()
		+Component(const SingularAnnotation& annotation)
		+Component(SingularAnnotation&& annotation)
		+Component(const CompositeAnnotation& annotation)
		+Component(CompositeAnnotation&& annotation)
		+Component(const Component& other)
		+Component(Component&& other) noexcept: annotation_(std::move(otherannotation_))
		+~Component()
		+getAnnotation() : AnnotationBase& {query}
		+getAnnotation() : AnnotationBase&
		#annotation_ : AnnotationPtr
		+clone() : Component* {query}
		+getCompositeAnnotation() : CompositeAnnotation& {query}
		+getCompositeAnnotation() : CompositeAnnotation&
		+getURI(const URI& base) : URI {query}
		+containsMetaId(const std::string& metaid) : bool {query}
		+hasAnnotation() : bool {query}
		+hasCompositeAnnotation() : bool {query}
		+hasMetaId() : bool {query}
		+hasSingularAnnotation() : bool {query}
		+isProcess() : bool {query}
		+getRDF(const URI& sbml_base_uri, const std::string& format) : std::string {query}
		+humanize() : std::string {query}
		#metaid_ : std::string
		+getMetaId() : std::string& {query}
		+serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
		+setAnnotation(AnnotationBase* annotation) : void
		+setAnnotation(const AnnotationBase& annotation) : void
		+setAnnotation(AnnotationPtr&& annotation) : void
		+setMetaId(const std::string& metaid) : void
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+Term(const Relation& relation, const Resource& resource)
		+Term(Relation&& relation, Resource&& resource)
		+Term(const Relation& relation, const double value)
		#relation_ : Relation
		+getRelation() : Relation& {query}
		#resource_ : Resource
		+getResource() : Resource& {query}
		+isValue() : bool {query}
		#is_value_ : bool
		+getValue() : double {query}
		#value_ : double
		+toString() : std::string {query}
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+PhysicalProperty(const Resource& resource)
		+PhysicalProperty(Resource&& resource)
		+PhysicalProperty(const std::string& resource)
		+PhysicalProperty(std::string&& resource)
		#resource_ : Resource
		+getResource() : Resource& {query}
		+getResource() : Resource&
		+humanize() : std::string {query}
	}
}


namespace semsim {
	abstract class SEMSIM_PUBLIC {
		+~AnnotationBase()
		+{abstract} clone() : AnnotationBase* {query}
		+{abstract} isComposite() : bool {query}
		+{abstract} getRDF(const URI& sbml_base_uri, const std::string& format) : std::string {query}
		+{abstract} humanize() : std::string {query}
		+{abstract} getMetaId() : std::string& {query}
		+{abstract} makeComposite(const PhysicalProperty& prop) : std::unique_ptr<AnnotationBase> {query}
		+{abstract} serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+IdentityCondition(const Resource& resource)
		#resource_ : Resource
		+matchEntity(const EntityBase& entity) : bool {query}
		+matches(const Component& component) : bool {query}
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+Resource(const URI& uri)
		+Resource(URI&& uri)
		+Resource(Component* element)
		#element_ : Component*
		+getURI(const URI& base) : URI {query}
		#uri_ : URI
		+isLocal() : bool {query}
		+operator==(const Resource& other) : bool {query}
		+humanize() : std::string {query}
		+toString() : std::string {query}
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+RasqalQueryResult(rasqal_query_results* results)
		+~RasqalQueryResult()
		#results_ : rasqal_query_results*
		+toRDFString(const std::string& format) : std::string
		+toString() : std::string
		+asList() : std::vector<std::vector<std::string> >
		#toRaptorGraph(raptor_world* world, raptor_serializer* serializer) : void
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+EntityDescriptor()
		+EntityDescriptor(const EntityDescriptor& other)
		+EntityDescriptor(EntityDescriptor&& other)
		+EntityDescriptor(std::initializer_list<T> l)
		#terms_ : DescriptorTerms
		+isEmpty() : bool {query}
		+humanize() : std::string {query}
		#humanizeTerms() : std::string {query}
		+addTerm(const DescriptorTerm& t) : void
		+addTerm(DescriptorTerm&& t) : void
		+addTerm(const Relation& relation, const Resource& resource) : void
		#serializeDescriptorTermToRDF(const DescriptorTerm& term, const URI& linked_uri, const URI& term_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
		+serializeToRDF(const URI& sbml_base_uri, const std::string& metaid, raptor_world* world, raptor_serializer* serializer) : void {query}
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+RasqalQuery(const std::string& rdf, const std::string& format, bool is_file)
		+~RasqalQuery()
		+run(const std::string& query) : RasqalQueryResult
		#raptor_iostr_ : raptor_iostream*
		#base_uri_ : raptor_uri*
		#uri_ : raptor_uri*
		#raptor_world_ : raptor_world*
		#dg_ : rasqal_data_graph*
		#query_ : rasqal_query*
		#rasqal_world_ : rasqal_world*
		#rdf_ : std::string
		#uri_string_ : unsigned char*
	}
}


namespace semsim {
	class SEMSIM_PUBLIC {
		+SBMLImporter(LIBSBML_CPP_NAMESPACE_QUALIFIER SBMLDocument* d)
		+SBMLImporter(const std::string& sbml)
		#extractAnnotation(LIBSBML_CPP_NAMESPACE_QUALIFIER SBase* s) : AnnotationPtr
		#extractAnnotation(LIBSBML_CPP_NAMESPACE_QUALIFIER Species* s) : AnnotationPtr
		#extractAnnotation(LIBSBML_CPP_NAMESPACE_QUALIFIER Compartment* c) : AnnotationPtr
		#extractAnnotation(LIBSBML_CPP_NAMESPACE_QUALIFIER Reaction* r) : AnnotationPtr
		#extractAnnotation(LIBSBML_CPP_NAMESPACE_QUALIFIER Parameter* p) : AnnotationPtr
		#getComponentFor(LIBSBML_CPP_NAMESPACE_QUALIFIER SBase* s) : Component*
		#extractCompositeAnnotation(LIBSBML_CPP_NAMESPACE_QUALIFIER Species* s) : CompositeAnnotation
		#extractSpeciesEntity(LIBSBML_CPP_NAMESPACE_QUALIFIER Species* s) : Entity
		#extractSpeciesEntityDescriptor(LIBSBML_CPP_NAMESPACE_QUALIFIER Species* s) : EntityDescriptor
		#m_ : LIBSBML_CPP_NAMESPACE_QUALIFIER Model*
		+{static} getRelationFromSBMLQual(LIBSBML_CPP_NAMESPACE_QUALIFIER BiolQualifierType_t q) : Relation&
		#getResourceFor(LIBSBML_CPP_NAMESPACE_QUALIFIER SBase* s) : Resource
		#result_ : SBMLModel
		+getSBMLModel() : SBMLModel&
		+getSBMLModel() : SBMLModel& {query}
		#{static} extractSingularAnnotation(LIBSBML_CPP_NAMESPACE_QUALIFIER SBase* s) : SingularAnnotation
		#{static} extractSingularAnnotation(LIBSBML_CPP_NAMESPACE_QUALIFIER Parameter* p) : SingularAnnotation
		#{static} makeUniqueMetaId(const Model& model, const std::string& base) : std::string
		#assignParticipants(Process& process, LIBSBML_CPP_NAMESPACE_QUALIFIER Reaction* r) : void
		#{static} populateDefinitionsAndTerms(LIBSBML_CPP_NAMESPACE_QUALIFIER SBase* s, EntityBase& e) : void
		#{static} populateSBOTerm(LIBSBML_CPP_NAMESPACE_QUALIFIER SBase* s, EntityBase& e) : void
	}
}


namespace semsim {
	class SemSimObject {
		+SemSimObject(SemSimTypes type)
		#semsimtype : SemSimTypes
		+hasDescription() : bool {query}
		+hasMetadataID() : bool {query}
		+hasName() : bool {query}
		#description : std::string
		#metadataID : std::string
		#name : std::string
		+getDescription() : std::string& {query}
		+getMetadataID() : std::string& {query}
		+getName() : std::string& {query}
		+copyDescription(const SemSimObject& other) : void
		+setDescription(const std::string& description) : void
		+setMetadataID(const std::string& metadataID) : void
		+setName(const std::string& name) : void
	}
}


namespace semsim {
	class SingularAnnotation {
		+SingularAnnotation(const std::string& metaid, const Resource& definition)
		+SingularAnnotation(const std::string& metaid)
		+SingularAnnotation(const std::string& metaid, Resource&& definition)
		+SingularAnnotation(const SingularAnnotation& other)
		+SingularAnnotation(SingularAnnotation&& other)
		+clone() : AnnotationBase* {query}
		+makeComposite(const PhysicalProperty& prop) : AnnotationPtr {query}
		+getURI(const URI& base) : URI {query}
		+isComposite() : bool {query}
		+getRDF(const URI& sbml_base_uri, const std::string& format) : std::string {query}
		+humanize() : std::string {query}
		+getMetaId() : std::string& {query}
		+serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
	}
}


namespace semsim {
	class Sink {
		+Sink(const std::string& id, Component* component, double multiplier)
		#component_ : Component*
		+serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : URI {query}
		+containsMetaId(const std::string& metaid) : bool {query}
		#multiplier_ : double
		#id_ : std::string
	}
}


namespace semsim {
	class Source {
		+Source(const std::string& id, Component* component, double multiplier)
		#component_ : Component*
		+serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : URI {query}
		+containsMetaId(const std::string& metaid) : bool {query}
		#multiplier_ : double
		#id_ : std::string
	}
>>>>>>> ciaran-develop
}




<<<<<<< HEAD
class SBMLModel {
    +SBMLModel(libsbml::SBMLDocument* d)
    +SBMLModel(SBMLModel&& other)
    +getComponent(libsbml::SBase* s) : Component* {query}
    +getComponent(libsbml::SBase* s) : Component*
    +getComponentForId(const std::string& id) : Component* {query}
    +getComponentForId(const std::string& id) : Component*
    +getProcess(libsbml::SBase* s) : Process*
    #element_map_ : SEMSIM_TR1_NAMESPACE_QUAL unordered_map<libsbml::SBase*, Component*>
    #element_id_map_ : SEMSIM_TR1_NAMESPACE_QUAL unordered_map<std::string, Component*>
    +hasComponent(const std::string id) : bool {query}
    +hasComponent(libsbml::SBase* s) : bool {query}
    +hasProcess(libsbml::SBase* s) : bool {query}
    #d_ : libsbml::SBMLDocument*
    +encodeXML() : std::string {query}
    +getFormat() : std::string {query}
    +getRDF(const URI& sbml_base_uri, const std::string& format) : std::string {query}
    +getRDF(const std::string& sbml_base_uri, const std::string& format) : std::string {query}
    +setComponentAnnotation(libsbml::SBase* s, const AnnotationBase& annotation) : void
    +setComponentAnnotation(libsbml::SBase* s, const AnnotationPtr& annotation) : void
    +setComponentAnnotation(libsbml::SBase* s, AnnotationPtr&& annotation) : void
}




class SBMLSpecies {
    +{static} GetSpeciesPhysicalProperty(libsbml::Species* s, libsbml::Model* m) : PhysicalProperty
    +{static} SubstanceUnitsAreConc(libsbml::Species* s, libsbml::Model* m) : bool
    +{static} UnitDefIsConc(libsbml::UnitDefinition* ud) : bool
=======


namespace semsim {
	Exception <|- - NullPointerException
>>>>>>> ciaran-develop
}




<<<<<<< HEAD
class SBO {
    +{static} get(OntologyTerm t) : Resource
}




class SelectQuery {
    +SelectQuery(ConditionPtr&& where)
    #where_ : ConditionPtr
}




abstract class SemSimModel {
    +SemSimModel()
    +SemSimModel(const SemSimModel& other)
    +SemSimModel(SemSimModel&& other) noexcept: components_(std::move(othercomponents_))
    +~SemSimModel()
    +findComponentWithMetaId(const std::string& metaid) : Component&
    +findComponentWithMetaId(const std::string& metaid) : Component& {query}
    +addComponent(const Component& component) : Component*
    +addComponent(Component&& component) : Component*
    +getComponents() : Components& {query}
    +getComponents() : Components&
    +addComponent(const Process& component) : Process*
    +addComponent(Process&& component) : Process*
    +containsMetaId(const std::string& metaid) : bool {query}
    +hasComponentWithMetaId(const std::string& metaid) : bool {query}
    #components_ : semsim::Components
    +getNumComponents() : std::size_t {query}
    +{abstract} encodeXML() : std::string {query}
    +{abstract} getFormat() : std::string {query}
    +{abstract} getRDF(const URI& sbml_base_uri, const std::string& format) : std::string {query}
    +humanize() : std::string {query}
}




class SemSimObject {
    +SemSimObject(SemSimTypes type)
    #semsimtype : SemSimTypes
    +hasDescription() : bool {query}
    +hasMetadataID() : bool {query}
    +hasName() : bool {query}
    #description : std::string
    #metadataID : std::string
    #name : std::string
    +getDescription() : std::string& {query}
    +getMetadataID() : std::string& {query}
    +getName() : std::string& {query}
    +copyDescription(const SemSimObject& other) : void
    +setDescription(const std::string& description) : void
    +setMetadataID(const std::string& metadataID) : void
    +setName(const std::string& name) : void
=======


namespace semsim {
	CompositeAnnotation *- - Entity
}


namespace semsim {
	NullPointerException *- - Exception
}


namespace semsim {
	SEMSIM_PUBLIC "20" *- - SBMLModel
>>>>>>> ciaran-develop
}




<<<<<<< HEAD
class SingularAnnotation {
    +SingularAnnotation(const std::string& metaid, const Resource& definition)
    +SingularAnnotation(const std::string& metaid)
    +SingularAnnotation(const std::string& metaid, Resource&& definition)
    +SingularAnnotation(const SingularAnnotation& other)
    +SingularAnnotation(SingularAnnotation&& other)
    +clone() : AnnotationBase* {query}
    +makeComposite(const PhysicalProperty& prop) : AnnotationPtr {query}
    +getURI(const URI& base) : URI {query}
    +isComposite() : bool {query}
    +getRDF(const URI& sbml_base_uri, const std::string& format) : std::string {query}
    +humanize() : std::string {query}
    +getMetaId() : std::string& {query}
    +serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : void {query}
}




class Sink {
    +Sink(const std::string& id, Component* component, double multiplier)
    #component_ : Component*
    +serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : URI {query}
    +containsMetaId(const std::string& metaid) : bool {query}
    #multiplier_ : double
    #id_ : std::string
}




class Source {
    +Source(const std::string& id, Component* component, double multiplier)
    #component_ : Component*
    +serializeToRDF(const URI& sbml_base_uri, raptor_world* world, raptor_serializer* serializer) : URI {query}
    +containsMetaId(const std::string& metaid) : bool {query}
    #multiplier_ : double
    #id_ : std::string
}




class Term {
    +Term(const Relation& relation, const Resource& resource)
    +Term(Relation&& relation, Resource&& resource)
    +Term(const Relation& relation, const double value)
    #relation_ : Relation
    +getRelation() : Relation& {query}
    #resource_ : Resource
    +getResource() : Resource& {query}
    +isValue() : bool {query}
    #is_value_ : bool
    +getValue() : double {query}
    #value_ : double
    +toString() : std::string {query}
}




class URI {
    +URI()
    +URI(const std::string& uri)
    +URI(const char* uri)
    +URI(std::string&& uri)
    +appendToFrag(const std::string& suffix) : URI {query}
    +withFrag(const std::string& suffix) : URI {query}
    +operator==(const URI& other) : bool {query}
    +encode() : std::string {query}
    #encoded_uri_ : std::string
    +toString() : std::string {query}
}




class bqb {
    +{static} encodes : const static Relation
    +{static} hasPart : const static Relation
    +{static} hasProperty : const static Relation
    +{static} hasTaxon : const static Relation
    +{static} hasVersion : const static Relation
    +{static} is : const static Relation
    +{static} isDescribedBy : const static Relation
    +{static} isEncodedBy : const static Relation
    +{static} isHomologTo : const static Relation
    +{static} isPartOf : const static Relation
    +{static} isPropertyOf : const static Relation
    +{static} isVersionOf : const static Relation
    +{static} occursIn : const static Relation
    +{static} root : const static std::string
    +{static} humanizeQualifier(const Relation& q) : std::string
}




class semsim {
    +{static} hasMediatorParticipant : const static Relation
    +{static} hasMultiplier : const static Relation
    +{static} hasPhysicalEntityReference : const static Relation
    +{static} hasSBOTerm : const static Relation
    +{static} hasSinkParticipant : const static Relation
    +{static} hasSourceParticipant : const static Relation
    +{static} hasValue : const static Relation
    +{static} root : const static std::string
}








AnnotationBase <|- - CompositeAnnotation




AnnotationBase <|- - SingularAnnotation




Component <|- - Process




EntityBase <|- - Entity




EntityBase <|- - SingularAnnotation




Exception <|- - NullPointerException




Ontology <|- - CHEBI




Ontology <|- - CL




Ontology <|- - GO




Ontology <|- - OPB




Ontology <|- - SBO




Participant <|- - Mediator




Participant <|- - Sink




Participant <|- - Source




SemSimModel <|- - SBMLModel




Term <|- - DescriptorTerm








CompositeAnnotation *- - Entity




CompositeAnnotation *- - PhysicalProperty




IdentityCondition *- - Resource




Mediator o- - Component




NullPointerException *- - Exception




PhysicalProperty *- - Resource




Relation *- - URI




Resource o- - Component




Resource *- - URI




SBMLImporter *- - SBMLModel




SBMLModel "2" o- - Component




SemSimModel *- - semsim




Sink o- - Component




Source o- - Component




Term *- - Relation




Term *- - Resource




bqb "13" *- - Relation




semsim "7" *- - Relation





=======
>>>>>>> ciaran-develop

@enduml

PlantUML version 1.2020.05(Thu Mar 19 21:17:32 GMT 2020)
(GPL source distribution)
<<<<<<< HEAD
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) Client VM
Java Version: 1.8.0_241-b07
Operating System: Windows 10
Default Encoding: Cp1252
Language: en
Country: US
=======
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.6+10-post-Ubuntu-1ubuntu118.04.1
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: null
>>>>>>> ciaran-develop
--></g></svg>