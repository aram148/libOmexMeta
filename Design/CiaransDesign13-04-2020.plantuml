@startuml





/' Objects '/

class BiomodelsQualifier {
    +BiomodelsQualifier(const std::string& qualifier)
    #setValidTerms() : void
}


class ControlledVocabulary {
    +ControlledVocabulary()
    +ControlledVocabulary(std::string qualifier)
    +getUri() : Uri 
    +operator!=(const ControlledVocabulary& rhs) : bool 
    +operator==(const ControlledVocabulary& rhs) : bool 
    +operator<<(std::ostream& os, const ControlledVocabulary& vocabulary) : std : : ostream&
    +make_shared() : std::shared_ptr<ControlledVocabulary>
    -prefix_ : std::string
    -qualifier : std::string
    -root : std::string
    +getPrefix() : std::string&
    +getTerm() : std::string&
    +getRoot() : std::string& 
    #valid_terms : std::vector<std::string>
    +getValidTerms() : std::vector<std::string>& 
    +setPrefix(const std::string& cvNamespace) : void
    +setRoot(const std::string& root) : void
    #setValidTerms() : void
    #verify() : void
}


abstract class IRDF {
+{abstract} serialize(std::string format) : std::string
}

'class Predicate {
'    +Predicate()
'    +Predicate(const std::shared_ptr<ControlledVocabulary>& term)
'    +getUri() : Uri
'    +operator!=(const Predicate& rhs) : bool
'    +operator==(const Predicate& rhs) : bool
'    +operator<<(std::ostream& os, const Predicate& predicate) : std : : ostream&
'    -term : std::shared_ptr<ControlledVocabulary>
'    +getTerm() : std::shared_ptr<ControlledVocabulary>&
'}

'class PredicateNamespaces {
'    +PredicateNamespaces()
'    +{static} getNamespaces() : std::unordered_map<std::string , std::string>
'}


class RaptorUtils {
    +{static} raptorUriToTerm(raptor_world* world, raptor_uri* uri) : raptor_term*
    +{static} raptorStringToUri(raptor_world* world, const unsigned char* str) : raptor_uri*
    +{static} raptorUriToString(raptor_uri* u) : std::string
    +{static} raptorTermToString(raptor_term* term) : unsigned char*
}

class Resource {
    +Resource()
    +Resource(std::string resourceNamespace, std::string identifier)
    +Resource(std::string resource)
    +operator!=(const Resource& rhs) : bool 
    +operator==(const Resource& rhs) : bool 
    +operator<<(std::ostream& os, const Resource& resource) : std : : ostream&
    +build() : std::string 
    -identifier : std::string
    -identifiers_base : std::string
    -resource_namespace : std::string
    +getIdentifier() : std::string& 
    +getIdentifiersBase() : std::string& 
    +getResourceNamespace() : std::string& 
    +{static} splitStringBy(std::string str, char delimiter) : std::vector<std::string>
}


class Subject {
    +Subject()
    +Subject(std::string metaId)
    +operator!=(const Subject& rhs) : bool 
    +operator==(const Subject& rhs) : bool 
    +operator<<(std::ostream& os, const Subject& subject) : std : : ostream&
    -metaId : std::string
    +getMetaId() : std::string& 
}

class Triple {
    +Triple(Subject subject, Predicate predicate, Resource resource)
    +Triple()
    +Triple(const Triple& triple)
    +Triple(Triple&& triple)
    +~Triple()
    -predicate : Predicate
    +getPredicate() : Predicate& 
    -resource : Resource
    +getResource() : Resource& 
    -subject : Subject
    +getSubject() : Subject& 
    +operator=(const Triple& triple) : Triple&
    +operator=(Triple&& triple) : Triple&
    +operator!=(const Triple& rhs) : bool 
    +operator==(const Triple& rhs) : bool 
    +operator<<(std::ostream& os, const Triple& triple) : std : : ostream&
    +serialize(std::string format) : std::string
    +{static} from_xml(std::string xml) : void
    -{static} parseTriple(void* user_data, raptor_statement* raptor_triple) : void
}


class Uri {
    +Uri()
    +Uri(const Uri& url)
    +Uri(Uri&& url) noexcept: m_ip_v(-1)
    +Uri(std::string url_str)
    +query(size_t i) : KeyVal&
    +set_query(size_t i) : KeyVal&
    +query() : Query&
    +set_query() : Query&
    +add_query(KeyVal& kv) : Uri&
    +add_query(std::string& key, std::string& val) : Uri&
    +add_query(std::string& key) : Uri&
    +clear() : Uri&
    +fragment(const std::string& f) : Uri&
    +host(const std::string& h, uint8_t ip_v) : Uri&
    +operator=(std::string& url_str) : Uri&
    +operator=(const Uri& url) : Uri&
    +operator=(Uri&& url) : Uri&
    +path(const std::string& str) : Uri&
    +port(const std::string& str) : Uri&
    +port(std::uint16_t num) : Uri&
    +scheme(const std::string& s) : Uri&
    +set_query(Query& q) : Uri&
    +str(std::string& url_str) : Uri&
    +user_info(const std::string& s) : Uri&
    +operator!=(const Uri& rhs) : bool 
    +operator==(const Uri& rhs) : bool 
    -m_query : mutable Query
    -m_ip_v : mutable std::int8_t
    -m_fragment : mutable std::string
    -m_host : mutable std::string
    -m_path : mutable std::string
    -m_port : mutable std::string
    -m_scheme : mutable std::string
    -m_url : mutable std::string
    -m_user : mutable std::string
    +operator<<(std::ostream& os, const Uri& uri) : std : : ostream&
    +ip_version() : std::int8_t
    +output(std::ostream& o) : std::ostream& 
    +end() : std::string
    +pruneEnd() : std::string
    +str() : std::string 
    +fragment() : std::string&
    +host() : std::string&
    +path() : std::string&
    +port() : std::string&
    +scheme() : std::string& 
    +user_info() : std::string&
    -assign(const Uri& url) : void
    -assign(Uri&& url) : void
    -build_url() : void 
    -lazy_parse() : void 
    -parse_url() : void 
}

/' Relationships for first part '/


IRDF <|-- Triple
IRDF <|-- ListOfTriples
IRDF <|-- SingularAnnotation
ListOfTriples --> Triple

Subject *-- Triple
ControlledVocabulary *-- Triple
Resource *-- Triple
ControlledVocabulary <|-- BiomodelsQualifier


Uri <-- Subject
Triple <-- PhysicalProperty
Triple <-- PropertyBearer
PropertyBearer <|-- PhysicalEntity
PropertyBearer <|-- PhysicalProcess
PropertyBearer <|-- PhysicalForce
PropertyBearer <|-- PhysicalDependency

SingularAnnotation --|> Annotation
CompositeAnnotation --|> Annotation
Triple <-- SingularAnnotation

PropertyBearer <-- CompositeAnnotation
PhysicalProperty <-- CompositeAnnotation

Annotation <-- ListOfAnnotations

class CurlGet {
    +CurlGet()
    +{static} download(const std::string& url, const std::string& output_filename) : int
    -{static} curlWriteCallback(void* data, size_t size, size_t nmemb, void* userp) : size_t
}


class RDF {
    +RDF()
    +RDF(librdf_world* world, raptor_world* raptor_world_, librdf_storage* storage, librdf_model* model)
    +RDF(const RDF& libRdfModel)
    +RDF(RDF&& libRdfModel)
    +~RDF()
    +operator=(const RDF& libRdfModel) : RDF&
    +operator=(RDF&& libRdfModel) : RDF&
    +operator!=(const RDF& rhs) : bool
    +operator==(const RDF& rhs) : bool
    -model_ : librdf_model*
    -storage_ : librdf_storage*
    -world_ : librdf_world*
    -raptor_world_ : raptor_world*
    -makeWriter(const std::string& format, const std::string& base_uri) : semsim::Writer
    -namespaces_ : std::unordered_map<const char*, const char*>
    +{static} init() : LibrdfObjectsTuple
    +{static} fromOmex(std::string filename_or_url) : RDF
    +{static} fromRDF(std::string filename) : RDF
    +{static} fromUrl(std::string url) : RDF
    +{static} listOptions() : std::ostringstream
    +addStatement(std::string subject, std::string predicate, std::string resource) : void
    +declareNamespaces() : void
    +{static} fromXML(const std::string& filename, std::string format) : semsim::RDF
    +{static} fromString(const std::string& str, std::string format) : void
    +toFile(std::string format) : void
    +toString(std::string format, std::string base_uri) : std::string
    +toEditor() : Editor
    +getModel() : librdf_model*
    +getStorage() : librdf_storage*
    +getWorld() : librdf_world*
    +getRaptorWorld() : raptor_world*
    +getNamespaces() : std::unordered_map<const char* , char*>&
    +setModel(librdf_model* model) : void
    +setNamespaces(const std::unordered_map<const char*, const char*>& namespaces) : void
    +setOption() : void
    +setRaptorWorld(raptor_world* raptorWorldPtr) : void
    +setStorage(librdf_storage* storage) : void
    +setWorld(librdf_world* world) : void
}

class Reader {
    +Reader(librdf_world* world, librdf_model* model, std::string format)
    -model_ : librdf_model*
    -parser_ : librdf_parser*
    -baseUri_ : librdf_uri*
    -world_ : librdf_world*
    -raptor_world_ptr_ : raptor_world*
    -format_ : std::string
    -makeParser(std::string format) : librdf_parser*
    +fromString(const std::string& rdf_string) : std::string
    +fromFile(const std::string& filename) : void
    +parseNamespacesWithPrefix() : std::unordered_map<const char* , char*>
    +setBaseUri(const std::string& baseUri) : void
    +setFormat(const std::string& f) : void
    +setOption(const std::string& option, const std::string& value) : void
    +getModel() : librdf_model*
    +getParser() : librdf_parser*
    +getBaseUri() : librdf_uri*
    +getWorld() : librdf_world* 
    +getRaptorWorld() : raptor_world*
    +getFormat() : std::string&
    +getValidParserNames() : std::vector<std::string>&
}

class SemsimCombineArchive {
    +{static} fromFile(const std::string& file) : SemsimCombineArchive
    +{static} fromUrl(const std::string& url, const std::string& output_filename) : semsim::SemsimCombineArchive
    +CombineArchive : using CombineArchive::
}

class SemsimUtils {
    +SemsimUtils()
    +{static} exists(const std::string& filename) : bool
    +{static} removeFile(const std::string& filename) : int
    +{static} download(const std::string& url, const std::string filename) : void
    +{static} removeIfExists(const std::string& filename) : void
}

class Writer {
    +Writer(librdf_world* world_, librdf_model* model_, std::string format, const std::string& base_uri)
    -model_ : librdf_model*
    -serializer : librdf_serializer*
    -base_uri_ : librdf_uri*
    -world_ : librdf_world*
    -raptor_world_ptr_ : raptor_world*
    -format : std::string
    +print() : std::string
    +registerNamespace(const std::string& ns, const std::string& prefix) : void
    +setFormat(const std::string& format) : void
    +setOption(const std::string& option, const std::string& value) : void
    +setWorld(librdf_world* world_) : void
    +toString() : std::string
    +toFile(std::string format) : void
}

class Editor {
    - metaIdPlacer : MetaId*
    + <<constructor>> Editor(std::string xml)
    - addMetaIds() : void
    + getMetaIds() : std::string
    + addAnnotation() : void
    + removeAnnotation() : void
}
note right of Editor
    - addMetaIds happens in
      constructor.
    - addAnnotation is overloaded
      method with one signature
      per type of annotation.
end note

note top of Editor
    Design choice, overloaded
    addAnnotation method or 5
    methods with descriptive names:
    singular, physicalEntity PhysicalProcess
    etc.
end note

class KeyGen {}

class MetaIdAssistant {
    - std::vector<std::string> elements_
    - metaIdAssistant : MetaIdAssistant
    + <<constructor>> MetaIdAssistant(std::string xml, MetaIdAssistant* metaIdAssistant)
    - addMetaIds() : void
    + getMetaIds() : std::string
}

class SBMLMetaIdAssistant {}

class CellMLMetaIdAssistant {}

MetaIdAssistant <|-- SBMLMetaIdAssistant
MetaIdAssistant <|-- CellMLMetaIdAssistant

note right of MetaIdAssistant
    Subclasses only implement
    new elements_ vector.
    Directly uses lxml to minimize
    dependencies on libsbml/libcellml.
end note

RDF o-- Writer : aggregation
RDF o-- Reader : aggregation
RDF o-- Editor : aggregation
RDF *-- SemsimUtils: composition
RDF *-- SemsimCombineArchive : Composition
SemsimUtils *-- CurlGet: Composition


CombineArchive <|-- SemsimCombineArchive :extension







@enduml
