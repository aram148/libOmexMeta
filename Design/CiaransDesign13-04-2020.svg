<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="2298px" preserveAspectRatio="none" style="width:3838px;height:2298px;" version="1.1" viewBox="0 0 3838 2298" width="3838px" zoomAndPan="magnify"><defs><filter height="300%" id="f18l7qxjusypax" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[91066023993798d5dde570551cd8c913]
cluster semsim--><polygon fill="#FFFFFF" filter="url(#f18l7qxjusypax)" points="22,312,81,312,88,335.6094,3043,335.6094,3043,2286,22,2286,22,312" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="22" x2="88" y1="335.6094" y2="335.6094"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="53" x="26" y="328.5332">semsim</text><!--MD5=[420ee313a8eb61f4516c763f482804d0]
cluster semsim::Uri--><polygon fill="#FFFFFF" filter="url(#f18l7qxjusypax)" points="3067,24,3154,24,3161,47.6094,3682,47.6094,3682,675,3067,675,3067,24" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="3067" x2="3161" y1="47.6094" y2="47.6094"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="81" x="3071" y="40.5332">semsim::Uri</text><!--MD5=[37727a75380ff2e86d551fd6dfe3e031]
class semsim.BiomodelsQualifier--><rect fill="#FEFECE" filter="url(#f18l7qxjusypax)" height="75.6719" id="semsim.BiomodelsQualifier" style="stroke: #A80036; stroke-width: 1.5;" width="249" x="142.5" y="2194"/><ellipse cx="209.75" cy="2210" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M212.5156,2205.875 Q212.6719,2205.6563 212.8594,2205.5469 Q213.0469,2205.4375 213.2656,2205.4375 Q213.6406,2205.4375 213.875,2205.6953 Q214.1094,2205.9531 214.1094,2206.5625 L214.1094,2208.0156 Q214.1094,2208.625 213.875,2208.8906 Q213.6406,2209.1563 213.2656,2209.1563 Q212.9219,2209.1563 212.7188,2208.9531 Q212.5156,2208.7656 212.4063,2208.25 Q212.3594,2207.8906 212.1719,2207.7031 Q211.8438,2207.3281 211.2344,2207.1094 Q210.625,2206.8906 210,2206.8906 Q209.2344,2206.8906 208.6016,2207.2188 Q207.9688,2207.5469 207.4766,2208.2969 Q206.9844,2209.0469 206.9844,2210.0781 L206.9844,2211.1719 Q206.9844,2212.4063 207.875,2213.2266 Q208.7656,2214.0469 210.3594,2214.0469 Q211.2969,2214.0469 211.9531,2213.7969 Q212.3438,2213.6406 212.7656,2213.2031 Q213.0313,2212.9375 213.1797,2212.8594 Q213.3281,2212.7813 213.5313,2212.7813 Q213.8594,2212.7813 214.1172,2213.0391 Q214.375,2213.2969 214.375,2213.6406 Q214.375,2213.9844 214.0313,2214.3906 Q213.5313,2214.9688 212.7344,2215.2969 Q211.6563,2215.75 210.3594,2215.75 Q208.8438,2215.75 207.6406,2215.125 Q206.6563,2214.625 205.9688,2213.5547 Q205.2813,2212.4844 205.2813,2211.2031 L205.2813,2210.0469 Q205.2813,2208.7188 205.8984,2207.5703 Q206.5156,2206.4219 207.6094,2205.8047 Q208.7031,2205.1875 209.9375,2205.1875 Q210.6719,2205.1875 211.3203,2205.3516 Q211.9688,2205.5156 212.5156,2205.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="106" x="230.25" y="2214.9102">BiomodelsQualifier</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="143.5" x2="390.5" y1="2226" y2="2226"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="143.5" x2="390.5" y1="2234" y2="2234"/><ellipse cx="153.5" cy="2245" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="162.5" y="2249.4189">BiomodelsQualifier(const std::string&amp; qualifier)</text><polygon fill="#FFFF44" points="153.5,2253.8359,157.5,2257.8359,153.5,2261.8359,149.5,2257.8359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="162.5" y="2263.2549">setValidTerms() : void</text><!--MD5=[cd0158bb3e7381322522ad33c596103f]
class semsim.ControlledVocabulary--><rect fill="#FEFECE" filter="url(#f18l7qxjusypax)" height="310.8828" id="semsim.ControlledVocabulary" style="stroke: #A80036; stroke-width: 1.5;" width="458" x="38" y="1595"/><ellipse cx="204.25" cy="1611" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M207.0156,1606.875 Q207.1719,1606.6563 207.3594,1606.5469 Q207.5469,1606.4375 207.7656,1606.4375 Q208.1406,1606.4375 208.375,1606.6953 Q208.6094,1606.9531 208.6094,1607.5625 L208.6094,1609.0156 Q208.6094,1609.625 208.375,1609.8906 Q208.1406,1610.1563 207.7656,1610.1563 Q207.4219,1610.1563 207.2188,1609.9531 Q207.0156,1609.7656 206.9063,1609.25 Q206.8594,1608.8906 206.6719,1608.7031 Q206.3438,1608.3281 205.7344,1608.1094 Q205.125,1607.8906 204.5,1607.8906 Q203.7344,1607.8906 203.1016,1608.2188 Q202.4688,1608.5469 201.9766,1609.2969 Q201.4844,1610.0469 201.4844,1611.0781 L201.4844,1612.1719 Q201.4844,1613.4063 202.375,1614.2266 Q203.2656,1615.0469 204.8594,1615.0469 Q205.7969,1615.0469 206.4531,1614.7969 Q206.8438,1614.6406 207.2656,1614.2031 Q207.5313,1613.9375 207.6797,1613.8594 Q207.8281,1613.7813 208.0313,1613.7813 Q208.3594,1613.7813 208.6172,1614.0391 Q208.875,1614.2969 208.875,1614.6406 Q208.875,1614.9844 208.5313,1615.3906 Q208.0313,1615.9688 207.2344,1616.2969 Q206.1563,1616.75 204.8594,1616.75 Q203.3438,1616.75 202.1406,1616.125 Q201.1563,1615.625 200.4688,1614.5547 Q199.7813,1613.4844 199.7813,1612.2031 L199.7813,1611.0469 Q199.7813,1609.7188 200.3984,1608.5703 Q201.0156,1607.4219 202.1094,1606.8047 Q203.2031,1606.1875 204.4375,1606.1875 Q205.1719,1606.1875 205.8203,1606.3516 Q206.4688,1606.5156 207.0156,1606.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="117" x="224.75" y="1615.9102">ControlledVocabulary</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="39" x2="495" y1="1627" y2="1627"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="46" y="1635"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="58" y="1642.4189">cv_namespace : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="46" y="1648.8359"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="58" y="1656.2549">qualifier : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="46" y="1662.6719"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="58" y="1670.0908">root : std::string</text><polygon fill="none" points="49,1674.5078,53,1678.5078,49,1682.5078,45,1678.5078" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="58" y="1683.9268">valid_terms : std::vector&lt;std::string&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="39" x2="495" y1="1690.3438" y2="1690.3438"/><ellipse cx="49" cy="1701.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="58" y="1705.7627">ControlledVocabulary()</text><ellipse cx="49" cy="1715.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="58" y="1719.5986">ControlledVocabulary(std::string qualifier)</text><ellipse cx="49" cy="1729.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="58" y="1733.4346">getUri() : Uri {query}</text><ellipse cx="49" cy="1742.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="58" y="1747.2705">operator!=(const ControlledVocabulary&amp; rhs) : bool {query}</text><ellipse cx="49" cy="1756.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="58" y="1761.1064">operator==(const ControlledVocabulary&amp; rhs) : bool {query}</text><ellipse cx="49" cy="1770.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="432" x="58" y="1774.9424">operator&lt;&lt;(std::ostream&amp; os, const ControlledVocabulary&amp; vocabulary) : std : : ostream&amp;</text><ellipse cx="49" cy="1784.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="58" y="1788.7783">make_shared() : std::shared_ptr&lt;ControlledVocabulary&gt;</text><ellipse cx="49" cy="1798.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="58" y="1802.6143">getCvNamespace() : std::string&amp; {query}</text><ellipse cx="49" cy="1812.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="58" y="1816.4502">getQualifier() : std::string&amp; {query}</text><ellipse cx="49" cy="1825.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="58" y="1830.2861">getRoot() : std::string&amp; {query}</text><ellipse cx="49" cy="1839.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="58" y="1844.1221">getValidTerms() : std::vector&lt;std::string&gt;&amp; {query}</text><ellipse cx="49" cy="1853.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="58" y="1857.958">setCvNamespace(const std::string&amp; cvNamespace) : void</text><ellipse cx="49" cy="1867.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="58" y="1871.7939">setRoot(const std::string&amp; root) : void</text><polygon fill="#FFFF44" points="49,1876.2109,53,1880.2109,49,1884.2109,45,1880.2109" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="58" y="1885.6299">setValidTerms() : void</text><polygon fill="#FFFF44" points="49,1890.0469,53,1894.0469,49,1898.0469,45,1894.0469" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="65" x="58" y="1899.4658">verify() : void</text><!--MD5=[d07ebae882715ee0f9d3ffc3535e0f3d]
class semsim.CurlGet--><rect fill="#FEFECE" filter="url(#f18l7qxjusypax)" height="89.5078" id="semsim.CurlGet" style="stroke: #A80036; stroke-width: 1.5;" width="394" x="1276" y="583"/><ellipse cx="1447.75" cy="599" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1450.5156,594.875 Q1450.6719,594.6563 1450.8594,594.5469 Q1451.0469,594.4375 1451.2656,594.4375 Q1451.6406,594.4375 1451.875,594.6953 Q1452.1094,594.9531 1452.1094,595.5625 L1452.1094,597.0156 Q1452.1094,597.625 1451.875,597.8906 Q1451.6406,598.1563 1451.2656,598.1563 Q1450.9219,598.1563 1450.7188,597.9531 Q1450.5156,597.7656 1450.4063,597.25 Q1450.3594,596.8906 1450.1719,596.7031 Q1449.8438,596.3281 1449.2344,596.1094 Q1448.625,595.8906 1448,595.8906 Q1447.2344,595.8906 1446.6016,596.2188 Q1445.9688,596.5469 1445.4766,597.2969 Q1444.9844,598.0469 1444.9844,599.0781 L1444.9844,600.1719 Q1444.9844,601.4063 1445.875,602.2266 Q1446.7656,603.0469 1448.3594,603.0469 Q1449.2969,603.0469 1449.9531,602.7969 Q1450.3438,602.6406 1450.7656,602.2031 Q1451.0313,601.9375 1451.1797,601.8594 Q1451.3281,601.7813 1451.5313,601.7813 Q1451.8594,601.7813 1452.1172,602.0391 Q1452.375,602.2969 1452.375,602.6406 Q1452.375,602.9844 1452.0313,603.3906 Q1451.5313,603.9688 1450.7344,604.2969 Q1449.6563,604.75 1448.3594,604.75 Q1446.8438,604.75 1445.6406,604.125 Q1444.6563,603.625 1443.9688,602.5547 Q1443.2813,601.4844 1443.2813,600.2031 L1443.2813,599.0469 Q1443.2813,597.7188 1443.8984,596.5703 Q1444.5156,595.4219 1445.6094,594.8047 Q1446.7031,594.1875 1447.9375,594.1875 Q1448.6719,594.1875 1449.3203,594.3516 Q1449.9688,594.5156 1450.5156,594.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="42" x="1468.25" y="603.9102">CurlGet</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1277" x2="1669" y1="615" y2="615"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1277" x2="1669" y1="623" y2="623"/><ellipse cx="1287" cy="634" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="44" x="1296" y="638.4189">CurlGet()</text><ellipse cx="1287" cy="647.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="346" x="1296" y="652.2549">download(const std::string&amp; url, const std::string&amp; output_filename) : int</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1284" y="658.6719"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="368" x="1296" y="666.0908">curlWriteCallback(void* data, size_t size, size_t nmemb, void* userp) : size_t</text><!--MD5=[aa61e4eb9fe9ab165dc332cb5f4d3215]
class semsim.Predicate--><rect fill="#FEFECE" filter="url(#f18l7qxjusypax)" height="158.6875" id="semsim.Predicate" style="stroke: #A80036; stroke-width: 1.5;" width="390" x="38" y="1058"/><ellipse cx="202.75" cy="1074" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M205.5156,1069.875 Q205.6719,1069.6563 205.8594,1069.5469 Q206.0469,1069.4375 206.2656,1069.4375 Q206.6406,1069.4375 206.875,1069.6953 Q207.1094,1069.9531 207.1094,1070.5625 L207.1094,1072.0156 Q207.1094,1072.625 206.875,1072.8906 Q206.6406,1073.1563 206.2656,1073.1563 Q205.9219,1073.1563 205.7188,1072.9531 Q205.5156,1072.7656 205.4063,1072.25 Q205.3594,1071.8906 205.1719,1071.7031 Q204.8438,1071.3281 204.2344,1071.1094 Q203.625,1070.8906 203,1070.8906 Q202.2344,1070.8906 201.6016,1071.2188 Q200.9688,1071.5469 200.4766,1072.2969 Q199.9844,1073.0469 199.9844,1074.0781 L199.9844,1075.1719 Q199.9844,1076.4063 200.875,1077.2266 Q201.7656,1078.0469 203.3594,1078.0469 Q204.2969,1078.0469 204.9531,1077.7969 Q205.3438,1077.6406 205.7656,1077.2031 Q206.0313,1076.9375 206.1797,1076.8594 Q206.3281,1076.7813 206.5313,1076.7813 Q206.8594,1076.7813 207.1172,1077.0391 Q207.375,1077.2969 207.375,1077.6406 Q207.375,1077.9844 207.0313,1078.3906 Q206.5313,1078.9688 205.7344,1079.2969 Q204.6563,1079.75 203.3594,1079.75 Q201.8438,1079.75 200.6406,1079.125 Q199.6563,1078.625 198.9688,1077.5547 Q198.2813,1076.4844 198.2813,1075.2031 L198.2813,1074.0469 Q198.2813,1072.7188 198.8984,1071.5703 Q199.5156,1070.4219 200.6094,1069.8047 Q201.7031,1069.1875 202.9375,1069.1875 Q203.6719,1069.1875 204.3203,1069.3516 Q204.9688,1069.5156 205.5156,1069.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="52" x="223.25" y="1078.9102">Predicate</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="39" x2="427" y1="1090" y2="1090"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="46" y="1098"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="58" y="1105.4189">term : std::shared_ptr&lt;ControlledVocabulary&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="39" x2="427" y1="1111.8359" y2="1111.8359"/><ellipse cx="49" cy="1122.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="53" x="58" y="1127.2549">Predicate()</text><ellipse cx="49" cy="1136.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="58" y="1141.0908">Predicate(const std::shared_ptr&lt;ControlledVocabulary&gt;&amp; term)</text><ellipse cx="49" cy="1150.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="58" y="1154.9268">getUri() : Uri {query}</text><ellipse cx="49" cy="1164.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="58" y="1168.7627">operator!=(const Predicate&amp; rhs) : bool {query}</text><ellipse cx="49" cy="1178.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="58" y="1182.5986">operator==(const Predicate&amp; rhs) : bool {query}</text><ellipse cx="49" cy="1192.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="364" x="58" y="1196.4346">operator&lt;&lt;(std::ostream&amp; os, const Predicate&amp; predicate) : std : : ostream&amp;</text><ellipse cx="49" cy="1205.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="292" x="58" y="1210.2705">getTerm() : std::shared_ptr&lt;ControlledVocabulary&gt;&amp; {query}</text><!--MD5=[e1dd44761359596cc32d97ebefcdb42d]
class semsim.PredicateNamespaces--><rect fill="#FEFECE" filter="url(#f18l7qxjusypax)" height="75.6719" id="semsim.PredicateNamespaces" style="stroke: #A80036; stroke-width: 1.5;" width="335" x="1705.5" y="590"/><ellipse cx="1805.25" cy="606" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1808.0156,601.875 Q1808.1719,601.6563 1808.3594,601.5469 Q1808.5469,601.4375 1808.7656,601.4375 Q1809.1406,601.4375 1809.375,601.6953 Q1809.6094,601.9531 1809.6094,602.5625 L1809.6094,604.0156 Q1809.6094,604.625 1809.375,604.8906 Q1809.1406,605.1563 1808.7656,605.1563 Q1808.4219,605.1563 1808.2188,604.9531 Q1808.0156,604.7656 1807.9063,604.25 Q1807.8594,603.8906 1807.6719,603.7031 Q1807.3438,603.3281 1806.7344,603.1094 Q1806.125,602.8906 1805.5,602.8906 Q1804.7344,602.8906 1804.1016,603.2188 Q1803.4688,603.5469 1802.9766,604.2969 Q1802.4844,605.0469 1802.4844,606.0781 L1802.4844,607.1719 Q1802.4844,608.4063 1803.375,609.2266 Q1804.2656,610.0469 1805.8594,610.0469 Q1806.7969,610.0469 1807.4531,609.7969 Q1807.8438,609.6406 1808.2656,609.2031 Q1808.5313,608.9375 1808.6797,608.8594 Q1808.8281,608.7813 1809.0313,608.7813 Q1809.3594,608.7813 1809.6172,609.0391 Q1809.875,609.2969 1809.875,609.6406 Q1809.875,609.9844 1809.5313,610.3906 Q1809.0313,610.9688 1808.2344,611.2969 Q1807.1563,611.75 1805.8594,611.75 Q1804.3438,611.75 1803.1406,611.125 Q1802.1563,610.625 1801.4688,609.5547 Q1800.7813,608.4844 1800.7813,607.2031 L1800.7813,606.0469 Q1800.7813,604.7188 1801.3984,603.5703 Q1802.0156,602.4219 1803.1094,601.8047 Q1804.2031,601.1875 1805.4375,601.1875 Q1806.1719,601.1875 1806.8203,601.3516 Q1807.4688,601.5156 1808.0156,601.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="127" x="1825.75" y="610.9102">PredicateNamespaces</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1706.5" x2="2039.5" y1="622" y2="622"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1706.5" x2="2039.5" y1="630" y2="630"/><ellipse cx="1716.5" cy="641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="1725.5" y="645.4189">PredicateNamespaces()</text><ellipse cx="1716.5" cy="654.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="309" x="1725.5" y="659.2549">getNamespaces() : std::unordered_map&lt;std::string , std::string&gt;</text><!--MD5=[b4ed6298df8c1cd437beb4dfc088cffa]
class semsim.RDF--><rect fill="#FEFECE" filter="url(#f18l7qxjusypax)" height="559.9297" id="semsim.RDF" style="stroke: #A80036; stroke-width: 1.5;" width="508" x="2076" y="348"/><ellipse cx="2313.25" cy="364" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2316.0156,359.875 Q2316.1719,359.6563 2316.3594,359.5469 Q2316.5469,359.4375 2316.7656,359.4375 Q2317.1406,359.4375 2317.375,359.6953 Q2317.6094,359.9531 2317.6094,360.5625 L2317.6094,362.0156 Q2317.6094,362.625 2317.375,362.8906 Q2317.1406,363.1563 2316.7656,363.1563 Q2316.4219,363.1563 2316.2188,362.9531 Q2316.0156,362.7656 2315.9063,362.25 Q2315.8594,361.8906 2315.6719,361.7031 Q2315.3438,361.3281 2314.7344,361.1094 Q2314.125,360.8906 2313.5,360.8906 Q2312.7344,360.8906 2312.1016,361.2188 Q2311.4688,361.5469 2310.9766,362.2969 Q2310.4844,363.0469 2310.4844,364.0781 L2310.4844,365.1719 Q2310.4844,366.4063 2311.375,367.2266 Q2312.2656,368.0469 2313.8594,368.0469 Q2314.7969,368.0469 2315.4531,367.7969 Q2315.8438,367.6406 2316.2656,367.2031 Q2316.5313,366.9375 2316.6797,366.8594 Q2316.8281,366.7813 2317.0313,366.7813 Q2317.3594,366.7813 2317.6172,367.0391 Q2317.875,367.2969 2317.875,367.6406 Q2317.875,367.9844 2317.5313,368.3906 Q2317.0313,368.9688 2316.2344,369.2969 Q2315.1563,369.75 2313.8594,369.75 Q2312.3438,369.75 2311.1406,369.125 Q2310.1563,368.625 2309.4688,367.5547 Q2308.7813,366.4844 2308.7813,365.2031 L2308.7813,364.0469 Q2308.7813,362.7188 2309.3984,361.5703 Q2310.0156,360.4219 2311.1094,359.8047 Q2312.2031,359.1875 2313.4375,359.1875 Q2314.1719,359.1875 2314.8203,359.3516 Q2315.4688,359.5156 2316.0156,359.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="25" x="2333.75" y="368.9102">RDF</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2077" x2="2583" y1="380" y2="380"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2084" y="388"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="2096" y="395.4189">model_ : librdf_model*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2084" y="401.8359"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="2096" y="409.2549">storage_ : librdf_storage*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2084" y="415.6719"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="2096" y="423.0908">world_ : librdf_world*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2084" y="429.5078"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="2096" y="436.9268">raptor_world_ : raptor_world*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2084" y="443.3438"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="2096" y="450.7627">namespaces_ : std::unordered_map&lt;const char*, const char*&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2077" x2="2583" y1="457.1797" y2="457.1797"/><ellipse cx="2087" cy="468.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="28" x="2096" y="472.5986">RDF()</text><ellipse cx="2087" cy="482.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="482" x="2096" y="486.4346">RDF(librdf_world* world, raptor_world* raptor_world_, librdf_storage* storage, librdf_model* model)</text><ellipse cx="2087" cy="495.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="2096" y="500.2705">RDF(const RDF&amp; libRdfModel)</text><ellipse cx="2087" cy="509.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="2096" y="514.1064">RDF(RDF&amp;&amp; libRdfModel)</text><ellipse cx="2087" cy="523.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="34" x="2096" y="527.9424">~RDF()</text><ellipse cx="2087" cy="537.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="121" x="2096" y="541.7783">init() : LibrdfObjectsTuple</text><ellipse cx="2087" cy="551.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="212" x="2096" y="555.6143">fromOmex(std::string filename_or_url) : RDF</text><ellipse cx="2087" cy="565.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="170" x="2096" y="569.4502">fromRDF(std::string filename) : RDF</text><ellipse cx="2087" cy="578.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="135" x="2096" y="583.2861">fromUrl(std::string url) : RDF</text><ellipse cx="2087" cy="592.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="2096" y="597.1221">operator=(const RDF&amp; libRdfModel) : RDF&amp;</text><ellipse cx="2087" cy="606.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="2096" y="610.958">operator=(RDF&amp;&amp; libRdfModel) : RDF&amp;</text><ellipse cx="2087" cy="620.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="2096" y="624.7939">operator!=(const RDF&amp; rhs) : bool {query}</text><ellipse cx="2087" cy="634.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="2096" y="638.6299">operator==(const RDF&amp; rhs) : bool {query}</text><ellipse cx="2087" cy="648.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="2096" y="652.4658">getModel() : librdf_model* {query}</text><ellipse cx="2087" cy="661.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="2096" y="666.3018">getStorage() : librdf_storage* {query}</text><ellipse cx="2087" cy="675.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="2096" y="680.1377">getWorld() : librdf_world* {query}</text><ellipse cx="2087" cy="689.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="2096" y="693.9736">getRaptorWorld() : raptor_world* {query}</text><ellipse cx="2087" cy="703.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="338" x="2096" y="707.8096">fromXML(const std::string&amp; filename, std::string format) : semsim::RDF</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2084" y="714.2266"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="397" x="2096" y="721.6455">makeWriter(const std::string&amp; format, const std::string&amp; base_uri) : semsim::Writer</text><ellipse cx="2087" cy="731.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="154" x="2096" y="735.4814">listOptions() : std::ostringstream</text><ellipse cx="2087" cy="744.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="2096" y="749.3174">toString(std::string format, std::string base_uri) : std::string</text><ellipse cx="2087" cy="758.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="341" x="2096" y="763.1533">getNamespaces() : std::unordered_map&lt;const char* , char*&gt;&amp; {query}</text><ellipse cx="2087" cy="772.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="392" x="2096" y="776.9893">addStatement(std::string subject, std::string predicate, std::string resource) : void</text><ellipse cx="2087" cy="786.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="2096" y="790.8252">declareNamespaces() : void</text><ellipse cx="2087" cy="800.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="2096" y="804.6611">fromString(const std::string&amp; str, std::string format) : void</text><ellipse cx="2087" cy="814.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="2096" y="818.4971">setModel(librdf_model* model) : void</text><ellipse cx="2087" cy="827.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="444" x="2096" y="832.333">setNamespaces(const std::unordered_map&lt;const char*, const char*&gt;&amp; namespaces) : void</text><ellipse cx="2087" cy="841.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="2096" y="846.1689">setOption() : void</text><ellipse cx="2087" cy="855.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="2096" y="860.0049">setRaptorWorld(raptor_world* raptorWorldPtr) : void</text><ellipse cx="2087" cy="869.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="2096" y="873.8408">setStorage(librdf_storage* storage) : void</text><ellipse cx="2087" cy="883.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="2096" y="887.6768">setWorld(librdf_world* world) : void</text><ellipse cx="2087" cy="897.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="2096" y="901.5127">toFile(std::string format) : void</text><!--MD5=[ffaafff67b6e049cd40f942fab0d63a8]
class semsim.RaptorStatementHandler--><rect fill="#FEFECE" filter="url(#f18l7qxjusypax)" height="75.6719" id="semsim.RaptorStatementHandler" style="stroke: #A80036; stroke-width: 1.5;" width="408" x="2619" y="590"/><ellipse cx="2750.25" cy="606" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2753.0156,601.875 Q2753.1719,601.6563 2753.3594,601.5469 Q2753.5469,601.4375 2753.7656,601.4375 Q2754.1406,601.4375 2754.375,601.6953 Q2754.6094,601.9531 2754.6094,602.5625 L2754.6094,604.0156 Q2754.6094,604.625 2754.375,604.8906 Q2754.1406,605.1563 2753.7656,605.1563 Q2753.4219,605.1563 2753.2188,604.9531 Q2753.0156,604.7656 2752.9063,604.25 Q2752.8594,603.8906 2752.6719,603.7031 Q2752.3438,603.3281 2751.7344,603.1094 Q2751.125,602.8906 2750.5,602.8906 Q2749.7344,602.8906 2749.1016,603.2188 Q2748.4688,603.5469 2747.9766,604.2969 Q2747.4844,605.0469 2747.4844,606.0781 L2747.4844,607.1719 Q2747.4844,608.4063 2748.375,609.2266 Q2749.2656,610.0469 2750.8594,610.0469 Q2751.7969,610.0469 2752.4531,609.7969 Q2752.8438,609.6406 2753.2656,609.2031 Q2753.5313,608.9375 2753.6797,608.8594 Q2753.8281,608.7813 2754.0313,608.7813 Q2754.3594,608.7813 2754.6172,609.0391 Q2754.875,609.2969 2754.875,609.6406 Q2754.875,609.9844 2754.5313,610.3906 Q2754.0313,610.9688 2753.2344,611.2969 Q2752.1563,611.75 2750.8594,611.75 Q2749.3438,611.75 2748.1406,611.125 Q2747.1563,610.625 2746.4688,609.5547 Q2745.7813,608.4844 2745.7813,607.2031 L2745.7813,606.0469 Q2745.7813,604.7188 2746.3984,603.5703 Q2747.0156,602.4219 2748.1094,601.8047 Q2749.2031,601.1875 2750.4375,601.1875 Q2751.1719,601.1875 2751.8203,601.3516 Q2752.4688,601.5156 2753.0156,601.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="137" x="2770.75" y="610.9102">RaptorStatementHandler</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2620" x2="3026" y1="622" y2="622"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2620" x2="3026" y1="630" y2="630"/><ellipse cx="2630" cy="641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="382" x="2639" y="645.4189">raptorStatementPrintAsNTriples(void* user_data, raptor_statement* triple) : void</text><ellipse cx="2630" cy="654.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="377" x="2639" y="659.2549">raptorStatementPrintStatement(void* user_data, raptor_statement* triple) : void</text><!--MD5=[5c48085a0fd7184b017e3e0d9b8fd9dd]
class semsim.RaptorUtils--><rect fill="#FEFECE" filter="url(#f18l7qxjusypax)" height="103.3438" id="semsim.RaptorUtils" style="stroke: #A80036; stroke-width: 1.5;" width="399" x="1295.5" y="1086"/><ellipse cx="1459.75" cy="1102" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1462.5156,1097.875 Q1462.6719,1097.6563 1462.8594,1097.5469 Q1463.0469,1097.4375 1463.2656,1097.4375 Q1463.6406,1097.4375 1463.875,1097.6953 Q1464.1094,1097.9531 1464.1094,1098.5625 L1464.1094,1100.0156 Q1464.1094,1100.625 1463.875,1100.8906 Q1463.6406,1101.1563 1463.2656,1101.1563 Q1462.9219,1101.1563 1462.7188,1100.9531 Q1462.5156,1100.7656 1462.4063,1100.25 Q1462.3594,1099.8906 1462.1719,1099.7031 Q1461.8438,1099.3281 1461.2344,1099.1094 Q1460.625,1098.8906 1460,1098.8906 Q1459.2344,1098.8906 1458.6016,1099.2188 Q1457.9688,1099.5469 1457.4766,1100.2969 Q1456.9844,1101.0469 1456.9844,1102.0781 L1456.9844,1103.1719 Q1456.9844,1104.4063 1457.875,1105.2266 Q1458.7656,1106.0469 1460.3594,1106.0469 Q1461.2969,1106.0469 1461.9531,1105.7969 Q1462.3438,1105.6406 1462.7656,1105.2031 Q1463.0313,1104.9375 1463.1797,1104.8594 Q1463.3281,1104.7813 1463.5313,1104.7813 Q1463.8594,1104.7813 1464.1172,1105.0391 Q1464.375,1105.2969 1464.375,1105.6406 Q1464.375,1105.9844 1464.0313,1106.3906 Q1463.5313,1106.9688 1462.7344,1107.2969 Q1461.6563,1107.75 1460.3594,1107.75 Q1458.8438,1107.75 1457.6406,1107.125 Q1456.6563,1106.625 1455.9688,1105.5547 Q1455.2813,1104.4844 1455.2813,1103.2031 L1455.2813,1102.0469 Q1455.2813,1100.7188 1455.8984,1099.5703 Q1456.5156,1098.4219 1457.6094,1097.8047 Q1458.7031,1097.1875 1459.9375,1097.1875 Q1460.6719,1097.1875 1461.3203,1097.3516 Q1461.9688,1097.5156 1462.5156,1097.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="62" x="1480.25" y="1106.9102">RaptorUtils</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1296.5" x2="1693.5" y1="1118" y2="1118"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1296.5" x2="1693.5" y1="1126" y2="1126"/><ellipse cx="1306.5" cy="1137" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="325" x="1315.5" y="1141.4189">raptorUriToTerm(raptor_world* world, raptor_uri* uri) : raptor_term*</text><ellipse cx="1306.5" cy="1150.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="373" x="1315.5" y="1155.2549">raptorStringToUri(raptor_world* world, const unsigned char* str) : raptor_uri*</text><ellipse cx="1306.5" cy="1164.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="207" x="1315.5" y="1169.0908">raptorUriToString(raptor_uri* u) : std::string</text><ellipse cx="1306.5" cy="1178.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="267" x="1315.5" y="1182.9268">raptorTermToString(raptor_term* term) : unsigned char*</text><!--MD5=[4244cf19c95b4e80597a2f88d4fecdb7]
class semsim.Reader--><rect fill="#FEFECE" filter="url(#f18l7qxjusypax)" height="338.5547" id="semsim.Reader" style="stroke: #A80036; stroke-width: 1.5;" width="383" x="1729.5" y="968"/><ellipse cx="1896.25" cy="984" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1899.0156,979.875 Q1899.1719,979.6563 1899.3594,979.5469 Q1899.5469,979.4375 1899.7656,979.4375 Q1900.1406,979.4375 1900.375,979.6953 Q1900.6094,979.9531 1900.6094,980.5625 L1900.6094,982.0156 Q1900.6094,982.625 1900.375,982.8906 Q1900.1406,983.1563 1899.7656,983.1563 Q1899.4219,983.1563 1899.2188,982.9531 Q1899.0156,982.7656 1898.9063,982.25 Q1898.8594,981.8906 1898.6719,981.7031 Q1898.3438,981.3281 1897.7344,981.1094 Q1897.125,980.8906 1896.5,980.8906 Q1895.7344,980.8906 1895.1016,981.2188 Q1894.4688,981.5469 1893.9766,982.2969 Q1893.4844,983.0469 1893.4844,984.0781 L1893.4844,985.1719 Q1893.4844,986.4063 1894.375,987.2266 Q1895.2656,988.0469 1896.8594,988.0469 Q1897.7969,988.0469 1898.4531,987.7969 Q1898.8438,987.6406 1899.2656,987.2031 Q1899.5313,986.9375 1899.6797,986.8594 Q1899.8281,986.7813 1900.0313,986.7813 Q1900.3594,986.7813 1900.6172,987.0391 Q1900.875,987.2969 1900.875,987.6406 Q1900.875,987.9844 1900.5313,988.3906 Q1900.0313,988.9688 1899.2344,989.2969 Q1898.1563,989.75 1896.8594,989.75 Q1895.3438,989.75 1894.1406,989.125 Q1893.1563,988.625 1892.4688,987.5547 Q1891.7813,986.4844 1891.7813,985.2031 L1891.7813,984.0469 Q1891.7813,982.7188 1892.3984,981.5703 Q1893.0156,980.4219 1894.1094,979.8047 Q1895.2031,979.1875 1896.4375,979.1875 Q1897.1719,979.1875 1897.8203,979.3516 Q1898.4688,979.5156 1899.0156,979.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="41" x="1916.75" y="988.9102">Reader</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1730.5" x2="2111.5" y1="1000" y2="1000"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1737.5" y="1008"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="1749.5" y="1015.4189">model_ : librdf_model*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1737.5" y="1021.8359"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="1749.5" y="1029.2549">parser_ : librdf_parser*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1737.5" y="1035.6719"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="1749.5" y="1043.0908">baseUri_ : librdf_uri*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1737.5" y="1049.5078"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="1749.5" y="1056.9268">world_ : librdf_world*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1737.5" y="1063.3438"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="1749.5" y="1070.7627">raptor_world_ptr_ : raptor_world*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1737.5" y="1077.1797"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="1749.5" y="1084.5986">format_ : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1730.5" x2="2111.5" y1="1091.0156" y2="1091.0156"/><ellipse cx="1740.5" cy="1102.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="323" x="1749.5" y="1106.4346">Reader(librdf_world* world, librdf_model* model, std::string format)</text><ellipse cx="1740.5" cy="1115.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="1749.5" y="1120.2705">getModel() : librdf_model* {query}</text><ellipse cx="1740.5" cy="1129.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="1749.5" y="1134.1064">getParser() : librdf_parser* {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1737.5" y="1140.5234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="1749.5" y="1147.9424">makeParser(std::string format) : librdf_parser*</text><ellipse cx="1740.5" cy="1157.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="1749.5" y="1161.7783">getBaseUri() : librdf_uri* {query}</text><ellipse cx="1740.5" cy="1171.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="1749.5" y="1175.6143">getWorld() : librdf_world* {query}</text><ellipse cx="1740.5" cy="1185.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="1749.5" y="1189.4502">getRaptorWorld() : raptor_world* {query}</text><ellipse cx="1740.5" cy="1198.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="1749.5" y="1203.2861">fromString(const std::string&amp; rdf_string) : std::string</text><ellipse cx="1740.5" cy="1212.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="1749.5" y="1217.1221">getFormat() : std::string&amp; {query}</text><ellipse cx="1740.5" cy="1226.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="357" x="1749.5" y="1230.958">parseNamespacesWithPrefix() : std::unordered_map&lt;const char* , char*&gt;</text><ellipse cx="1740.5" cy="1240.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="1749.5" y="1244.7939">getValidParserNames() : std::vector&lt;std::string&gt;&amp; {query}</text><ellipse cx="1740.5" cy="1254.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1749.5" y="1258.6299">fromFile(const std::string&amp; filename) : void</text><ellipse cx="1740.5" cy="1268.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="1749.5" y="1272.4658">setBaseUri(const std::string&amp; baseUri) : void</text><ellipse cx="1740.5" cy="1281.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="1749.5" y="1286.3018">setFormat(const std::string&amp; f) : void</text><ellipse cx="1740.5" cy="1295.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="320" x="1749.5" y="1300.1377">setOption(const std::string&amp; option, const std::string&amp; value) : void</text><!--MD5=[afc551e017185495a5252f449b2d79f4]
class semsim.Resource--><rect fill="#FEFECE" filter="url(#f18l7qxjusypax)" height="241.7031" id="semsim.Resource" style="stroke: #A80036; stroke-width: 1.5;" width="391" x="463.5" y="1016.5"/><ellipse cx="627.75" cy="1032.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M630.5156,1028.375 Q630.6719,1028.1563 630.8594,1028.0469 Q631.0469,1027.9375 631.2656,1027.9375 Q631.6406,1027.9375 631.875,1028.1953 Q632.1094,1028.4531 632.1094,1029.0625 L632.1094,1030.5156 Q632.1094,1031.125 631.875,1031.3906 Q631.6406,1031.6563 631.2656,1031.6563 Q630.9219,1031.6563 630.7188,1031.4531 Q630.5156,1031.2656 630.4063,1030.75 Q630.3594,1030.3906 630.1719,1030.2031 Q629.8438,1029.8281 629.2344,1029.6094 Q628.625,1029.3906 628,1029.3906 Q627.2344,1029.3906 626.6016,1029.7188 Q625.9688,1030.0469 625.4766,1030.7969 Q624.9844,1031.5469 624.9844,1032.5781 L624.9844,1033.6719 Q624.9844,1034.9063 625.875,1035.7266 Q626.7656,1036.5469 628.3594,1036.5469 Q629.2969,1036.5469 629.9531,1036.2969 Q630.3438,1036.1406 630.7656,1035.7031 Q631.0313,1035.4375 631.1797,1035.3594 Q631.3281,1035.2813 631.5313,1035.2813 Q631.8594,1035.2813 632.1172,1035.5391 Q632.375,1035.7969 632.375,1036.1406 Q632.375,1036.4844 632.0313,1036.8906 Q631.5313,1037.4688 630.7344,1037.7969 Q629.6563,1038.25 628.3594,1038.25 Q626.8438,1038.25 625.6406,1037.625 Q624.6563,1037.125 623.9688,1036.0547 Q623.2813,1034.9844 623.2813,1033.7031 L623.2813,1032.5469 Q623.2813,1031.2188 623.8984,1030.0703 Q624.5156,1028.9219 625.6094,1028.3047 Q626.7031,1027.6875 627.9375,1027.6875 Q628.6719,1027.6875 629.3203,1027.8516 Q629.9688,1028.0156 630.5156,1028.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="54" x="648.25" y="1037.4102">Resource</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="464.5" x2="853.5" y1="1048.5" y2="1048.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="471.5" y="1056.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="483.5" y="1063.9189">identifier : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="471.5" y="1070.3359"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="483.5" y="1077.7549">identifiers_base : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="471.5" y="1084.1719"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="483.5" y="1091.5908">resource_namespace : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="464.5" x2="853.5" y1="1098.0078" y2="1098.0078"/><ellipse cx="474.5" cy="1109.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="483.5" y="1113.4268">Resource()</text><ellipse cx="474.5" cy="1122.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="305" x="483.5" y="1127.2627">Resource(std::string resourceNamespace, std::string identifier)</text><ellipse cx="474.5" cy="1136.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="483.5" y="1141.0986">Resource(std::string resource)</text><ellipse cx="474.5" cy="1150.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="483.5" y="1154.9346">operator!=(const Resource&amp; rhs) : bool {query}</text><ellipse cx="474.5" cy="1164.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="483.5" y="1168.7705">operator==(const Resource&amp; rhs) : bool {query}</text><ellipse cx="474.5" cy="1178.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="365" x="483.5" y="1182.6064">operator&lt;&lt;(std::ostream&amp; os, const Resource&amp; resource) : std : : ostream&amp;</text><ellipse cx="474.5" cy="1192.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="483.5" y="1196.4424">build() : std::string {query}</text><ellipse cx="474.5" cy="1205.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="483.5" y="1210.2783">getIdentifier() : std::string&amp; {query}</text><ellipse cx="474.5" cy="1219.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="483.5" y="1224.1143">getIdentifiersBase() : std::string&amp; {query}</text><ellipse cx="474.5" cy="1233.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="483.5" y="1237.9502">getResourceNamespace() : std::string&amp; {query}</text><ellipse cx="474.5" cy="1247.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="483.5" y="1251.7861">splitStringBy(std::string str, char delimiter) : std::vector&lt;std::string&gt;</text><!--MD5=[f2e373ec39dfa2612277748e18fba6c0]
class semsim.SemsimCombineArchive--><rect fill="#FEFECE" filter="url(#f18l7qxjusypax)" height="89.5078" id="semsim.SemsimCombineArchive" style="stroke: #A80036; stroke-width: 1.5;" width="506" x="2148" y="1092.5"/><ellipse cx="2328.25" cy="1108.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2331.0156,1104.375 Q2331.1719,1104.1563 2331.3594,1104.0469 Q2331.5469,1103.9375 2331.7656,1103.9375 Q2332.1406,1103.9375 2332.375,1104.1953 Q2332.6094,1104.4531 2332.6094,1105.0625 L2332.6094,1106.5156 Q2332.6094,1107.125 2332.375,1107.3906 Q2332.1406,1107.6563 2331.7656,1107.6563 Q2331.4219,1107.6563 2331.2188,1107.4531 Q2331.0156,1107.2656 2330.9063,1106.75 Q2330.8594,1106.3906 2330.6719,1106.2031 Q2330.3438,1105.8281 2329.7344,1105.6094 Q2329.125,1105.3906 2328.5,1105.3906 Q2327.7344,1105.3906 2327.1016,1105.7188 Q2326.4688,1106.0469 2325.9766,1106.7969 Q2325.4844,1107.5469 2325.4844,1108.5781 L2325.4844,1109.6719 Q2325.4844,1110.9063 2326.375,1111.7266 Q2327.2656,1112.5469 2328.8594,1112.5469 Q2329.7969,1112.5469 2330.4531,1112.2969 Q2330.8438,1112.1406 2331.2656,1111.7031 Q2331.5313,1111.4375 2331.6797,1111.3594 Q2331.8281,1111.2813 2332.0313,1111.2813 Q2332.3594,1111.2813 2332.6172,1111.5391 Q2332.875,1111.7969 2332.875,1112.1406 Q2332.875,1112.4844 2332.5313,1112.8906 Q2332.0313,1113.4688 2331.2344,1113.7969 Q2330.1563,1114.25 2328.8594,1114.25 Q2327.3438,1114.25 2326.1406,1113.625 Q2325.1563,1113.125 2324.4688,1112.0547 Q2323.7813,1110.9844 2323.7813,1109.7031 L2323.7813,1108.5469 Q2323.7813,1107.2188 2324.3984,1106.0703 Q2325.0156,1104.9219 2326.1094,1104.3047 Q2327.2031,1103.6875 2328.4375,1103.6875 Q2329.1719,1103.6875 2329.8203,1103.8516 Q2330.4688,1104.0156 2331.0156,1104.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="137" x="2348.75" y="1113.4102">SemsimCombineArchive</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2149" x2="2653" y1="1124.5" y2="1124.5"/><ellipse cx="2159" cy="1135.5" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="2168" y="1139.9189">CombineArchive : using CombineArchive::</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2149" x2="2653" y1="1146.3359" y2="1146.3359"/><ellipse cx="2159" cy="1157.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="273" x="2168" y="1161.7549">fromFile(const std::string&amp; file) : SemsimCombineArchive</text><ellipse cx="2159" cy="1171.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="480" x="2168" y="1175.5908">fromUrl(const std::string&amp; url, const std::string&amp; output_filename) : semsim::SemsimCombineArchive</text><!--MD5=[573a8811e6025c4acc72ffa2b9a70914]
class semsim.SemsimUtils--><rect fill="#FEFECE" filter="url(#f18l7qxjusypax)" height="117.1797" id="semsim.SemsimUtils" style="stroke: #A80036; stroke-width: 1.5;" width="338" x="2689" y="1079"/><ellipse cx="2817.75" cy="1095" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2820.5156,1090.875 Q2820.6719,1090.6563 2820.8594,1090.5469 Q2821.0469,1090.4375 2821.2656,1090.4375 Q2821.6406,1090.4375 2821.875,1090.6953 Q2822.1094,1090.9531 2822.1094,1091.5625 L2822.1094,1093.0156 Q2822.1094,1093.625 2821.875,1093.8906 Q2821.6406,1094.1563 2821.2656,1094.1563 Q2820.9219,1094.1563 2820.7188,1093.9531 Q2820.5156,1093.7656 2820.4063,1093.25 Q2820.3594,1092.8906 2820.1719,1092.7031 Q2819.8438,1092.3281 2819.2344,1092.1094 Q2818.625,1091.8906 2818,1091.8906 Q2817.2344,1091.8906 2816.6016,1092.2188 Q2815.9688,1092.5469 2815.4766,1093.2969 Q2814.9844,1094.0469 2814.9844,1095.0781 L2814.9844,1096.1719 Q2814.9844,1097.4063 2815.875,1098.2266 Q2816.7656,1099.0469 2818.3594,1099.0469 Q2819.2969,1099.0469 2819.9531,1098.7969 Q2820.3438,1098.6406 2820.7656,1098.2031 Q2821.0313,1097.9375 2821.1797,1097.8594 Q2821.3281,1097.7813 2821.5313,1097.7813 Q2821.8594,1097.7813 2822.1172,1098.0391 Q2822.375,1098.2969 2822.375,1098.6406 Q2822.375,1098.9844 2822.0313,1099.3906 Q2821.5313,1099.9688 2820.7344,1100.2969 Q2819.6563,1100.75 2818.3594,1100.75 Q2816.8438,1100.75 2815.6406,1100.125 Q2814.6563,1099.625 2813.9688,1098.5547 Q2813.2813,1097.4844 2813.2813,1096.2031 L2813.2813,1095.0469 Q2813.2813,1093.7188 2813.8984,1092.5703 Q2814.5156,1091.4219 2815.6094,1090.8047 Q2816.7031,1090.1875 2817.9375,1090.1875 Q2818.6719,1090.1875 2819.3203,1090.3516 Q2819.9688,1090.5156 2820.5156,1090.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="72" x="2838.25" y="1099.9102">SemsimUtils</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2690" x2="3026" y1="1111" y2="1111"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2690" x2="3026" y1="1119" y2="1119"/><ellipse cx="2700" cy="1130" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="65" x="2709" y="1134.4189">SemsimUtils()</text><ellipse cx="2700" cy="1143.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="194" x="2709" y="1148.2549">exists(const std::string&amp; filename) : bool</text><ellipse cx="2700" cy="1157.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="208" x="2709" y="1162.0908">removeFile(const std::string&amp; filename) : int</text><ellipse cx="2700" cy="1171.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="312" x="2709" y="1175.9268">download(const std::string&amp; url, const std::string filename) : void</text><ellipse cx="2700" cy="1185.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="236" x="2709" y="1189.7627">removeIfExists(const std::string&amp; filename) : void</text><!--MD5=[168548f85bb01370d25810e567be54c8]
class semsim.Subject--><rect fill="#FEFECE" filter="url(#f18l7qxjusypax)" height="144.8516" id="semsim.Subject" style="stroke: #A80036; stroke-width: 1.5;" width="371" x="889.5" y="1065"/><ellipse cx="1050.25" cy="1081" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1053.0156,1076.875 Q1053.1719,1076.6563 1053.3594,1076.5469 Q1053.5469,1076.4375 1053.7656,1076.4375 Q1054.1406,1076.4375 1054.375,1076.6953 Q1054.6094,1076.9531 1054.6094,1077.5625 L1054.6094,1079.0156 Q1054.6094,1079.625 1054.375,1079.8906 Q1054.1406,1080.1563 1053.7656,1080.1563 Q1053.4219,1080.1563 1053.2188,1079.9531 Q1053.0156,1079.7656 1052.9063,1079.25 Q1052.8594,1078.8906 1052.6719,1078.7031 Q1052.3438,1078.3281 1051.7344,1078.1094 Q1051.125,1077.8906 1050.5,1077.8906 Q1049.7344,1077.8906 1049.1016,1078.2188 Q1048.4688,1078.5469 1047.9766,1079.2969 Q1047.4844,1080.0469 1047.4844,1081.0781 L1047.4844,1082.1719 Q1047.4844,1083.4063 1048.375,1084.2266 Q1049.2656,1085.0469 1050.8594,1085.0469 Q1051.7969,1085.0469 1052.4531,1084.7969 Q1052.8438,1084.6406 1053.2656,1084.2031 Q1053.5313,1083.9375 1053.6797,1083.8594 Q1053.8281,1083.7813 1054.0313,1083.7813 Q1054.3594,1083.7813 1054.6172,1084.0391 Q1054.875,1084.2969 1054.875,1084.6406 Q1054.875,1084.9844 1054.5313,1085.3906 Q1054.0313,1085.9688 1053.2344,1086.2969 Q1052.1563,1086.75 1050.8594,1086.75 Q1049.3438,1086.75 1048.1406,1086.125 Q1047.1563,1085.625 1046.4688,1084.5547 Q1045.7813,1083.4844 1045.7813,1082.2031 L1045.7813,1081.0469 Q1045.7813,1079.7188 1046.3984,1078.5703 Q1047.0156,1077.4219 1048.1094,1076.8047 Q1049.2031,1076.1875 1050.4375,1076.1875 Q1051.1719,1076.1875 1051.8203,1076.3516 Q1052.4688,1076.5156 1053.0156,1076.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="41" x="1070.75" y="1085.9102">Subject</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="890.5" x2="1259.5" y1="1097" y2="1097"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="897.5" y="1105"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="909.5" y="1112.4189">metaId : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="890.5" x2="1259.5" y1="1118.8359" y2="1118.8359"/><ellipse cx="900.5" cy="1129.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="44" x="909.5" y="1134.2549">Subject()</text><ellipse cx="900.5" cy="1143.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="909.5" y="1148.0908">Subject(std::string metaId)</text><ellipse cx="900.5" cy="1157.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="217" x="909.5" y="1161.9268">operator!=(const Subject&amp; rhs) : bool {query}</text><ellipse cx="900.5" cy="1171.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="909.5" y="1175.7627">operator==(const Subject&amp; rhs) : bool {query}</text><ellipse cx="900.5" cy="1185.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="345" x="909.5" y="1189.5986">operator&lt;&lt;(std::ostream&amp; os, const Subject&amp; subject) : std : : ostream&amp;</text><ellipse cx="900.5" cy="1199.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="909.5" y="1203.4346">getMetaId() : std::string&amp; {query}</text><!--MD5=[472cdfa588a091043695cbb3e9f59f19]
class semsim.Triple--><rect fill="#FEFECE" filter="url(#f18l7qxjusypax)" height="310.8828" id="semsim.Triple" style="stroke: #A80036; stroke-width: 1.5;" width="349" x="484.5" y="472.5"/><ellipse cx="639.25" cy="488.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M642.0156,484.375 Q642.1719,484.1563 642.3594,484.0469 Q642.5469,483.9375 642.7656,483.9375 Q643.1406,483.9375 643.375,484.1953 Q643.6094,484.4531 643.6094,485.0625 L643.6094,486.5156 Q643.6094,487.125 643.375,487.3906 Q643.1406,487.6563 642.7656,487.6563 Q642.4219,487.6563 642.2188,487.4531 Q642.0156,487.2656 641.9063,486.75 Q641.8594,486.3906 641.6719,486.2031 Q641.3438,485.8281 640.7344,485.6094 Q640.125,485.3906 639.5,485.3906 Q638.7344,485.3906 638.1016,485.7188 Q637.4688,486.0469 636.9766,486.7969 Q636.4844,487.5469 636.4844,488.5781 L636.4844,489.6719 Q636.4844,490.9063 637.375,491.7266 Q638.2656,492.5469 639.8594,492.5469 Q640.7969,492.5469 641.4531,492.2969 Q641.8438,492.1406 642.2656,491.7031 Q642.5313,491.4375 642.6797,491.3594 Q642.8281,491.2813 643.0313,491.2813 Q643.3594,491.2813 643.6172,491.5391 Q643.875,491.7969 643.875,492.1406 Q643.875,492.4844 643.5313,492.8906 Q643.0313,493.4688 642.2344,493.7969 Q641.1563,494.25 639.8594,494.25 Q638.3438,494.25 637.1406,493.625 Q636.1563,493.125 635.4688,492.0547 Q634.7813,490.9844 634.7813,489.7031 L634.7813,488.5469 Q634.7813,487.2188 635.3984,486.0703 Q636.0156,484.9219 637.1094,484.3047 Q638.2031,483.6875 639.4375,483.6875 Q640.1719,483.6875 640.8203,483.8516 Q641.4688,484.0156 642.0156,484.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="31" x="659.75" y="493.4102">Triple</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="485.5" x2="832.5" y1="504.5" y2="504.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="492.5" y="512.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="504.5" y="519.9189">predicate : Predicate</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="492.5" y="526.3359"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="504.5" y="533.7549">resource : Resource</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="492.5" y="540.1719"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="504.5" y="547.5908">subject : Subject</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="485.5" x2="832.5" y1="554.0078" y2="554.0078"/><ellipse cx="495.5" cy="565.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="307" x="504.5" y="569.4268">Triple(Subject subject, Predicate predicate, Resource resource)</text><ellipse cx="495.5" cy="578.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="34" x="504.5" y="583.2627">Triple()</text><ellipse cx="495.5" cy="592.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="504.5" y="597.0986">Triple(const Triple&amp; triple)</text><ellipse cx="495.5" cy="606.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="504.5" y="610.9346">Triple(Triple&amp;&amp; triple)</text><ellipse cx="495.5" cy="620.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="40" x="504.5" y="624.7705">~Triple()</text><ellipse cx="495.5" cy="634.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="504.5" y="638.6064">getPredicate() : Predicate&amp; {query}</text><ellipse cx="495.5" cy="648.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="504.5" y="652.4424">getResource() : Resource&amp; {query}</text><ellipse cx="495.5" cy="661.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="504.5" y="666.2783">getSubject() : Subject&amp; {query}</text><ellipse cx="495.5" cy="675.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="504.5" y="680.1143">operator=(const Triple&amp; triple) : Triple&amp;</text><ellipse cx="495.5" cy="689.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="504.5" y="693.9502">operator=(Triple&amp;&amp; triple) : Triple&amp;</text><ellipse cx="495.5" cy="703.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="504.5" y="707.7861">operator!=(const Triple&amp; rhs) : bool {query}</text><ellipse cx="495.5" cy="717.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="504.5" y="721.6221">operator==(const Triple&amp; rhs) : bool {query}</text><ellipse cx="495.5" cy="731.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="323" x="504.5" y="735.458">operator&lt;&lt;(std::ostream&amp; os, const Triple&amp; triple) : std : : ostream&amp;</text><ellipse cx="495.5" cy="744.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="504.5" y="749.2939">serialize(std::string format) : std::string</text><ellipse cx="495.5" cy="758.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="148" x="504.5" y="763.1299">from_xml(std::string xml) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="492.5" y="769.5469"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="320" x="504.5" y="776.9658">parseTriple(void* user_data, raptor_statement* raptor_triple) : void</text><!--MD5=[880befb6d1768906f3b3a906119ba858]
class semsim.Uri--><rect fill="#FEFECE" filter="url(#f18l7qxjusypax)" height="767.4688" id="semsim.Uri" style="stroke: #A80036; stroke-width: 1.5;" width="325" x="1332.5" y="1367"/><ellipse cx="1482.75" cy="1383" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1485.5156,1378.875 Q1485.6719,1378.6563 1485.8594,1378.5469 Q1486.0469,1378.4375 1486.2656,1378.4375 Q1486.6406,1378.4375 1486.875,1378.6953 Q1487.1094,1378.9531 1487.1094,1379.5625 L1487.1094,1381.0156 Q1487.1094,1381.625 1486.875,1381.8906 Q1486.6406,1382.1563 1486.2656,1382.1563 Q1485.9219,1382.1563 1485.7188,1381.9531 Q1485.5156,1381.7656 1485.4063,1381.25 Q1485.3594,1380.8906 1485.1719,1380.7031 Q1484.8438,1380.3281 1484.2344,1380.1094 Q1483.625,1379.8906 1483,1379.8906 Q1482.2344,1379.8906 1481.6016,1380.2188 Q1480.9688,1380.5469 1480.4766,1381.2969 Q1479.9844,1382.0469 1479.9844,1383.0781 L1479.9844,1384.1719 Q1479.9844,1385.4063 1480.875,1386.2266 Q1481.7656,1387.0469 1483.3594,1387.0469 Q1484.2969,1387.0469 1484.9531,1386.7969 Q1485.3438,1386.6406 1485.7656,1386.2031 Q1486.0313,1385.9375 1486.1797,1385.8594 Q1486.3281,1385.7813 1486.5313,1385.7813 Q1486.8594,1385.7813 1487.1172,1386.0391 Q1487.375,1386.2969 1487.375,1386.6406 Q1487.375,1386.9844 1487.0313,1387.3906 Q1486.5313,1387.9688 1485.7344,1388.2969 Q1484.6563,1388.75 1483.3594,1388.75 Q1481.8438,1388.75 1480.6406,1388.125 Q1479.6563,1387.625 1478.9688,1386.5547 Q1478.2813,1385.4844 1478.2813,1384.2031 L1478.2813,1383.0469 Q1478.2813,1381.7188 1478.8984,1380.5703 Q1479.5156,1379.4219 1480.6094,1378.8047 Q1481.7031,1378.1875 1482.9375,1378.1875 Q1483.6719,1378.1875 1484.3203,1378.3516 Q1484.9688,1378.5156 1485.5156,1378.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="16" x="1503.25" y="1387.9102">Uri</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1333.5" x2="1656.5" y1="1399" y2="1399"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1340.5" y="1407"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="1352.5" y="1414.4189">m_query : mutable Query</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1340.5" y="1420.8359"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="1352.5" y="1428.2549">m_ip_v : mutable std::int8_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1340.5" y="1434.6719"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="1352.5" y="1442.0908">m_fragment : mutable std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1340.5" y="1448.5078"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="1352.5" y="1455.9268">m_host : mutable std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1340.5" y="1462.3438"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="1352.5" y="1469.7627">m_path : mutable std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1340.5" y="1476.1797"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="1352.5" y="1483.5986">m_port : mutable std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1340.5" y="1490.0156"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="1352.5" y="1497.4346">m_scheme : mutable std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1340.5" y="1503.8516"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="1352.5" y="1511.2705">m_url : mutable std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1340.5" y="1517.6875"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="1352.5" y="1525.1064">m_user : mutable std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1333.5" x2="1656.5" y1="1531.5234" y2="1531.5234"/><ellipse cx="1343.5" cy="1542.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="21" x="1352.5" y="1546.9424">Uri()</text><ellipse cx="1343.5" cy="1556.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="1352.5" y="1560.7783">Uri(const Uri&amp; url)</text><ellipse cx="1343.5" cy="1570.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="1352.5" y="1574.6143">Uri(Uri&amp;&amp; url) noexcept: m_ip_v(-1)</text><ellipse cx="1343.5" cy="1584.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="1352.5" y="1588.4502">Uri(std::string url_str)</text><ellipse cx="1343.5" cy="1597.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="1352.5" y="1602.2861">query(size_t i) : KeyVal&amp;</text><ellipse cx="1343.5" cy="1611.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="1352.5" y="1616.1221">set_query(size_t i) : KeyVal&amp;</text><ellipse cx="1343.5" cy="1625.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="1352.5" y="1629.958">query() : Query&amp;</text><ellipse cx="1343.5" cy="1639.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="1352.5" y="1643.7939">set_query() : Query&amp;</text><ellipse cx="1343.5" cy="1653.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="1352.5" y="1657.6299">add_query(KeyVal&amp; kv) : Uri&amp;</text><ellipse cx="1343.5" cy="1667.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="1352.5" y="1671.4658">add_query(std::string&amp; key, std::string&amp; val) : Uri&amp;</text><ellipse cx="1343.5" cy="1680.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="1352.5" y="1685.3018">add_query(std::string&amp; key) : Uri&amp;</text><ellipse cx="1343.5" cy="1694.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="1352.5" y="1699.1377">clear() : Uri&amp;</text><ellipse cx="1343.5" cy="1708.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="1352.5" y="1712.9736">fragment(const std::string&amp; f) : Uri&amp;</text><ellipse cx="1343.5" cy="1722.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="1352.5" y="1726.8096">host(const std::string&amp; h, uint8_t ip_v) : Uri&amp;</text><ellipse cx="1343.5" cy="1736.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="1352.5" y="1740.6455">operator=(std::string&amp; url_str) : Uri&amp;</text><ellipse cx="1343.5" cy="1750.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="1352.5" y="1754.4814">operator=(const Uri&amp; url) : Uri&amp;</text><ellipse cx="1343.5" cy="1763.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="1352.5" y="1768.3174">operator=(Uri&amp;&amp; url) : Uri&amp;</text><ellipse cx="1343.5" cy="1777.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="1352.5" y="1782.1533">path(const std::string&amp; str) : Uri&amp;</text><ellipse cx="1343.5" cy="1791.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="1352.5" y="1795.9893">port(const std::string&amp; str) : Uri&amp;</text><ellipse cx="1343.5" cy="1805.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="1352.5" y="1809.8252">port(std::uint16_t num) : Uri&amp;</text><ellipse cx="1343.5" cy="1819.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="1352.5" y="1823.6611">scheme(const std::string&amp; s) : Uri&amp;</text><ellipse cx="1343.5" cy="1833.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="1352.5" y="1837.4971">set_query(Query&amp; q) : Uri&amp;</text><ellipse cx="1343.5" cy="1846.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="1352.5" y="1851.333">str(std::string&amp; url_str) : Uri&amp;</text><ellipse cx="1343.5" cy="1860.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="1352.5" y="1865.1689">user_info(const std::string&amp; s) : Uri&amp;</text><ellipse cx="1343.5" cy="1874.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="1352.5" y="1879.0049">operator!=(const Uri&amp; rhs) : bool {query}</text><ellipse cx="1343.5" cy="1888.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="1352.5" y="1892.8408">operator==(const Uri&amp; rhs) : bool {query}</text><ellipse cx="1343.5" cy="1902.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="299" x="1352.5" y="1906.6768">operator&lt;&lt;(std::ostream&amp; os, const Uri&amp; uri) : std : : ostream&amp;</text><ellipse cx="1343.5" cy="1916.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="1352.5" y="1920.5127">ip_version() : std::int8_t</text><ellipse cx="1343.5" cy="1929.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="1352.5" y="1934.3486">output(std::ostream&amp; o) : std::ostream&amp; {query}</text><ellipse cx="1343.5" cy="1943.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="1352.5" y="1948.1846">end() : std::string</text><ellipse cx="1343.5" cy="1957.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="1352.5" y="1962.0205">pruneEnd() : std::string</text><ellipse cx="1343.5" cy="1971.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="1352.5" y="1975.8564">str() : std::string {query}</text><ellipse cx="1343.5" cy="1985.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="1352.5" y="1989.6924">fragment() : std::string&amp;</text><ellipse cx="1343.5" cy="1999.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="1352.5" y="2003.5283">host() : std::string&amp;</text><ellipse cx="1343.5" cy="2012.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="1352.5" y="2017.3643">path() : std::string&amp;</text><ellipse cx="1343.5" cy="2026.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="1352.5" y="2031.2002">port() : std::string&amp;</text><ellipse cx="1343.5" cy="2040.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="1352.5" y="2045.0361">scheme() : std::string&amp; {query}</text><ellipse cx="1343.5" cy="2054.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="1352.5" y="2058.8721">user_info() : std::string&amp;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1340.5" y="2065.2891"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="1352.5" y="2072.708">assign(const Uri&amp; url) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1340.5" y="2079.125"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="1352.5" y="2086.5439">assign(Uri&amp;&amp; url) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1340.5" y="2092.9609"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="1352.5" y="2100.3799">build_url() : void {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1340.5" y="2106.7969"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="1352.5" y="2114.2158">lazy_parse() : void {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1340.5" y="2120.6328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="1352.5" y="2128.0518">parse_url() : void {query}</text><!--MD5=[a2500219e04fe9fbc19f9e9e25eccb7c]
class semsim.Writer--><rect fill="#FEFECE" filter="url(#f18l7qxjusypax)" height="241.7031" id="semsim.Writer" style="stroke: #A80036; stroke-width: 1.5;" width="491" x="1692.5" y="1629.5"/><ellipse cx="1917.75" cy="1645.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1920.5156,1641.375 Q1920.6719,1641.1563 1920.8594,1641.0469 Q1921.0469,1640.9375 1921.2656,1640.9375 Q1921.6406,1640.9375 1921.875,1641.1953 Q1922.1094,1641.4531 1922.1094,1642.0625 L1922.1094,1643.5156 Q1922.1094,1644.125 1921.875,1644.3906 Q1921.6406,1644.6563 1921.2656,1644.6563 Q1920.9219,1644.6563 1920.7188,1644.4531 Q1920.5156,1644.2656 1920.4063,1643.75 Q1920.3594,1643.3906 1920.1719,1643.2031 Q1919.8438,1642.8281 1919.2344,1642.6094 Q1918.625,1642.3906 1918,1642.3906 Q1917.2344,1642.3906 1916.6016,1642.7188 Q1915.9688,1643.0469 1915.4766,1643.7969 Q1914.9844,1644.5469 1914.9844,1645.5781 L1914.9844,1646.6719 Q1914.9844,1647.9063 1915.875,1648.7266 Q1916.7656,1649.5469 1918.3594,1649.5469 Q1919.2969,1649.5469 1919.9531,1649.2969 Q1920.3438,1649.1406 1920.7656,1648.7031 Q1921.0313,1648.4375 1921.1797,1648.3594 Q1921.3281,1648.2813 1921.5313,1648.2813 Q1921.8594,1648.2813 1922.1172,1648.5391 Q1922.375,1648.7969 1922.375,1649.1406 Q1922.375,1649.4844 1922.0313,1649.8906 Q1921.5313,1650.4688 1920.7344,1650.7969 Q1919.6563,1651.25 1918.3594,1651.25 Q1916.8438,1651.25 1915.6406,1650.625 Q1914.6563,1650.125 1913.9688,1649.0547 Q1913.2813,1647.9844 1913.2813,1646.7031 L1913.2813,1645.5469 Q1913.2813,1644.2188 1913.8984,1643.0703 Q1914.5156,1641.9219 1915.6094,1641.3047 Q1916.7031,1640.6875 1917.9375,1640.6875 Q1918.6719,1640.6875 1919.3203,1640.8516 Q1919.9688,1641.0156 1920.5156,1641.375 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="32" x="1938.25" y="1650.4102">Writer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1693.5" x2="2182.5" y1="1661.5" y2="1661.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1700.5" y="1669.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="1712.5" y="1676.9189">model_ : librdf_model*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1700.5" y="1683.3359"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="1712.5" y="1690.7549">serializer : librdf_serializer*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1700.5" y="1697.1719"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="1712.5" y="1704.5908">base_uri_ : librdf_uri*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1700.5" y="1711.0078"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="1712.5" y="1718.4268">world_ : librdf_world*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1700.5" y="1724.8438"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="1712.5" y="1732.2627">raptor_world_ptr_ : raptor_world*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1700.5" y="1738.6797"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="1712.5" y="1746.0986">format : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1693.5" x2="2182.5" y1="1752.5156" y2="1752.5156"/><ellipse cx="1703.5" cy="1763.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="465" x="1712.5" y="1767.9346">Writer(librdf_world* world_, librdf_model* model_, std::string format, const std::string&amp; base_uri)</text><ellipse cx="1703.5" cy="1777.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="1712.5" y="1781.7705">print() : std::string</text><ellipse cx="1703.5" cy="1791.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="1712.5" y="1795.6064">toString() : std::string</text><ellipse cx="1703.5" cy="1805.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="353" x="1712.5" y="1809.4424">registerNamespace(const std::string&amp; ns, const std::string&amp; prefix) : void</text><ellipse cx="1703.5" cy="1818.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="1712.5" y="1823.2783">setFormat(const std::string&amp; format) : void</text><ellipse cx="1703.5" cy="1832.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="320" x="1712.5" y="1837.1143">setOption(const std::string&amp; option, const std::string&amp; value) : void</text><ellipse cx="1703.5" cy="1846.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="1712.5" y="1850.9502">setWorld(librdf_world* world_) : void</text><ellipse cx="1703.5" cy="1860.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="1712.5" y="1864.7861">toFile(std::string format) : void</text><!--MD5=[41ab3430fff850f76422c67223f7a580]
class semsim::Uri.Uri::KeyVal--><rect fill="#FEFECE" filter="url(#f18l7qxjusypax)" height="227.8672" id="semsim::Uri.Uri::KeyVal" style="stroke: #A80036; stroke-width: 1.5;" width="340" x="3083" y="60"/><ellipse cx="3219.25" cy="76" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3222.0156,71.875 Q3222.1719,71.6563 3222.3594,71.5469 Q3222.5469,71.4375 3222.7656,71.4375 Q3223.1406,71.4375 3223.375,71.6953 Q3223.6094,71.9531 3223.6094,72.5625 L3223.6094,74.0156 Q3223.6094,74.625 3223.375,74.8906 Q3223.1406,75.1563 3222.7656,75.1563 Q3222.4219,75.1563 3222.2188,74.9531 Q3222.0156,74.7656 3221.9063,74.25 Q3221.8594,73.8906 3221.6719,73.7031 Q3221.3438,73.3281 3220.7344,73.1094 Q3220.125,72.8906 3219.5,72.8906 Q3218.7344,72.8906 3218.1016,73.2188 Q3217.4688,73.5469 3216.9766,74.2969 Q3216.4844,75.0469 3216.4844,76.0781 L3216.4844,77.1719 Q3216.4844,78.4063 3217.375,79.2266 Q3218.2656,80.0469 3219.8594,80.0469 Q3220.7969,80.0469 3221.4531,79.7969 Q3221.8438,79.6406 3222.2656,79.2031 Q3222.5313,78.9375 3222.6797,78.8594 Q3222.8281,78.7813 3223.0313,78.7813 Q3223.3594,78.7813 3223.6172,79.0391 Q3223.875,79.2969 3223.875,79.6406 Q3223.875,79.9844 3223.5313,80.3906 Q3223.0313,80.9688 3222.2344,81.2969 Q3221.1563,81.75 3219.8594,81.75 Q3218.3438,81.75 3217.1406,81.125 Q3216.1563,80.625 3215.4688,79.5547 Q3214.7813,78.4844 3214.7813,77.2031 L3214.7813,76.0469 Q3214.7813,74.7188 3215.3984,73.5703 Q3216.0156,72.4219 3217.1094,71.8047 Q3218.2031,71.1875 3219.4375,71.1875 Q3220.1719,71.1875 3220.8203,71.3516 Q3221.4688,71.5156 3222.0156,71.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="59" x="3239.75" y="80.9102">Uri::KeyVal</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3084" x2="3422" y1="92" y2="92"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3091" y="100"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="3103" y="107.4189">m_key : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3091" y="113.8359"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="3103" y="121.2549">m_val : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3084" x2="3422" y1="127.6719" y2="127.6719"/><ellipse cx="3094" cy="138.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="43" x="3103" y="143.0908">KeyVal()</text><ellipse cx="3094" cy="152.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="3103" y="156.9268">KeyVal(std::string key, std::string&amp; val)</text><ellipse cx="3094" cy="166.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="3103" y="170.7627">KeyVal(std::string key)</text><ellipse cx="3094" cy="180.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="3103" y="184.5986">operator!=(const KeyVal&amp; rhs) : bool {query}</text><ellipse cx="3094" cy="194.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="3103" y="198.4346">operator==(const KeyVal&amp; rhs) : bool {query}</text><ellipse cx="3094" cy="207.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="3103" y="212.2705">operator&lt;&lt;(std::ostream&amp; o, const KeyVal&amp; kv) : std : : ostream&amp;</text><ellipse cx="3094" cy="221.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="3103" y="226.1064">key() : std::string&amp;</text><ellipse cx="3094" cy="235.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="3103" y="239.9424">val() : std::string&amp;</text><ellipse cx="3094" cy="249.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="3103" y="253.7783">key(const std::string&amp; k) : void</text><ellipse cx="3094" cy="263.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="3103" y="267.6143">swap(KeyVal&amp; q) : void</text><ellipse cx="3094" cy="277.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="3103" y="281.4502">val(const std::string&amp; v) : void</text><!--MD5=[20d8ed6f4d65a2e165025c3b298b4987]
class semsim::Uri.Uri::build_error--><rect fill="#FEFECE" filter="url(#f18l7qxjusypax)" height="61.8359" id="semsim::Uri.Uri::build_error" style="stroke: #A80036; stroke-width: 1.5;" width="208" x="3458" y="143"/><ellipse cx="3516.75" cy="159" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3519.5156,154.875 Q3519.6719,154.6563 3519.8594,154.5469 Q3520.0469,154.4375 3520.2656,154.4375 Q3520.6406,154.4375 3520.875,154.6953 Q3521.1094,154.9531 3521.1094,155.5625 L3521.1094,157.0156 Q3521.1094,157.625 3520.875,157.8906 Q3520.6406,158.1563 3520.2656,158.1563 Q3519.9219,158.1563 3519.7188,157.9531 Q3519.5156,157.7656 3519.4063,157.25 Q3519.3594,156.8906 3519.1719,156.7031 Q3518.8438,156.3281 3518.2344,156.1094 Q3517.625,155.8906 3517,155.8906 Q3516.2344,155.8906 3515.6016,156.2188 Q3514.9688,156.5469 3514.4766,157.2969 Q3513.9844,158.0469 3513.9844,159.0781 L3513.9844,160.1719 Q3513.9844,161.4063 3514.875,162.2266 Q3515.7656,163.0469 3517.3594,163.0469 Q3518.2969,163.0469 3518.9531,162.7969 Q3519.3438,162.6406 3519.7656,162.2031 Q3520.0313,161.9375 3520.1797,161.8594 Q3520.3281,161.7813 3520.5313,161.7813 Q3520.8594,161.7813 3521.1172,162.0391 Q3521.375,162.2969 3521.375,162.6406 Q3521.375,162.9844 3521.0313,163.3906 Q3520.5313,163.9688 3519.7344,164.2969 Q3518.6563,164.75 3517.3594,164.75 Q3515.8438,164.75 3514.6406,164.125 Q3513.6563,163.625 3512.9688,162.5547 Q3512.2813,161.4844 3512.2813,160.2031 L3512.2813,159.0469 Q3512.2813,157.7188 3512.8984,156.5703 Q3513.5156,155.4219 3514.6094,154.8047 Q3515.7031,154.1875 3516.9375,154.1875 Q3517.6719,154.1875 3518.3203,154.3516 Q3518.9688,154.5156 3519.5156,154.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="82" x="3537.25" y="163.9102">Uri::build_error</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3459" x2="3665" y1="175" y2="175"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3459" x2="3665" y1="183" y2="183"/><ellipse cx="3469" cy="194" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="3478" y="198.4189">build_error(const std::string&amp; reason)</text><!--MD5=[a5aef33bd2789f763e481b4983040aa5]
class semsim::Uri.Uri::parse_error--><rect fill="#FEFECE" filter="url(#f18l7qxjusypax)" height="61.8359" id="semsim::Uri.Uri::parse_error" style="stroke: #A80036; stroke-width: 1.5;" width="214" x="3146" y="597"/><ellipse cx="3205.25" cy="613" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3208.0156,608.875 Q3208.1719,608.6563 3208.3594,608.5469 Q3208.5469,608.4375 3208.7656,608.4375 Q3209.1406,608.4375 3209.375,608.6953 Q3209.6094,608.9531 3209.6094,609.5625 L3209.6094,611.0156 Q3209.6094,611.625 3209.375,611.8906 Q3209.1406,612.1563 3208.7656,612.1563 Q3208.4219,612.1563 3208.2188,611.9531 Q3208.0156,611.7656 3207.9063,611.25 Q3207.8594,610.8906 3207.6719,610.7031 Q3207.3438,610.3281 3206.7344,610.1094 Q3206.125,609.8906 3205.5,609.8906 Q3204.7344,609.8906 3204.1016,610.2188 Q3203.4688,610.5469 3202.9766,611.2969 Q3202.4844,612.0469 3202.4844,613.0781 L3202.4844,614.1719 Q3202.4844,615.4063 3203.375,616.2266 Q3204.2656,617.0469 3205.8594,617.0469 Q3206.7969,617.0469 3207.4531,616.7969 Q3207.8438,616.6406 3208.2656,616.2031 Q3208.5313,615.9375 3208.6797,615.8594 Q3208.8281,615.7813 3209.0313,615.7813 Q3209.3594,615.7813 3209.6172,616.0391 Q3209.875,616.2969 3209.875,616.6406 Q3209.875,616.9844 3209.5313,617.3906 Q3209.0313,617.9688 3208.2344,618.2969 Q3207.1563,618.75 3205.8594,618.75 Q3204.3438,618.75 3203.1406,618.125 Q3202.1563,617.625 3201.4688,616.5547 Q3200.7813,615.4844 3200.7813,614.2031 L3200.7813,613.0469 Q3200.7813,611.7188 3201.3984,610.5703 Q3202.0156,609.4219 3203.1094,608.8047 Q3204.2031,608.1875 3205.4375,608.1875 Q3206.1719,608.1875 3206.8203,608.3516 Q3207.4688,608.5156 3208.0156,608.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="87" x="3225.75" y="617.9102">Uri::parse_error</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3147" x2="3359" y1="629" y2="629"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3147" x2="3359" y1="637" y2="637"/><ellipse cx="3157" cy="648" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="3166" y="652.4189">parse_error(const std::string&amp; reason)</text><!--MD5=[81532d3002bcda6e28e5344fba2b10c6]
class IRDF--><rect fill="#FEFECE" filter="url(#f18l7qxjusypax)" height="61.8359" id="IRDF" style="stroke: #A80036; stroke-width: 1.5;" width="218" x="550" y="143"/><ellipse cx="640.25" cy="159" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M642.4375,160.7656 L638.2969,160.7656 L637.875,161.7969 L638.2969,161.7969 Q638.9063,161.7969 639.1719,162.0313 Q639.4375,162.2656 639.4375,162.6563 Q639.4375,163.0313 639.1719,163.2656 Q638.9063,163.5 638.2969,163.5 L636,163.5 Q635.3906,163.5 635.1328,163.2656 Q634.875,163.0313 634.875,162.6406 Q634.875,162.2656 635.1484,162.0234 Q635.4219,161.7813 636.0469,161.7969 L638.7188,155.1406 L637.6094,155.1406 Q637,155.1406 636.7344,154.9063 Q636.4688,154.6719 636.4688,154.2813 Q636.4688,153.9063 636.7344,153.6719 Q637,153.4375 637.6094,153.4375 L641.2813,153.4375 L644.6719,161.7969 Q645.2656,161.7969 645.4531,161.9375 Q645.8438,162.2031 645.8438,162.6563 Q645.8438,163.0313 645.5859,163.2656 Q645.3281,163.5 644.7188,163.5 L642.4219,163.5 Q641.8125,163.5 641.5469,163.2656 Q641.2813,163.0313 641.2813,162.6406 Q641.2813,162.2656 641.5469,162.0313 Q641.8125,161.7969 642.4219,161.7969 L642.8438,161.7969 L642.4375,160.7656 Z M641.7188,159.0625 L640.3594,155.6875 L638.9844,159.0625 L641.7188,159.0625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="29" x="660.75" y="163.9102">IRDF</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="551" x2="767" y1="175" y2="175"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="551" x2="767" y1="183" y2="183"/><ellipse cx="561" cy="194" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="192" x="570" y="198.4189">serialize(std::string format) : std::string</text><!--MD5=[58ebfcdae75ef0e7d995d4e7eb3f1691]
class RedlandWrapper--><rect fill="#FEFECE" filter="url(#f18l7qxjusypax)" height="61.8359" id="RedlandWrapper" style="stroke: #A80036; stroke-width: 1.5;" width="126" x="3701" y="143"/><ellipse cx="3716" cy="159" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3718.7656,154.875 Q3718.9219,154.6563 3719.1094,154.5469 Q3719.2969,154.4375 3719.5156,154.4375 Q3719.8906,154.4375 3720.125,154.6953 Q3720.3594,154.9531 3720.3594,155.5625 L3720.3594,157.0156 Q3720.3594,157.625 3720.125,157.8906 Q3719.8906,158.1563 3719.5156,158.1563 Q3719.1719,158.1563 3718.9688,157.9531 Q3718.7656,157.7656 3718.6563,157.25 Q3718.6094,156.8906 3718.4219,156.7031 Q3718.0938,156.3281 3717.4844,156.1094 Q3716.875,155.8906 3716.25,155.8906 Q3715.4844,155.8906 3714.8516,156.2188 Q3714.2188,156.5469 3713.7266,157.2969 Q3713.2344,158.0469 3713.2344,159.0781 L3713.2344,160.1719 Q3713.2344,161.4063 3714.125,162.2266 Q3715.0156,163.0469 3716.6094,163.0469 Q3717.5469,163.0469 3718.2031,162.7969 Q3718.5938,162.6406 3719.0156,162.2031 Q3719.2813,161.9375 3719.4297,161.8594 Q3719.5781,161.7813 3719.7813,161.7813 Q3720.1094,161.7813 3720.3672,162.0391 Q3720.625,162.2969 3720.625,162.6406 Q3720.625,162.9844 3720.2813,163.3906 Q3719.7813,163.9688 3718.9844,164.2969 Q3717.9063,164.75 3716.6094,164.75 Q3715.0938,164.75 3713.8906,164.125 Q3712.9063,163.625 3712.2188,162.5547 Q3711.5313,161.4844 3711.5313,160.2031 L3711.5313,159.0469 Q3711.5313,157.7188 3712.1484,156.5703 Q3712.7656,155.4219 3713.8594,154.8047 Q3714.9531,154.1875 3716.1875,154.1875 Q3716.9219,154.1875 3717.5703,154.3516 Q3718.2188,154.5156 3718.7656,154.875 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="94" x="3730" y="163.9102">RedlandWrapper</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3702" x2="3826" y1="175" y2="175"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3702" x2="3826" y1="183" y2="183"/><ellipse cx="3712" cy="194" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="3721" y="198.4189">RedlandWrapper()</text><!--MD5=[70d07e81a5d693c0881d06d6f0643b7a]
reverse link semsim.ControlledVocabulary to semsim.BiomodelsQualifier--><path d="M267,1926.394 C267,2023.804 267,2136.659 267,2193.769 " fill="none" id="semsim.ControlledVocabulary&lt;-semsim.BiomodelsQualifier" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="260,1926.187,267,1906.187,274,1926.187,260,1926.187" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4c3dac4689dc2745c28038444388491b]
reverse link IRDF to semsim.Triple--><path d="M659,225.22 C659,284.6 659,386.25 659,472.44 " fill="none" id="IRDF&lt;-semsim.Triple" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="652,225.01,659,205.01,666,225.01,652,225.01" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[80b7bed30ddc9d3c96adb2ce9007aac9]
reverse link semsim.Predicate to semsim.ControlledVocabulary--><path d="M238.11,1230.34 C243.473,1326.7 251.996,1479.867 258.398,1594.909 " fill="none" id="semsim.Predicate&lt;-semsim.ControlledVocabulary" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="237.375,1217.13,233.7175,1223.3447,238.0475,1229.1111,241.705,1222.8964,237.375,1217.13" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5285b1da99d6c1d65d71a6f8651962ef]
reverse link semsim.Triple to semsim.Predicate--><path d="M520.621,793.85 C446.195,882.52 357.856,987.76 298.902,1057.99 " fill="none" id="semsim.Triple&lt;-semsim.Predicate" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="529.161,783.68,522.2398,785.7043,521.4464,792.8716,528.3676,790.8473,529.161,783.68" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5f14607c6160a5d86de8bcad17361fe7]
reverse link semsim.Triple to semsim.Resource--><path d="M659,796.96 C659,868.76 659,950.95 659,1016.48 " fill="none" id="semsim.Triple&lt;-semsim.Resource" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="659,783.68,655,789.68,659,795.68,663,789.68,659,783.68" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b8043314c39978c43409d2bdcbc25da9]
reverse link semsim.Triple to semsim.Subject--><path d="M794.173,793.9 C869.27,885.52 958.862,994.82 1016.31,1064.91 " fill="none" id="semsim.Triple&lt;-semsim.Subject" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="785.791,783.68,786.5017,790.856,793.399,792.96,792.6883,785.784,785.791,783.68" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[81f983741506eb008c836f01f57a36b7]
link semsim.CurlGet to semsim.PredicateNamespaces--><!--MD5=[ab9e3f19ba8fa5d347f50d6f1568cc45]
link semsim.PredicateNamespaces to semsim.RDF--><!--MD5=[fb1e7f02ff50b6c92b7cdb2933f2af49]
link semsim.RDF to semsim.RaptorStatementHandler--><!--MD5=[357eca4e26e8763e6eaebaa15f7696d5]
link semsim.CurlGet to semsim.RaptorUtils--><!--MD5=[a2c03fd7889ef297eba6ee5420e7cfe7]
link semsim.RaptorUtils to semsim.Reader--><!--MD5=[681d1874d1ff9621a1c51cc5d76e34f2]
link semsim.Reader to semsim.SemsimCombineArchive--><!--MD5=[b8d4dd14ceb9e67964b8e11ef175cc96]
link semsim.SemsimCombineArchive to semsim.SemsimUtils--><!--MD5=[c3ae69c996101e1273b82186d2947e6e]
link semsim.RaptorUtils to semsim.Uri--><!--MD5=[73e06b9ea5bdb7724e3e664f53b10149]
link semsim.Uri to semsim.Writer--><!--MD5=[7cb97e986c7a4443fa151851da33bc7a]
link semsim::Uri.Uri::KeyVal to semsim::Uri.Uri::build_error--><!--MD5=[870718d732abb8c4c147745e72bc3899]
link semsim::Uri.Uri::KeyVal to semsim::Uri.Uri::parse_error--><!--MD5=[52bb7f5e0ada26ffa43cfba3d62360e9]
@startuml






namespace semsim {
	class BiomodelsQualifier {
		+BiomodelsQualifier(const std::string& qualifier)
		#setValidTerms() : void
	}
}


namespace semsim {
	class ControlledVocabulary {
		+ControlledVocabulary()
		+ControlledVocabulary(std::string qualifier)
		+getUri() : Uri {query}
		+operator!=(const ControlledVocabulary& rhs) : bool {query}
		+operator==(const ControlledVocabulary& rhs) : bool {query}
		+operator<<(std::ostream& os, const ControlledVocabulary& vocabulary) : std : : ostream&
		+make_shared() : std::shared_ptr<ControlledVocabulary>
		-cv_namespace : std::string
		-qualifier : std::string
		-root : std::string
		+getCvNamespace() : std::string& {query}
		+getQualifier() : std::string& {query}
		+getRoot() : std::string& {query}
		#valid_terms : std::vector<std::string>
		+getValidTerms() : std::vector<std::string>& {query}
		+setCvNamespace(const std::string& cvNamespace) : void
		+setRoot(const std::string& root) : void
		#setValidTerms() : void
		#verify() : void
	}
}


namespace semsim {
	class CurlGet {
		+CurlGet()
		+{static} download(const std::string& url, const std::string& output_filename) : int
		-{static} curlWriteCallback(void* data, size_t size, size_t nmemb, void* userp) : size_t
	}
}


abstract class IRDF {
	+{abstract} serialize(std::string format) : std::string
}


namespace semsim {
	class Predicate {
		+Predicate()
		+Predicate(const std::shared_ptr<ControlledVocabulary>& term)
		+getUri() : Uri {query}
		+operator!=(const Predicate& rhs) : bool {query}
		+operator==(const Predicate& rhs) : bool {query}
		+operator<<(std::ostream& os, const Predicate& predicate) : std : : ostream&
		-term : std::shared_ptr<ControlledVocabulary>
		+getTerm() : std::shared_ptr<ControlledVocabulary>& {query}
	}
}


namespace semsim {
	class PredicateNamespaces {
		+PredicateNamespaces()
		+{static} getNamespaces() : std::unordered_map<std::string , std::string>
	}
}


namespace semsim {
	class RDF {
		+RDF()
		+RDF(librdf_world* world, raptor_world* raptor_world_, librdf_storage* storage, librdf_model* model)
		+RDF(const RDF& libRdfModel)
		+RDF(RDF&& libRdfModel)
		+~RDF()
		+{static} init() : LibrdfObjectsTuple
		+{static} fromOmex(std::string filename_or_url) : RDF
		+{static} fromRDF(std::string filename) : RDF
		+{static} fromUrl(std::string url) : RDF
		+operator=(const RDF& libRdfModel) : RDF&
		+operator=(RDF&& libRdfModel) : RDF&
		+operator!=(const RDF& rhs) : bool {query}
		+operator==(const RDF& rhs) : bool {query}
		+getModel() : librdf_model* {query}
		-model_ : librdf_model*
		+getStorage() : librdf_storage* {query}
		-storage_ : librdf_storage*
		+getWorld() : librdf_world* {query}
		-world_ : librdf_world*
		+getRaptorWorld() : raptor_world* {query}
		-raptor_world_ : raptor_world*
		+{static} fromXML(const std::string& filename, std::string format) : semsim::RDF
		-makeWriter(const std::string& format, const std::string& base_uri) : semsim::Writer
		+{static} listOptions() : std::ostringstream
		+toString(std::string format, std::string base_uri) : std::string
		+getNamespaces() : std::unordered_map<const char* , char*>& {query}
		-namespaces_ : std::unordered_map<const char*, const char*>
		+addStatement(std::string subject, std::string predicate, std::string resource) : void
		+declareNamespaces() : void
		+fromString(const std::string& str, std::string format) : void
		+setModel(librdf_model* model) : void
		+setNamespaces(const std::unordered_map<const char*, const char*>& namespaces) : void
		+setOption() : void
		+setRaptorWorld(raptor_world* raptorWorldPtr) : void
		+setStorage(librdf_storage* storage) : void
		+setWorld(librdf_world* world) : void
		+toFile(std::string format) : void
	}
}


namespace semsim {
	class RaptorStatementHandler {
		+{static} raptorStatementPrintAsNTriples(void* user_data, raptor_statement* triple) : void
		+{static} raptorStatementPrintStatement(void* user_data, raptor_statement* triple) : void
	}
}


namespace semsim {
	class RaptorUtils {
		+{static} raptorUriToTerm(raptor_world* world, raptor_uri* uri) : raptor_term*
		+{static} raptorStringToUri(raptor_world* world, const unsigned char* str) : raptor_uri*
		+{static} raptorUriToString(raptor_uri* u) : std::string
		+{static} raptorTermToString(raptor_term* term) : unsigned char*
	}
}


namespace semsim {
	class Reader {
		+Reader(librdf_world* world, librdf_model* model, std::string format)
		+getModel() : librdf_model* {query}
		-model_ : librdf_model*
		+getParser() : librdf_parser* {query}
		-makeParser(std::string format) : librdf_parser*
		-parser_ : librdf_parser*
		-baseUri_ : librdf_uri*
		+getBaseUri() : librdf_uri* {query}
		+getWorld() : librdf_world* {query}
		-world_ : librdf_world*
		+getRaptorWorld() : raptor_world* {query}
		-raptor_world_ptr_ : raptor_world*
		-format_ : std::string
		+fromString(const std::string& rdf_string) : std::string
		+getFormat() : std::string& {query}
		+parseNamespacesWithPrefix() : std::unordered_map<const char* , char*>
		+getValidParserNames() : std::vector<std::string>& {query}
		+fromFile(const std::string& filename) : void
		+setBaseUri(const std::string& baseUri) : void
		+setFormat(const std::string& f) : void
		+setOption(const std::string& option, const std::string& value) : void
	}
}


class RedlandWrapper {
	+RedlandWrapper()
}


namespace semsim {
	class Resource {
		+Resource()
		+Resource(std::string resourceNamespace, std::string identifier)
		+Resource(std::string resource)
		+operator!=(const Resource& rhs) : bool {query}
		+operator==(const Resource& rhs) : bool {query}
		+operator<<(std::ostream& os, const Resource& resource) : std : : ostream&
		+build() : std::string {query}
		-identifier : std::string
		-identifiers_base : std::string
		-resource_namespace : std::string
		+getIdentifier() : std::string& {query}
		+getIdentifiersBase() : std::string& {query}
		+getResourceNamespace() : std::string& {query}
		+{static} splitStringBy(std::string str, char delimiter) : std::vector<std::string>
	}
}


namespace semsim {
	class SemsimCombineArchive {
		+{static} fromFile(const std::string& file) : SemsimCombineArchive
		+{static} fromUrl(const std::string& url, const std::string& output_filename) : semsim::SemsimCombineArchive
		+CombineArchive : using CombineArchive::
	}
}


namespace semsim {
	class SemsimUtils {
		+SemsimUtils()
		+{static} exists(const std::string& filename) : bool
		+{static} removeFile(const std::string& filename) : int
		+{static} download(const std::string& url, const std::string filename) : void
		+{static} removeIfExists(const std::string& filename) : void
	}
}


namespace semsim {
	class Subject {
		+Subject()
		+Subject(std::string metaId)
		+operator!=(const Subject& rhs) : bool {query}
		+operator==(const Subject& rhs) : bool {query}
		+operator<<(std::ostream& os, const Subject& subject) : std : : ostream&
		-metaId : std::string
		+getMetaId() : std::string& {query}
	}
}


namespace semsim {
	class Triple {
		+Triple(Subject subject, Predicate predicate, Resource resource)
		+Triple()
		+Triple(const Triple& triple)
		+Triple(Triple&& triple)
		+~Triple()
		-predicate : Predicate
		+getPredicate() : Predicate& {query}
		-resource : Resource
		+getResource() : Resource& {query}
		-subject : Subject
		+getSubject() : Subject& {query}
		+operator=(const Triple& triple) : Triple&
		+operator=(Triple&& triple) : Triple&
		+operator!=(const Triple& rhs) : bool {query}
		+operator==(const Triple& rhs) : bool {query}
		+operator<<(std::ostream& os, const Triple& triple) : std : : ostream&
		+serialize(std::string format) : std::string
		+{static} from_xml(std::string xml) : void
		-{static} parseTriple(void* user_data, raptor_statement* raptor_triple) : void
	}
}


namespace semsim {
	class Uri {
		+Uri()
		+Uri(const Uri& url)
		+Uri(Uri&& url) noexcept: m_ip_v(-1)
		+Uri(std::string url_str)
		+query(size_t i) : KeyVal&
		+set_query(size_t i) : KeyVal&
		+query() : Query&
		+set_query() : Query&
		+add_query(KeyVal& kv) : Uri&
		+add_query(std::string& key, std::string& val) : Uri&
		+add_query(std::string& key) : Uri&
		+clear() : Uri&
		+fragment(const std::string& f) : Uri&
		+host(const std::string& h, uint8_t ip_v) : Uri&
		+operator=(std::string& url_str) : Uri&
		+operator=(const Uri& url) : Uri&
		+operator=(Uri&& url) : Uri&
		+path(const std::string& str) : Uri&
		+port(const std::string& str) : Uri&
		+port(std::uint16_t num) : Uri&
		+scheme(const std::string& s) : Uri&
		+set_query(Query& q) : Uri&
		+str(std::string& url_str) : Uri&
		+user_info(const std::string& s) : Uri&
		+operator!=(const Uri& rhs) : bool {query}
		+operator==(const Uri& rhs) : bool {query}
		-m_query : mutable Query
		-m_ip_v : mutable std::int8_t
		-m_fragment : mutable std::string
		-m_host : mutable std::string
		-m_path : mutable std::string
		-m_port : mutable std::string
		-m_scheme : mutable std::string
		-m_url : mutable std::string
		-m_user : mutable std::string
		+operator<<(std::ostream& os, const Uri& uri) : std : : ostream&
		+ip_version() : std::int8_t
		+output(std::ostream& o) : std::ostream& {query}
		+end() : std::string
		+pruneEnd() : std::string
		+str() : std::string {query}
		+fragment() : std::string&
		+host() : std::string&
		+path() : std::string&
		+port() : std::string&
		+scheme() : std::string& {query}
		+user_info() : std::string&
		-assign(const Uri& url) : void
		-assign(Uri&& url) : void
		-build_url() : void {query}
		-lazy_parse() : void {query}
		-parse_url() : void {query}
	}
}


namespace semsim::Uri {
	class Uri::KeyVal {
		+KeyVal()
		+KeyVal(std::string key, std::string& val)
		+KeyVal(std::string key)
		+operator!=(const KeyVal& rhs) : bool {query}
		+operator==(const KeyVal& rhs) : bool {query}
		+operator<<(std::ostream& o, const KeyVal& kv) : std : : ostream&
		-m_key : std::string
		-m_val : std::string
		+key() : std::string&
		+val() : std::string&
		+key(const std::string& k) : void
		+swap(KeyVal& q) : void
		+val(const std::string& v) : void
	}
}


namespace semsim::Uri {
	class Uri::build_error {
		+build_error(const std::string& reason)
	}
}


namespace semsim::Uri {
	class Uri::parse_error {
		+parse_error(const std::string& reason)
	}
}


namespace semsim {
	class Writer {
		+Writer(librdf_world* world_, librdf_model* model_, std::string format, const std::string& base_uri)
		-model_ : librdf_model*
		-serializer : librdf_serializer*
		-base_uri_ : librdf_uri*
		-world_ : librdf_world*
		-raptor_world_ptr_ : raptor_world*
		-format : std::string
		+print() : std::string
		+toString() : std::string
		+registerNamespace(const std::string& ns, const std::string& prefix) : void
		+setFormat(const std::string& format) : void
		+setOption(const std::string& option, const std::string& value) : void
		+setWorld(librdf_world* world_) : void
		+toFile(std::string format) : void
	}
}






namespace semsim {
	ControlledVocabulary <|- - BiomodelsQualifier
}


.IRDF <|- - semsim.Triple






namespace semsim {
	Predicate *- - ControlledVocabulary
}


namespace semsim {
	Triple *- - Predicate
}


namespace semsim {
	Triple *- - Resource
}


namespace semsim {
	Triple *- - Subject
}





@enduml

PlantUML version 1.2020.05(Thu Mar 19 21:17:32 GMT 2020)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) Client VM
Java Version: 1.8.0_241-b07
Operating System: Windows 10
Default Encoding: Cp1252
Language: en
Country: US
--></g></svg>