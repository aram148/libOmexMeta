@startuml





/' Objects '/
namespace Legend {
    class Parent
    class Child
    class Component
    class LargerObject

    Parent <|-- Child : Inheritance relationship
    LargerObject "1" *-- "many" Component : Aggregation relationship
    note right of LargerObject
        The LargerObject has
        a "has-a" 1 to many
        relationship with
        Component
    end note
    note left of Parent
        The child has
        a "is-a"  relationship
        with Parent.
    end note

}

    together {
        class PhysicalForce
        class PhysicalEntity
        class PhysicalProcess
    }

    together {
        class Editor
        class Reader
        class Writer
    }

    together {
        class MetaID
        class CellMLAssistant
        class SBMLAssistant
    }

    together {
        class PhysicalPhenomenon
        class PhysicalPhenomenonPtr
    }


	abstract class RDFNode {
	    + str() : std::string
	    + toRdfNode() : librdf_node*
	}

	class RDFNodePtr <<typedef shared_ptr>>{

	}

	class RDFBlankNode

	class RDFLiteralNode

	class RDFURINode



	class Subject {
	    getNode() : librdf_node*
	}
	class Predicate {
	    getNode() : librdf_node*
	}
	class PredicatePtr <<typedef shared_ptr>>

	class BiomodelsBiologyQualifier

	class BiomodelsModelQualifier

    class SemSim

    class DCTerm


	class Resource{
	    getNode() : librdf_node*
	}


	class Triple{
	    toStatement() : librdf_statement*
	}

	class Exception
	class InappropriateResourceException
	class NotImplementedException
	class NullPointerException
	class LibRDFException


	class Participant {
	    toTriples : std::vector<Triple>
    }

	class SinkParticipant{
	    toTriples : std::vector<Triple>
    }

	class SourceParticipant{
	    toTriples : std::vector<Triple>
    }
	class MediatorParticipant{
	    toTriples : std::vector<Triple>
    }



	class PhysicalEntity {
	    toTriples : std::vector<Triple>
	}

	class PhysicalForce {
	    toTriples : std::vector<Triple>
    }

	class PhysicalPhenomenon {
	    toTriples : std::vector<Triple>
    }

    note top of PhysicalPhenomenon {
        aka PropertyBearer. The
        name is negotiable.
    }

	class PhysicalPhenomenonPtr <<typedef shared_ptr>>

	class PhysicalProcess {
	    toTriples : std::vector<Triple>
    }

	class PhysicalPropertyResource


	class RDF {
	    fromString(std::string xml)
	    fromFile(std::string filename)
	    fromURL(std::string url)
	    fromOmex(std::string filename_or_url)
	    toString(std::string format, std::string base_uri)
	    toFile(std::string filename, std::string format)
	    toOmex(std::string filename, std::string format)
	    query(std::string query, std::string query_language)
	    toEditor(std::string xml, SemsimXmlType type)

	}

	class Reader

	class Editor {
	    addSingularAnnotation(Triple triple)
	    addCompositeAnnotation(PhysicalPhenomenon pp)
	}
	note top of Editor{
	There is still a bit of work
	to do on the Editor class
	}

	class SemsimXmlAssistant
	class SBMLAssistant
	class CellMLAssistant
	class XmlAssistantPtr <<typedef shared_ptr>>

	class MetaID
	class CurlGet


	class SemsimUtils


	class Writer



/' Inheritance relationships '/

    RDFNode <|-- RDFBlankNode
    RDFNode <|-- RDFLiteralNode
    RDFNode <|-- RDFURINode
    RDFNode <-- RDFNodePtr : ptr to

     Subject	 *-- Triple
     PredicatePtr *-- Triple
     Resource	 *-- Triple

     RDFNodePtr	 *-- Subject
     RDFNodePtr	 *-- Predicate
     RDFNodePtr	 *-- Resource

     Predicate <|-- BiomodelsBiologyQualifier
     Predicate <|-- BiomodelsModelQualifier
     Predicate <|-- SemSim
     Predicate <|-- DCTerm

     Predicate <-- PredicatePtr


    Resource <|-- PhysicalPropertyResource


    PhysicalPhenomenon <|-- PhysicalEntity
    PhysicalPhenomenon <|-- PhysicalProcess
    PhysicalPhenomenon <|-- PhysicalForce

    PhysicalEntity *--Participant : inheritance instead?
    Participant <|-- SourceParticipant
    Participant <|-- SinkParticipant
    Participant <|-- MediatorParticipant

    PhysicalProcess *-- SourceParticipant
    PhysicalProcess *-- SinkParticipant
    PhysicalProcess *-- MediatorParticipant

    PhysicalForce *-- SourceParticipant
    PhysicalForce *-- SinkParticipant


    RDF *-- Editor
    RDF *-- Reader
    RDF *-- Writer

    SemsimUtils --* Reader
    SemsimUtils *-- CurlGet

    note bottom of CurlGet
        Downloads from URL
    end note

    PhysicalPhenomenon *-- PhysicalPropertyResource
    PhysicalPhenomenonPtr -->  PhysicalPhenomenon

    PhysicalPhenomenonPtr --> Editor : takes as argument
    Triple --> Editor : takes as argument

    SemsimXmlAssistant <|-- SBMLAssistant
    SemsimXmlAssistant <|-- CellMLAssistant
    SemsimXmlAssistant <-- XmlAssistantPtr
    Editor *-- XmlAssistantPtr : mechanism for adding metaid's specifically for an XML

    MetaID --* SemsimXmlAssistant

    Exception <|-- NullPointerException
    Exception <|-- NotImplementedException
    Exception <|-- InappropriateResourceException
    Exception <|-- LibRDFException

'    PhysicalPropertyResource "1" *-- "many" Triple
'    PhysicalEntity "1" *-- "many" Triple
'    PhysicalProcess "1" *-- "many" Triple
'    PhysicalForce "1" *-- "many" Triple
'    Participant "1" *-- "many" Triple

    note left of PhysicalPhenomenon {
        All objects used by or that
        inherit from PhysicalPhenomenon
        have a "toTriples()" method for creating
        vectors of Triple objects.
    }

     note right of RDF  {
        The RDF and Editor
        classes are currently
        the only front end
        classes intended for
        use by users
        }





@enduml
