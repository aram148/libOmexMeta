<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="redland-iterator">
<refmeta>
<refentrytitle role="top_of_page" id="redland-iterator.top_of_page">iterator</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>REDLAND Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>iterator</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsect1 id="redland-iterator.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>&#160;*
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="librdf-iterator-map-handler">*librdf_iterator_map_handler</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="librdf-iterator-map-free-context-handler">*librdf_iterator_map_free_context_handler</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="librdf-iterator"><returnvalue>librdf_iterator</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="librdf-new-iterator">librdf_new_iterator</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="librdf-free-iterator">librdf_free_iterator</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="librdf-iterator-end">librdf_iterator_end</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="librdf-iterator-have-elements">librdf_iterator_have_elements</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="librdf-iterator-next">librdf_iterator_next</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="librdf-iterator-get-object">librdf_iterator_get_object</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="librdf-iterator-get-context">librdf_iterator_get_context</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="librdf-iterator-get-key">librdf_iterator_get_key</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="librdf-iterator-get-value">librdf_iterator_get_value</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="librdf-iterator-add-map">librdf_iterator_add_map</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="librdf-iterator"><returnvalue>librdf_iterator</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="librdf-new-empty-iterator">librdf_new_empty_iterator</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="redland-iterator.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="typedef_keyword">typedef</entry><entry role="function_name"><link linkend="librdf-iterator">librdf_iterator</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="librdf-iterator-get-method-flags">librdf_iterator_get_method_flags</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>


<refsect1 id="redland-iterator.description" role="desc">
<title role="desc.title">Description</title>

</refsect1>
<refsect1 id="redland-iterator.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="librdf-iterator-map-handler" role="function">
<title>librdf_iterator_map_handler&#160;()</title>
<indexterm zone="librdf-iterator-map-handler"><primary>librdf_iterator_map_handler</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>&#160;*
<phrase role="c_punctuation">(</phrase>*librdf_iterator_map_handler<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="librdf-iterator"><type>librdf_iterator</type></link> *iterator</parameter>,
                                <parameter><link linkend="void"><type>void</type></link> *map_context</parameter>,
                                <parameter><link linkend="void"><type>void</type></link> *item</parameter>);</programlisting>
<para>Map function for a <link linkend="librdf-iterator"><type>librdf_iterator</type></link> map operation.</para>
<para>See <link linkend="librdf-iterator-add-map"><function>librdf_iterator_add_map()</function></link>.</para>
<refsect3 id="librdf-iterator-map-handler.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>iterator</para></entry>
<entry role="parameter_description"><para>Iterator that this map is operating over.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>map_context</para></entry>
<entry role="parameter_description"><para>Map data context pointer.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>item</para></entry>
<entry role="parameter_description"><para>Pointer to the current item in the iteration.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="librdf-iterator-map-handler.returns" role="returns">
<title>Returns</title>
<para> item in keep the iteration or NULL to remove it</para>
</refsect3></refsect2>
<refsect2 id="librdf-iterator-map-free-context-handler" role="function">
<title>librdf_iterator_map_free_context_handler&#160;()</title>
<indexterm zone="librdf-iterator-map-free-context-handler"><primary>librdf_iterator_map_free_context_handler</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*librdf_iterator_map_free_context_handler<phrase role="c_punctuation">)</phrase>
                               (<parameter><link linkend="void"><type>void</type></link> *map_context</parameter>);</programlisting>
<para>Free handler function for a <link linkend="librdf-iterator"><type>librdf_iterator</type></link> map operation.</para>
<para>See <link linkend="librdf-iterator-add-map"><function>librdf_iterator_add_map()</function></link>.</para>
<refsect3 id="librdf-iterator-map-free-context-handler.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>map_context</para></entry>
<entry role="parameter_description"><para>Map data context pointer.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="librdf-new-iterator" role="function">
<title>librdf_new_iterator&#160;()</title>
<indexterm zone="librdf-new-iterator"><primary>librdf_new_iterator</primary></indexterm>
<programlisting language="C"><link linkend="librdf-iterator"><returnvalue>librdf_iterator</returnvalue></link>&#160;*
librdf_new_iterator (<parameter><link linkend="librdf-world"><type>librdf_world</type></link> *world</parameter>,
                     <parameter><link linkend="void"><type>void</type></link> *context</parameter>,
                     <parameter><link linkend="int"><type>int</type></link> (*is_end_method) (void*)</parameter>,
                     <parameter><link linkend="int"><type>int</type></link> (*next_method) (void*)</parameter>,
                     <parameter><link linkend="void"><type>void</type></link>* (*get_method) (void*, int)</parameter>,
                     <parameter><link linkend="void"><type>void</type></link> (*finished_method) (void*)</parameter>);</programlisting>
<para>Constructor - create a new <link linkend="librdf-iterator"><type>librdf_iterator</type></link> object.
The iterator object takes ownership of <parameter>context</parameter>
 and frees it with <parameter>finished_method</parameter>
.
The finished method is not called if librdf_new_iterator fails and returns NULL.</para>
<refsect3 id="librdf-new-iterator.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>world</para></entry>
<entry role="parameter_description"><para>redland world object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>context</para></entry>
<entry role="parameter_description"><para>context to pass to the iterator functions</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>is_end_method</para></entry>
<entry role="parameter_description"><para>function to call to see if the iteration has ended</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>next_method</para></entry>
<entry role="parameter_description"><para>function to get the next element</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>get_method</para></entry>
<entry role="parameter_description"><para>function to get the next element</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>finished_method</para></entry>
<entry role="parameter_description"><para>function to destroy the iterator context (or NULL if not needed)</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="librdf-new-iterator.returns" role="returns">
<title>Returns</title>
<para> a new <link linkend="librdf-iterator"><type>librdf_iterator</type></link> object or NULL on failure</para>
</refsect3></refsect2>
<refsect2 id="librdf-free-iterator" role="function">
<title>librdf_free_iterator&#160;()</title>
<indexterm zone="librdf-free-iterator"><primary>librdf_free_iterator</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
librdf_free_iterator (<parameter><link linkend="librdf-iterator"><type>librdf_iterator</type></link> *iterator</parameter>);</programlisting>
<para>Destructor - destroy a <link linkend="librdf-iterator"><type>librdf_iterator</type></link> object.</para>
<refsect3 id="librdf-free-iterator.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>iterator</para></entry>
<entry role="parameter_description"><para>the <link linkend="librdf-iterator"><type>librdf_iterator</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="librdf-iterator-end" role="function">
<title>librdf_iterator_end&#160;()</title>
<indexterm zone="librdf-iterator-end"><primary>librdf_iterator_end</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
librdf_iterator_end (<parameter><link linkend="librdf-iterator"><type>librdf_iterator</type></link> *iterator</parameter>);</programlisting>
<para>Test if the iterator has finished.</para>
<refsect3 id="librdf-iterator-end.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>iterator</para></entry>
<entry role="parameter_description"><para>the <link linkend="librdf-iterator"><type>librdf_iterator</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="librdf-iterator-end.returns" role="returns">
<title>Returns</title>
<para> non 0 if the iterator has finished</para>
</refsect3></refsect2>
<refsect2 id="librdf-iterator-have-elements" role="function" condition="deprecated:">
<title>librdf_iterator_have_elements&#160;()</title>
<indexterm zone="librdf-iterator-have-elements" role="deprecated"><primary>librdf_iterator_have_elements</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
librdf_iterator_have_elements (<parameter><link linkend="librdf-iterator"><type>librdf_iterator</type></link> *iterator</parameter>);</programlisting>
<warning><para><literal>librdf_iterator_have_elements</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>Test if the iterator has finished.</para>
<para>DEPRECATED - use !librdf_iterator_end(iterator)</para>
<refsect3 id="librdf-iterator-have-elements.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>iterator</para></entry>
<entry role="parameter_description"><para>the <link linkend="librdf-iterator"><type>librdf_iterator</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="librdf-iterator-have-elements.returns" role="returns">
<title>Returns</title>
<para> 0 if the iterator has finished</para>
</refsect3></refsect2>
<refsect2 id="librdf-iterator-next" role="function">
<title>librdf_iterator_next&#160;()</title>
<indexterm zone="librdf-iterator-next"><primary>librdf_iterator_next</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
librdf_iterator_next (<parameter><link linkend="librdf-iterator"><type>librdf_iterator</type></link> *iterator</parameter>);</programlisting>
<para>Move to the next iterator element.</para>
<refsect3 id="librdf-iterator-next.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>iterator</para></entry>
<entry role="parameter_description"><para>the <link linkend="librdf-iterator"><type>librdf_iterator</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="librdf-iterator-next.returns" role="returns">
<title>Returns</title>
<para> non 0 if the iterator has finished</para>
</refsect3></refsect2>
<refsect2 id="librdf-iterator-get-object" role="function">
<title>librdf_iterator_get_object&#160;()</title>
<indexterm zone="librdf-iterator-get-object"><primary>librdf_iterator_get_object</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>&#160;*
librdf_iterator_get_object (<parameter><link linkend="librdf-iterator"><type>librdf_iterator</type></link> *iterator</parameter>);</programlisting>
<para>Get the current object from the iterator.</para>
<para>This method returns a SHARED pointer to the current iterator object
which should be copied by the caller to preserve it if the iterator
is moved on librdf_iterator_next or if it should last after the
iterator is closed.</para>
<refsect3 id="librdf-iterator-get-object.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>iterator</para></entry>
<entry role="parameter_description"><para>the <link linkend="librdf-iterator"><type>librdf_iterator</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="librdf-iterator-get-object.returns" role="returns">
<title>Returns</title>
<para> The next element or NULL if the iterator has finished.</para>
</refsect3></refsect2>
<refsect2 id="librdf-iterator-get-context" role="function">
<title>librdf_iterator_get_context&#160;()</title>
<indexterm zone="librdf-iterator-get-context"><primary>librdf_iterator_get_context</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>&#160;*
librdf_iterator_get_context (<parameter><link linkend="librdf-iterator"><type>librdf_iterator</type></link> *iterator</parameter>);</programlisting>
<para>Get the context of the current object on the iterator.</para>
<para>This method returns a SHARED pointer to the current context node object
which should be copied by the caller to preserve it if the iterator
is moved on librdf_iterator_next or if it should last after the
iterator is closed.</para>
<refsect3 id="librdf-iterator-get-context.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>iterator</para></entry>
<entry role="parameter_description"><para>the <link linkend="librdf-iterator"><type>librdf_iterator</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="librdf-iterator-get-context.returns" role="returns">
<title>Returns</title>
<para> The context (can be NULL) or NULL if the iterator has finished.</para>
</refsect3></refsect2>
<refsect2 id="librdf-iterator-get-key" role="function">
<title>librdf_iterator_get_key&#160;()</title>
<indexterm zone="librdf-iterator-get-key"><primary>librdf_iterator_get_key</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>&#160;*
librdf_iterator_get_key (<parameter><link linkend="librdf-iterator"><type>librdf_iterator</type></link> *iterator</parameter>);</programlisting>
<para>Get the key of the current object on the iterator.</para>
<refsect3 id="librdf-iterator-get-key.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>iterator</para></entry>
<entry role="parameter_description"><para>the <link linkend="librdf-iterator"><type>librdf_iterator</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="librdf-iterator-get-key.returns" role="returns">
<title>Returns</title>
<para> The context or NULL if the iterator has finished.</para>
</refsect3></refsect2>
<refsect2 id="librdf-iterator-get-value" role="function">
<title>librdf_iterator_get_value&#160;()</title>
<indexterm zone="librdf-iterator-get-value"><primary>librdf_iterator_get_value</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>&#160;*
librdf_iterator_get_value (<parameter><link linkend="librdf-iterator"><type>librdf_iterator</type></link> *iterator</parameter>);</programlisting>
<para>Get the value of the current object on the iterator.</para>
<refsect3 id="librdf-iterator-get-value.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>iterator</para></entry>
<entry role="parameter_description"><para>the <link linkend="librdf-iterator"><type>librdf_iterator</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="librdf-iterator-get-value.returns" role="returns">
<title>Returns</title>
<para> The context or NULL if the iterator has finished.</para>
</refsect3></refsect2>
<refsect2 id="librdf-iterator-add-map" role="function">
<title>librdf_iterator_add_map&#160;()</title>
<indexterm zone="librdf-iterator-add-map"><primary>librdf_iterator_add_map</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
librdf_iterator_add_map (<parameter><link linkend="librdf-iterator"><type>librdf_iterator</type></link> *iterator</parameter>,
                         <parameter><link linkend="librdf-iterator-map-handler"><type>librdf_iterator_map_handler</type></link> map_function</parameter>,
                         <parameter><link linkend="librdf-iterator-map-free-context-handler"><type>librdf_iterator_map_free_context_handler</type></link> free_context</parameter>,
                         <parameter><link linkend="void"><type>void</type></link> *map_context</parameter>);</programlisting>
<para>Add a librdf_iterator mapping function.</para>
<para>Adds an iterator mapping function which operates over the iterator to
select which elements are returned; it will be applied as soon as
this method is called.</para>
<para>Several mapping functions can be added and they are applied in
the order given</para>
<para>The mapping function should return non 0 to allow the element to be
returned.</para>
<refsect3 id="librdf-iterator-add-map.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>iterator</para></entry>
<entry role="parameter_description"><para>the iterator</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>map_function</para></entry>
<entry role="parameter_description"><para>the function to operate</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>free_context</para></entry>
<entry role="parameter_description"><para>the function to use to free the context (or NULL)</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>map_context</para></entry>
<entry role="parameter_description"><para>the context to pass to the map function</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="librdf-iterator-add-map.returns" role="returns">
<title>Returns</title>
<para> Non 0 on failure</para>
</refsect3></refsect2>
<refsect2 id="librdf-new-empty-iterator" role="function">
<title>librdf_new_empty_iterator&#160;()</title>
<indexterm zone="librdf-new-empty-iterator"><primary>librdf_new_empty_iterator</primary></indexterm>
<programlisting language="C"><link linkend="librdf-iterator"><returnvalue>librdf_iterator</returnvalue></link>&#160;*
librdf_new_empty_iterator (<parameter><link linkend="librdf-world"><type>librdf_world</type></link> *world</parameter>);</programlisting>
<para>Constructor - create a new <link linkend="librdf-iterator"><type>librdf_iterator</type></link> with no content.</para>
<refsect3 id="librdf-new-empty-iterator.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>world</para></entry>
<entry role="parameter_description"><para>redland world object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="librdf-new-empty-iterator.returns" role="returns">
<title>Returns</title>
<para> a new <link linkend="librdf-iterator"><type>librdf_iterator</type></link> object or NULL on failure</para>
</refsect3></refsect2>

</refsect1>
<refsect1 id="redland-iterator.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="librdf-iterator" role="typedef">
<title>librdf_iterator</title>
<indexterm zone="librdf-iterator"><primary>librdf_iterator</primary></indexterm>
<programlisting language="C">typedef struct librdf_iterator_s librdf_iterator;
</programlisting>
<para>Redland iterator class.</para>
</refsect2>
<refsect2 id="librdf-iterator-get-method-flags" role="enum">
<title>enum librdf_iterator_get_method_flags</title>
<indexterm zone="librdf-iterator-get-method-flags"><primary>librdf_iterator_get_method_flags</primary></indexterm>
<para>Flags for <link linkend="librdf-new-iterator"><function>librdf_new_iterator()</function></link> get_method function pointer.</para>
<refsect3 id="librdf-iterator-get-method-flags.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="LIBRDF-ITERATOR-GET-METHOD-GET-OBJECT:CAPS">LIBRDF_ITERATOR_GET_METHOD_GET_OBJECT</para></entry>
<entry role="enum_member_description"><para>get object from iterator - implementing <link linkend="librdf-iterator-get-context"><function>librdf_iterator_get_context()</function></link></para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="LIBRDF-ITERATOR-GET-METHOD-GET-CONTEXT:CAPS">LIBRDF_ITERATOR_GET_METHOD_GET_CONTEXT</para></entry>
<entry role="enum_member_description"><para>get context from iterator - implementing <link linkend="librdf-iterator-get-object"><function>librdf_iterator_get_object()</function></link></para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="LIBRDF-ITERATOR-GET-METHOD-GET-KEY:CAPS">LIBRDF_ITERATOR_GET_METHOD_GET_KEY</para></entry>
<entry role="enum_member_description"><para>get iterator key object from iterator - implementing <link linkend="librdf-iterator-get-key"><function>librdf_iterator_get_key()</function></link></para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="LIBRDF-ITERATOR-GET-METHOD-GET-VALUE:CAPS">LIBRDF_ITERATOR_GET_METHOD_GET_VALUE</para></entry>
<entry role="enum_member_description"><para>get iterator value from iterator - implementing <link linkend="librdf-iterator-get-value"><function>librdf_iterator_get_value()</function></link></para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>

</refsect1>

</refentry>
