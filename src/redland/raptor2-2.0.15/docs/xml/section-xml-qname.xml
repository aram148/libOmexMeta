<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="raptor2-section-xml-qname">
<refmeta>
<refentrytitle role="top_of_page" id="raptor2-section-xml-qname.top_of_page">section-xml-qname</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>RAPTOR2 Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section-xml-qname</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsect1 id="raptor2-section-xml-qname.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="raptor-qname"><returnvalue>raptor_qname</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="raptor-new-qname">raptor_new_qname</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="raptor-qname"><returnvalue>raptor_qname</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="raptor-new-qname-from-namespace-local-name">raptor_new_qname_from_namespace_local_name</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="raptor-qname"><returnvalue>raptor_qname</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="raptor-new-qname-from-namespace-uri">raptor_new_qname_from_namespace_uri</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="raptor-qname"><returnvalue>raptor_qname</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="raptor-qname-copy">raptor_qname_copy</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="raptor-free-qname">raptor_free_qname</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="raptor-qname-equal">raptor_qname_equal</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="raptor-uri"><returnvalue>raptor_uri</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="raptor-qname-string-to-uri">raptor_qname_string_to_uri</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="raptor-qname-write">raptor_qname_write</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">unsigned <link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="raptor-qname-format-as-xml">raptor_qname_format_as_xml</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">const unsigned <link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="raptor-qname-get-counted-value">raptor_qname_get_counted_value</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">const unsigned <link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="raptor-qname-get-local-name">raptor_qname_get_local_name</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">const <link linkend="raptor-namespace"><returnvalue>raptor_namespace</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="raptor-qname-get-namespace">raptor_qname_get_namespace</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">const unsigned <link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="raptor-qname-get-value">raptor_qname_get_value</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">unsigned <link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="raptor-qname-to-counted-name">raptor_qname_to_counted_name</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="raptor2-section-xml-qname.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="typedef_keyword">typedef</entry><entry role="function_name"><link linkend="raptor-qname">raptor_qname</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>


<refsect1 id="raptor2-section-xml-qname.description" role="desc">
<title role="desc.title">Description</title>

</refsect1>
<refsect1 id="raptor2-section-xml-qname.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="raptor-new-qname" role="function">
<title>raptor_new_qname&#160;()</title>
<indexterm zone="raptor-new-qname"><primary>raptor_new_qname</primary></indexterm>
<programlisting language="C"><link linkend="raptor-qname"><returnvalue>raptor_qname</returnvalue></link>&#160;*
raptor_new_qname (<parameter><link linkend="raptor-namespace-stack"><type>raptor_namespace_stack</type></link> *nstack</parameter>,
                  <parameter>const unsigned <link linkend="char"><type>char</type></link> *name</parameter>,
                  <parameter>const unsigned <link linkend="char"><type>char</type></link> *value</parameter>);</programlisting>
<para>Constructor - create a new XML qname.</para>
<para>Create a new qname from the local element/attribute name,
with optional (attribute) value.  The namespace stack is used
to look up the name and find the namespace and generate the
URI of the qname.</para>
<refsect3 id="raptor-new-qname.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>nstack</para></entry>
<entry role="parameter_description"><para>namespace stack to look up for namespaces</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>element or attribute name</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>attribute value (else is an element)</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="raptor-new-qname.returns" role="returns">
<title>Returns</title>
<para> a new <link linkend="raptor-qname"><type>raptor_qname</type></link> object or NULL on failure</para>
</refsect3></refsect2>
<refsect2 id="raptor-new-qname-from-namespace-local-name" role="function">
<title>raptor_new_qname_from_namespace_local_name&#160;()</title>
<indexterm zone="raptor-new-qname-from-namespace-local-name"><primary>raptor_new_qname_from_namespace_local_name</primary></indexterm>
<programlisting language="C"><link linkend="raptor-qname"><returnvalue>raptor_qname</returnvalue></link>&#160;*
raptor_new_qname_from_namespace_local_name
                               (<parameter><link linkend="raptor-world"><type>raptor_world</type></link> *world</parameter>,
                                <parameter><link linkend="raptor-namespace"><type>raptor_namespace</type></link> *ns</parameter>,
                                <parameter>const unsigned <link linkend="char"><type>char</type></link> *local_name</parameter>,
                                <parameter>const unsigned <link linkend="char"><type>char</type></link> *value</parameter>);</programlisting>
<para>Constructor - create a new XML qname.</para>
<para>Create a new qname from the namespace and local element/attribute name,
with optional (attribute) value.</para>
<refsect3 id="raptor-new-qname-from-namespace-local-name.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>world</para></entry>
<entry role="parameter_description"><para>raptor_world object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>ns</para></entry>
<entry role="parameter_description"><para>namespace of qname (or NULL)</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>local_name</para></entry>
<entry role="parameter_description"><para>element or attribute name</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>attribute value (else is an element)</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="raptor-new-qname-from-namespace-local-name.returns" role="returns">
<title>Returns</title>
<para> a new <link linkend="raptor-qname"><type>raptor_qname</type></link> object or NULL on failure</para>
</refsect3></refsect2>
<refsect2 id="raptor-new-qname-from-namespace-uri" role="function">
<title>raptor_new_qname_from_namespace_uri&#160;()</title>
<indexterm zone="raptor-new-qname-from-namespace-uri"><primary>raptor_new_qname_from_namespace_uri</primary></indexterm>
<programlisting language="C"><link linkend="raptor-qname"><returnvalue>raptor_qname</returnvalue></link>&#160;*
raptor_new_qname_from_namespace_uri (<parameter><link linkend="raptor-namespace-stack"><type>raptor_namespace_stack</type></link> *nstack</parameter>,
                                     <parameter><link linkend="raptor-uri"><type>raptor_uri</type></link> *uri</parameter>,
                                     <parameter><link linkend="int"><type>int</type></link> xml_version</parameter>);</programlisting>
<para>Make an appropriate XML Qname from the namespaces on a namespace stack</para>
<para>Makes a qname from the in-scope namespaces in a stack if the URI matches
the prefix and the rest is a legal XML name.</para>
<refsect3 id="raptor-new-qname-from-namespace-uri.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>nstack</para></entry>
<entry role="parameter_description"><para>namespace stack</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>uri</para></entry>
<entry role="parameter_description"><para>URI to use to make qname</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>xml_version</para></entry>
<entry role="parameter_description"><para>XML Version</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="raptor-new-qname-from-namespace-uri.returns" role="returns">
<title>Returns</title>
<para> <link linkend="raptor-qname"><type>raptor_qname</type></link> for the URI or NULL on failure</para>
</refsect3></refsect2>
<refsect2 id="raptor-qname-copy" role="function">
<title>raptor_qname_copy&#160;()</title>
<indexterm zone="raptor-qname-copy"><primary>raptor_qname_copy</primary></indexterm>
<programlisting language="C"><link linkend="raptor-qname"><returnvalue>raptor_qname</returnvalue></link>&#160;*
raptor_qname_copy (<parameter><link linkend="raptor-qname"><type>raptor_qname</type></link> *qname</parameter>);</programlisting>
<para>Copy constructor - copy an existing XML qname.</para>
<refsect3 id="raptor-qname-copy.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>qname</para></entry>
<entry role="parameter_description"><para>existing qname</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="raptor-qname-copy.returns" role="returns">
<title>Returns</title>
<para> a new <link linkend="raptor-qname"><type>raptor_qname</type></link> object or NULL on failure</para>
</refsect3></refsect2>
<refsect2 id="raptor-free-qname" role="function">
<title>raptor_free_qname&#160;()</title>
<indexterm zone="raptor-free-qname"><primary>raptor_free_qname</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
raptor_free_qname (<parameter><link linkend="raptor-qname"><type>raptor_qname</type></link> *name</parameter>);</programlisting>
<para>Destructor - destroy a raptor_qname object.</para>
<refsect3 id="raptor-free-qname.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para><link linkend="raptor-qname"><type>raptor_qname</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="raptor-qname-equal" role="function">
<title>raptor_qname_equal&#160;()</title>
<indexterm zone="raptor-qname-equal"><primary>raptor_qname_equal</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
raptor_qname_equal (<parameter><link linkend="raptor-qname"><type>raptor_qname</type></link> *name1</parameter>,
                    <parameter><link linkend="raptor-qname"><type>raptor_qname</type></link> *name2</parameter>);</programlisting>
<para>Compare two XML Qnames for equality.</para>
<refsect3 id="raptor-qname-equal.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>name1</para></entry>
<entry role="parameter_description"><para>first <link linkend="raptor-qname"><type>raptor_qname</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name2</para></entry>
<entry role="parameter_description"><para>second <link linkend="raptor-name"><type>raptor_name</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="raptor-qname-equal.returns" role="returns">
<title>Returns</title>
<para> non-0 if the qnames are equal.</para>
</refsect3></refsect2>
<refsect2 id="raptor-qname-string-to-uri" role="function">
<title>raptor_qname_string_to_uri&#160;()</title>
<indexterm zone="raptor-qname-string-to-uri"><primary>raptor_qname_string_to_uri</primary></indexterm>
<programlisting language="C"><link linkend="raptor-uri"><returnvalue>raptor_uri</returnvalue></link>&#160;*
raptor_qname_string_to_uri (<parameter><link linkend="raptor-namespace-stack"><type>raptor_namespace_stack</type></link> *nstack</parameter>,
                            <parameter>const unsigned <link linkend="char"><type>char</type></link> *name</parameter>,
                            <parameter><link linkend="size-t"><type>size_t</type></link> name_len</parameter>);</programlisting>
<para>Get the URI for a qname.</para>
<para>Utility function to turn a string representing a QName in the
N3 style, into a new URI representing it.  A NULL name or name ":"
returns the default namespace URI.  A name "p:" returns
namespace name (URI) for the namespace with prefix "p".</para>
<para>Partially equivalent to 
  qname = raptor_new_qname(nstack, name, NULL);
  uri = raptor_uri_copy(qname->uri);
  raptor_free_qname(qname)
but without making the qname, and it also handles the NULL and
":" name cases as well as error checking.</para>
<refsect3 id="raptor-qname-string-to-uri.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>nstack</para></entry>
<entry role="parameter_description"><para><link linkend="raptor-namespace-stack"><type>raptor_namespace_stack</type></link> to decode the namespace</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>QName string or NULL</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name_len</para></entry>
<entry role="parameter_description"><para>QName string length</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="raptor-qname-string-to-uri.returns" role="returns">
<title>Returns</title>
<para> new <link linkend="raptor-uri"><type>raptor_uri</type></link> object or NULL on failure</para>
</refsect3></refsect2>
<refsect2 id="raptor-qname-write" role="function">
<title>raptor_qname_write&#160;()</title>
<indexterm zone="raptor-qname-write"><primary>raptor_qname_write</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
raptor_qname_write (<parameter><link linkend="raptor-qname"><type>raptor_qname</type></link> *qname</parameter>,
                    <parameter><link linkend="raptor-iostream"><type>raptor_iostream</type></link> *iostr</parameter>);</programlisting>
<para>Write a formatted qname to an iostream</para>
<refsect3 id="raptor-qname-write.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>qname</para></entry>
<entry role="parameter_description"><para>QName to write</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>iostr</para></entry>
<entry role="parameter_description"><para>raptor iosteram</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="raptor-qname-write.returns" role="returns">
<title>Returns</title>
<para> non-0 on failure</para>
</refsect3></refsect2>
<refsect2 id="raptor-qname-format-as-xml" role="function">
<title>raptor_qname_format_as_xml&#160;()</title>
<indexterm zone="raptor-qname-format-as-xml"><primary>raptor_qname_format_as_xml</primary></indexterm>
<programlisting language="C">unsigned <link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
raptor_qname_format_as_xml (<parameter>const <link linkend="raptor-qname"><type>raptor_qname</type></link> *qname</parameter>,
                            <parameter><link linkend="size-t"><type>size_t</type></link> *length_p</parameter>);</programlisting>
<para>Format a qname in an XML style into a newly allocated string.</para>
<para>Generates a string of the form a:b="value" or a="value"
depending on the qname's prefix.  Double quotes are always used.</para>
<para>If <parameter>length_p</parameter>
 is not NULL, the length of the string is
stored in the address it points to.</para>
<refsect3 id="raptor-qname-format-as-xml.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>qname</para></entry>
<entry role="parameter_description"><para>qname object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>length_p</para></entry>
<entry role="parameter_description"><para>pointer to length (or NULL)</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="raptor-qname-format-as-xml.returns" role="returns">
<title>Returns</title>
<para> qname formatted as newly allocated string or NULL on failure</para>
</refsect3></refsect2>
<refsect2 id="raptor-qname-get-counted-value" role="function">
<title>raptor_qname_get_counted_value&#160;()</title>
<indexterm zone="raptor-qname-get-counted-value"><primary>raptor_qname_get_counted_value</primary></indexterm>
<programlisting language="C">const unsigned <link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
raptor_qname_get_counted_value (<parameter><link linkend="raptor-qname"><type>raptor_qname</type></link> *name</parameter>,
                                <parameter><link linkend="size-t"><type>size_t</type></link> *length_p</parameter>);</programlisting>
<para>Get the <link linkend="raptor-value"><type>raptor_value</type></link> of an XML QName.</para>
<refsect3 id="raptor-qname-get-counted-value.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para><link linkend="raptor-qname"><type>raptor_qname</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>length_p</para></entry>
<entry role="parameter_description"><para>pointer to variable to store length of name (or NULL)</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="raptor-qname-get-counted-value.returns" role="returns">
<title>Returns</title>
<para> the value</para>
</refsect3></refsect2>
<refsect2 id="raptor-qname-get-local-name" role="function">
<title>raptor_qname_get_local_name&#160;()</title>
<indexterm zone="raptor-qname-get-local-name"><primary>raptor_qname_get_local_name</primary></indexterm>
<programlisting language="C">const unsigned <link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
raptor_qname_get_local_name (<parameter><link linkend="raptor-qname"><type>raptor_qname</type></link> *name</parameter>);</programlisting>
<para>Get the <link linkend="raptor-local-name"><type>raptor_local_name</type></link> of an XML QName.</para>
<refsect3 id="raptor-qname-get-local-name.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para><link linkend="raptor-qname"><type>raptor_qname</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="raptor-qname-get-local-name.returns" role="returns">
<title>Returns</title>
<para> the local_name</para>
</refsect3></refsect2>
<refsect2 id="raptor-qname-get-namespace" role="function">
<title>raptor_qname_get_namespace&#160;()</title>
<indexterm zone="raptor-qname-get-namespace"><primary>raptor_qname_get_namespace</primary></indexterm>
<programlisting language="C">const <link linkend="raptor-namespace"><returnvalue>raptor_namespace</returnvalue></link>&#160;*
raptor_qname_get_namespace (<parameter><link linkend="raptor-qname"><type>raptor_qname</type></link> *name</parameter>);</programlisting>
<para>Get the <link linkend="raptor-namespace"><type>raptor_namespace</type></link> of an XML QName.</para>
<refsect3 id="raptor-qname-get-namespace.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para><link linkend="raptor-qname"><type>raptor_qname</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="raptor-qname-get-namespace.returns" role="returns">
<title>Returns</title>
<para> the namespace</para>
</refsect3></refsect2>
<refsect2 id="raptor-qname-get-value" role="function">
<title>raptor_qname_get_value&#160;()</title>
<indexterm zone="raptor-qname-get-value"><primary>raptor_qname_get_value</primary></indexterm>
<programlisting language="C">const unsigned <link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
raptor_qname_get_value (<parameter><link linkend="raptor-qname"><type>raptor_qname</type></link> *name</parameter>);</programlisting>
<para>Get the <link linkend="raptor-value"><type>raptor_value</type></link> of an XML QName.</para>
<refsect3 id="raptor-qname-get-value.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para><link linkend="raptor-qname"><type>raptor_qname</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="raptor-qname-get-value.returns" role="returns">
<title>Returns</title>
<para> the value</para>
</refsect3></refsect2>
<refsect2 id="raptor-qname-to-counted-name" role="function">
<title>raptor_qname_to_counted_name&#160;()</title>
<indexterm zone="raptor-qname-to-counted-name"><primary>raptor_qname_to_counted_name</primary></indexterm>
<programlisting language="C">unsigned <link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
raptor_qname_to_counted_name (<parameter><link linkend="raptor-qname"><type>raptor_qname</type></link> *qname</parameter>,
                              <parameter><link linkend="size-t"><type>size_t</type></link> *length_p</parameter>);</programlisting>
<para>Get the string form of a QName name</para>
<refsect3 id="raptor-qname-to-counted-name.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>qname</para></entry>
<entry role="parameter_description"><para>QName to write</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>length_p</para></entry>
<entry role="parameter_description"><para>pointer to variable to store length of name (or NULL)</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="raptor-qname-to-counted-name.returns" role="returns">
<title>Returns</title>
<para> new string name or NULL on failure</para>
</refsect3></refsect2>

</refsect1>
<refsect1 id="raptor2-section-xml-qname.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="raptor-qname" role="typedef">
<title>raptor_qname</title>
<indexterm zone="raptor-qname"><primary>raptor_qname</primary></indexterm>
<programlisting language="C">raptor_qname* raptor_qname;
</programlisting>
<para>Raptor XML qname class</para>
</refsect2>

</refsect1>

</refentry>
